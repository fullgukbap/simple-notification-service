// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"notification-service/ent/entitytype"
	"notification-service/ent/notification"
	"notification-service/ent/notificationchange"
	"notification-service/ent/notificationobjectid"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// NotificationObjectIDCreate is the builder for creating a NotificationObjectID entity.
type NotificationObjectIDCreate struct {
	config
	mutation *NotificationObjectIDMutation
	hooks    []Hook
}

// SetDeleteTime sets the "delete_time" field.
func (noic *NotificationObjectIDCreate) SetDeleteTime(t time.Time) *NotificationObjectIDCreate {
	noic.mutation.SetDeleteTime(t)
	return noic
}

// SetNillableDeleteTime sets the "delete_time" field if the given value is not nil.
func (noic *NotificationObjectIDCreate) SetNillableDeleteTime(t *time.Time) *NotificationObjectIDCreate {
	if t != nil {
		noic.SetDeleteTime(*t)
	}
	return noic
}

// SetEntityID sets the "entity_id" field.
func (noic *NotificationObjectIDCreate) SetEntityID(i int) *NotificationObjectIDCreate {
	noic.mutation.SetEntityID(i)
	return noic
}

// AddNotificationIDs adds the "notifications" edge to the Notification entity by IDs.
func (noic *NotificationObjectIDCreate) AddNotificationIDs(ids ...int) *NotificationObjectIDCreate {
	noic.mutation.AddNotificationIDs(ids...)
	return noic
}

// AddNotifications adds the "notifications" edges to the Notification entity.
func (noic *NotificationObjectIDCreate) AddNotifications(n ...*Notification) *NotificationObjectIDCreate {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return noic.AddNotificationIDs(ids...)
}

// AddNotificationChangeIDs adds the "notificationChanges" edge to the NotificationChange entity by IDs.
func (noic *NotificationObjectIDCreate) AddNotificationChangeIDs(ids ...int) *NotificationObjectIDCreate {
	noic.mutation.AddNotificationChangeIDs(ids...)
	return noic
}

// AddNotificationChanges adds the "notificationChanges" edges to the NotificationChange entity.
func (noic *NotificationObjectIDCreate) AddNotificationChanges(n ...*NotificationChange) *NotificationObjectIDCreate {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return noic.AddNotificationChangeIDs(ids...)
}

// SetEntityTypeIDID sets the "entityTypeID" edge to the EntityType entity by ID.
func (noic *NotificationObjectIDCreate) SetEntityTypeIDID(id int) *NotificationObjectIDCreate {
	noic.mutation.SetEntityTypeIDID(id)
	return noic
}

// SetNillableEntityTypeIDID sets the "entityTypeID" edge to the EntityType entity by ID if the given value is not nil.
func (noic *NotificationObjectIDCreate) SetNillableEntityTypeIDID(id *int) *NotificationObjectIDCreate {
	if id != nil {
		noic = noic.SetEntityTypeIDID(*id)
	}
	return noic
}

// SetEntityTypeID sets the "entityTypeID" edge to the EntityType entity.
func (noic *NotificationObjectIDCreate) SetEntityTypeID(e *EntityType) *NotificationObjectIDCreate {
	return noic.SetEntityTypeIDID(e.ID)
}

// Mutation returns the NotificationObjectIDMutation object of the builder.
func (noic *NotificationObjectIDCreate) Mutation() *NotificationObjectIDMutation {
	return noic.mutation
}

// Save creates the NotificationObjectID in the database.
func (noic *NotificationObjectIDCreate) Save(ctx context.Context) (*NotificationObjectID, error) {
	return withHooks(ctx, noic.sqlSave, noic.mutation, noic.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (noic *NotificationObjectIDCreate) SaveX(ctx context.Context) *NotificationObjectID {
	v, err := noic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (noic *NotificationObjectIDCreate) Exec(ctx context.Context) error {
	_, err := noic.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (noic *NotificationObjectIDCreate) ExecX(ctx context.Context) {
	if err := noic.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (noic *NotificationObjectIDCreate) check() error {
	if _, ok := noic.mutation.EntityID(); !ok {
		return &ValidationError{Name: "entity_id", err: errors.New(`ent: missing required field "NotificationObjectID.entity_id"`)}
	}
	if v, ok := noic.mutation.EntityID(); ok {
		if err := notificationobjectid.EntityIDValidator(v); err != nil {
			return &ValidationError{Name: "entity_id", err: fmt.Errorf(`ent: validator failed for field "NotificationObjectID.entity_id": %w`, err)}
		}
	}
	return nil
}

func (noic *NotificationObjectIDCreate) sqlSave(ctx context.Context) (*NotificationObjectID, error) {
	if err := noic.check(); err != nil {
		return nil, err
	}
	_node, _spec := noic.createSpec()
	if err := sqlgraph.CreateNode(ctx, noic.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	noic.mutation.id = &_node.ID
	noic.mutation.done = true
	return _node, nil
}

func (noic *NotificationObjectIDCreate) createSpec() (*NotificationObjectID, *sqlgraph.CreateSpec) {
	var (
		_node = &NotificationObjectID{config: noic.config}
		_spec = sqlgraph.NewCreateSpec(notificationobjectid.Table, sqlgraph.NewFieldSpec(notificationobjectid.FieldID, field.TypeInt))
	)
	if value, ok := noic.mutation.DeleteTime(); ok {
		_spec.SetField(notificationobjectid.FieldDeleteTime, field.TypeTime, value)
		_node.DeleteTime = value
	}
	if value, ok := noic.mutation.EntityID(); ok {
		_spec.SetField(notificationobjectid.FieldEntityID, field.TypeInt, value)
		_node.EntityID = value
	}
	if nodes := noic.mutation.NotificationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   notificationobjectid.NotificationsTable,
			Columns: []string{notificationobjectid.NotificationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notification.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := noic.mutation.NotificationChangesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   notificationobjectid.NotificationChangesTable,
			Columns: []string{notificationobjectid.NotificationChangesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notificationchange.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := noic.mutation.EntityTypeIDIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   notificationobjectid.EntityTypeIDTable,
			Columns: []string{notificationobjectid.EntityTypeIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entitytype.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.entity_type_notification_object_ids = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// NotificationObjectIDCreateBulk is the builder for creating many NotificationObjectID entities in bulk.
type NotificationObjectIDCreateBulk struct {
	config
	err      error
	builders []*NotificationObjectIDCreate
}

// Save creates the NotificationObjectID entities in the database.
func (noicb *NotificationObjectIDCreateBulk) Save(ctx context.Context) ([]*NotificationObjectID, error) {
	if noicb.err != nil {
		return nil, noicb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(noicb.builders))
	nodes := make([]*NotificationObjectID, len(noicb.builders))
	mutators := make([]Mutator, len(noicb.builders))
	for i := range noicb.builders {
		func(i int, root context.Context) {
			builder := noicb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*NotificationObjectIDMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, noicb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, noicb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, noicb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (noicb *NotificationObjectIDCreateBulk) SaveX(ctx context.Context) []*NotificationObjectID {
	v, err := noicb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (noicb *NotificationObjectIDCreateBulk) Exec(ctx context.Context) error {
	_, err := noicb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (noicb *NotificationObjectIDCreateBulk) ExecX(ctx context.Context) {
	if err := noicb.Exec(ctx); err != nil {
		panic(err)
	}
}
