// Code generated by ent, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// EntityTypesColumns holds the columns for the "entity_types" table.
	EntityTypesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "deleted_at", Type: field.TypeTime, Nullable: true},
		{Name: "entity_name", Type: field.TypeString},
		{Name: "notification_description", Type: field.TypeString},
	}
	// EntityTypesTable holds the schema information for the "entity_types" table.
	EntityTypesTable = &schema.Table{
		Name:       "entity_types",
		Columns:    EntityTypesColumns,
		PrimaryKey: []*schema.Column{EntityTypesColumns[0]},
	}
	// FriendshipsColumns holds the columns for the "friendships" table.
	FriendshipsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "deleted_at", Type: field.TypeTime, Nullable: true},
		{Name: "friendship_status_friendships", Type: field.TypeInt, Nullable: true},
		{Name: "user_friendships_receiver", Type: field.TypeInt, Nullable: true},
		{Name: "user_friendships_sender", Type: field.TypeInt, Nullable: true},
	}
	// FriendshipsTable holds the schema information for the "friendships" table.
	FriendshipsTable = &schema.Table{
		Name:       "friendships",
		Columns:    FriendshipsColumns,
		PrimaryKey: []*schema.Column{FriendshipsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "friendships_friendship_status_friendships",
				Columns:    []*schema.Column{FriendshipsColumns[4]},
				RefColumns: []*schema.Column{FriendshipStatusColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "friendships_users_friendshipsReceiver",
				Columns:    []*schema.Column{FriendshipsColumns[5]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "friendships_users_friendshipsSender",
				Columns:    []*schema.Column{FriendshipsColumns[6]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// FriendshipStatusColumns holds the columns for the "friendship_status" table.
	FriendshipStatusColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "deleted_at", Type: field.TypeTime, Nullable: true},
		{Name: "description", Type: field.TypeString, Unique: true},
	}
	// FriendshipStatusTable holds the schema information for the "friendship_status" table.
	FriendshipStatusTable = &schema.Table{
		Name:       "friendship_status",
		Columns:    FriendshipStatusColumns,
		PrimaryKey: []*schema.Column{FriendshipStatusColumns[0]},
	}
	// NotificationsColumns holds the columns for the "notifications" table.
	NotificationsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "deleted_at", Type: field.TypeTime, Nullable: true},
		{Name: "is_read", Type: field.TypeBool, Default: false},
		{Name: "notification_object_notifications", Type: field.TypeInt, Nullable: true},
		{Name: "user_notifications", Type: field.TypeInt, Nullable: true},
	}
	// NotificationsTable holds the schema information for the "notifications" table.
	NotificationsTable = &schema.Table{
		Name:       "notifications",
		Columns:    NotificationsColumns,
		PrimaryKey: []*schema.Column{NotificationsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "notifications_notification_objects_notifications",
				Columns:    []*schema.Column{NotificationsColumns[5]},
				RefColumns: []*schema.Column{NotificationObjectsColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "notifications_users_notifications",
				Columns:    []*schema.Column{NotificationsColumns[6]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// NotificationChangesColumns holds the columns for the "notification_changes" table.
	NotificationChangesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "deleted_at", Type: field.TypeTime, Nullable: true},
		{Name: "notification_object_notification_changes", Type: field.TypeInt, Nullable: true},
		{Name: "user_notification_changes", Type: field.TypeInt, Nullable: true},
	}
	// NotificationChangesTable holds the schema information for the "notification_changes" table.
	NotificationChangesTable = &schema.Table{
		Name:       "notification_changes",
		Columns:    NotificationChangesColumns,
		PrimaryKey: []*schema.Column{NotificationChangesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "notification_changes_notification_objects_notificationChanges",
				Columns:    []*schema.Column{NotificationChangesColumns[4]},
				RefColumns: []*schema.Column{NotificationObjectsColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "notification_changes_users_notificationChanges",
				Columns:    []*schema.Column{NotificationChangesColumns[5]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// NotificationObjectsColumns holds the columns for the "notification_objects" table.
	NotificationObjectsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "deleted_at", Type: field.TypeTime, Nullable: true},
		{Name: "entity_id", Type: field.TypeInt},
		{Name: "entity_type_notification_objects", Type: field.TypeInt, Nullable: true},
	}
	// NotificationObjectsTable holds the schema information for the "notification_objects" table.
	NotificationObjectsTable = &schema.Table{
		Name:       "notification_objects",
		Columns:    NotificationObjectsColumns,
		PrimaryKey: []*schema.Column{NotificationObjectsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "notification_objects_entity_types_notificationObjects",
				Columns:    []*schema.Column{NotificationObjectsColumns[5]},
				RefColumns: []*schema.Column{EntityTypesColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// UsersColumns holds the columns for the "users" table.
	UsersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "deleted_at", Type: field.TypeTime, Nullable: true},
		{Name: "username", Type: field.TypeString, Unique: true},
	}
	// UsersTable holds the schema information for the "users" table.
	UsersTable = &schema.Table{
		Name:       "users",
		Columns:    UsersColumns,
		PrimaryKey: []*schema.Column{UsersColumns[0]},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		EntityTypesTable,
		FriendshipsTable,
		FriendshipStatusTable,
		NotificationsTable,
		NotificationChangesTable,
		NotificationObjectsTable,
		UsersTable,
	}
)

func init() {
	FriendshipsTable.ForeignKeys[0].RefTable = FriendshipStatusTable
	FriendshipsTable.ForeignKeys[1].RefTable = UsersTable
	FriendshipsTable.ForeignKeys[2].RefTable = UsersTable
	NotificationsTable.ForeignKeys[0].RefTable = NotificationObjectsTable
	NotificationsTable.ForeignKeys[1].RefTable = UsersTable
	NotificationChangesTable.ForeignKeys[0].RefTable = NotificationObjectsTable
	NotificationChangesTable.ForeignKeys[1].RefTable = UsersTable
	NotificationObjectsTable.ForeignKeys[0].RefTable = EntityTypesTable
}
