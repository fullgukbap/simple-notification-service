// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"notification-service/ent/entitytype"
	"notification-service/ent/notification"
	"notification-service/ent/notificationchange"
	"notification-service/ent/notificationobject"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// NotificationObjectCreate is the builder for creating a NotificationObject entity.
type NotificationObjectCreate struct {
	config
	mutation *NotificationObjectMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (noc *NotificationObjectCreate) SetCreatedAt(t time.Time) *NotificationObjectCreate {
	noc.mutation.SetCreatedAt(t)
	return noc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (noc *NotificationObjectCreate) SetNillableCreatedAt(t *time.Time) *NotificationObjectCreate {
	if t != nil {
		noc.SetCreatedAt(*t)
	}
	return noc
}

// SetUpdatedAt sets the "updated_at" field.
func (noc *NotificationObjectCreate) SetUpdatedAt(t time.Time) *NotificationObjectCreate {
	noc.mutation.SetUpdatedAt(t)
	return noc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (noc *NotificationObjectCreate) SetNillableUpdatedAt(t *time.Time) *NotificationObjectCreate {
	if t != nil {
		noc.SetUpdatedAt(*t)
	}
	return noc
}

// SetDeletedAt sets the "deleted_at" field.
func (noc *NotificationObjectCreate) SetDeletedAt(t time.Time) *NotificationObjectCreate {
	noc.mutation.SetDeletedAt(t)
	return noc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (noc *NotificationObjectCreate) SetNillableDeletedAt(t *time.Time) *NotificationObjectCreate {
	if t != nil {
		noc.SetDeletedAt(*t)
	}
	return noc
}

// SetEntityID sets the "entity_id" field.
func (noc *NotificationObjectCreate) SetEntityID(i int) *NotificationObjectCreate {
	noc.mutation.SetEntityID(i)
	return noc
}

// AddNotificationIDs adds the "notifications" edge to the Notification entity by IDs.
func (noc *NotificationObjectCreate) AddNotificationIDs(ids ...int) *NotificationObjectCreate {
	noc.mutation.AddNotificationIDs(ids...)
	return noc
}

// AddNotifications adds the "notifications" edges to the Notification entity.
func (noc *NotificationObjectCreate) AddNotifications(n ...*Notification) *NotificationObjectCreate {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return noc.AddNotificationIDs(ids...)
}

// AddNotificationChangeIDs adds the "notificationChanges" edge to the NotificationChange entity by IDs.
func (noc *NotificationObjectCreate) AddNotificationChangeIDs(ids ...int) *NotificationObjectCreate {
	noc.mutation.AddNotificationChangeIDs(ids...)
	return noc
}

// AddNotificationChanges adds the "notificationChanges" edges to the NotificationChange entity.
func (noc *NotificationObjectCreate) AddNotificationChanges(n ...*NotificationChange) *NotificationObjectCreate {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return noc.AddNotificationChangeIDs(ids...)
}

// SetEntityTypeID sets the "entityType" edge to the EntityType entity by ID.
func (noc *NotificationObjectCreate) SetEntityTypeID(id int) *NotificationObjectCreate {
	noc.mutation.SetEntityTypeID(id)
	return noc
}

// SetNillableEntityTypeID sets the "entityType" edge to the EntityType entity by ID if the given value is not nil.
func (noc *NotificationObjectCreate) SetNillableEntityTypeID(id *int) *NotificationObjectCreate {
	if id != nil {
		noc = noc.SetEntityTypeID(*id)
	}
	return noc
}

// SetEntityType sets the "entityType" edge to the EntityType entity.
func (noc *NotificationObjectCreate) SetEntityType(e *EntityType) *NotificationObjectCreate {
	return noc.SetEntityTypeID(e.ID)
}

// Mutation returns the NotificationObjectMutation object of the builder.
func (noc *NotificationObjectCreate) Mutation() *NotificationObjectMutation {
	return noc.mutation
}

// Save creates the NotificationObject in the database.
func (noc *NotificationObjectCreate) Save(ctx context.Context) (*NotificationObject, error) {
	if err := noc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, noc.sqlSave, noc.mutation, noc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (noc *NotificationObjectCreate) SaveX(ctx context.Context) *NotificationObject {
	v, err := noc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (noc *NotificationObjectCreate) Exec(ctx context.Context) error {
	_, err := noc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (noc *NotificationObjectCreate) ExecX(ctx context.Context) {
	if err := noc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (noc *NotificationObjectCreate) defaults() error {
	if _, ok := noc.mutation.CreatedAt(); !ok {
		if notificationobject.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized notificationobject.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := notificationobject.DefaultCreatedAt()
		noc.mutation.SetCreatedAt(v)
	}
	if _, ok := noc.mutation.UpdatedAt(); !ok {
		if notificationobject.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized notificationobject.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := notificationobject.DefaultUpdatedAt()
		noc.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (noc *NotificationObjectCreate) check() error {
	if _, ok := noc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "NotificationObject.created_at"`)}
	}
	if _, ok := noc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "NotificationObject.updated_at"`)}
	}
	if _, ok := noc.mutation.EntityID(); !ok {
		return &ValidationError{Name: "entity_id", err: errors.New(`ent: missing required field "NotificationObject.entity_id"`)}
	}
	if v, ok := noc.mutation.EntityID(); ok {
		if err := notificationobject.EntityIDValidator(v); err != nil {
			return &ValidationError{Name: "entity_id", err: fmt.Errorf(`ent: validator failed for field "NotificationObject.entity_id": %w`, err)}
		}
	}
	return nil
}

func (noc *NotificationObjectCreate) sqlSave(ctx context.Context) (*NotificationObject, error) {
	if err := noc.check(); err != nil {
		return nil, err
	}
	_node, _spec := noc.createSpec()
	if err := sqlgraph.CreateNode(ctx, noc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	noc.mutation.id = &_node.ID
	noc.mutation.done = true
	return _node, nil
}

func (noc *NotificationObjectCreate) createSpec() (*NotificationObject, *sqlgraph.CreateSpec) {
	var (
		_node = &NotificationObject{config: noc.config}
		_spec = sqlgraph.NewCreateSpec(notificationobject.Table, sqlgraph.NewFieldSpec(notificationobject.FieldID, field.TypeInt))
	)
	if value, ok := noc.mutation.CreatedAt(); ok {
		_spec.SetField(notificationobject.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := noc.mutation.UpdatedAt(); ok {
		_spec.SetField(notificationobject.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := noc.mutation.DeletedAt(); ok {
		_spec.SetField(notificationobject.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := noc.mutation.EntityID(); ok {
		_spec.SetField(notificationobject.FieldEntityID, field.TypeInt, value)
		_node.EntityID = value
	}
	if nodes := noc.mutation.NotificationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   notificationobject.NotificationsTable,
			Columns: []string{notificationobject.NotificationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notification.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := noc.mutation.NotificationChangesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   notificationobject.NotificationChangesTable,
			Columns: []string{notificationobject.NotificationChangesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notificationchange.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := noc.mutation.EntityTypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   notificationobject.EntityTypeTable,
			Columns: []string{notificationobject.EntityTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entitytype.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.entity_type_notification_objects = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// NotificationObjectCreateBulk is the builder for creating many NotificationObject entities in bulk.
type NotificationObjectCreateBulk struct {
	config
	err      error
	builders []*NotificationObjectCreate
}

// Save creates the NotificationObject entities in the database.
func (nocb *NotificationObjectCreateBulk) Save(ctx context.Context) ([]*NotificationObject, error) {
	if nocb.err != nil {
		return nil, nocb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(nocb.builders))
	nodes := make([]*NotificationObject, len(nocb.builders))
	mutators := make([]Mutator, len(nocb.builders))
	for i := range nocb.builders {
		func(i int, root context.Context) {
			builder := nocb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*NotificationObjectMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, nocb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, nocb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, nocb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (nocb *NotificationObjectCreateBulk) SaveX(ctx context.Context) []*NotificationObject {
	v, err := nocb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (nocb *NotificationObjectCreateBulk) Exec(ctx context.Context) error {
	_, err := nocb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nocb *NotificationObjectCreateBulk) ExecX(ctx context.Context) {
	if err := nocb.Exec(ctx); err != nil {
		panic(err)
	}
}
