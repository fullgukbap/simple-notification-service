// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"notification-service/ent/entitytype"
	"notification-service/ent/notificationobjectid"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// EntityTypeCreate is the builder for creating a EntityType entity.
type EntityTypeCreate struct {
	config
	mutation *EntityTypeMutation
	hooks    []Hook
}

// SetDeleteTime sets the "delete_time" field.
func (etc *EntityTypeCreate) SetDeleteTime(t time.Time) *EntityTypeCreate {
	etc.mutation.SetDeleteTime(t)
	return etc
}

// SetNillableDeleteTime sets the "delete_time" field if the given value is not nil.
func (etc *EntityTypeCreate) SetNillableDeleteTime(t *time.Time) *EntityTypeCreate {
	if t != nil {
		etc.SetDeleteTime(*t)
	}
	return etc
}

// SetEntityName sets the "entityName" field.
func (etc *EntityTypeCreate) SetEntityName(s string) *EntityTypeCreate {
	etc.mutation.SetEntityName(s)
	return etc
}

// SetNotificationDescription sets the "notificationDescription" field.
func (etc *EntityTypeCreate) SetNotificationDescription(s string) *EntityTypeCreate {
	etc.mutation.SetNotificationDescription(s)
	return etc
}

// AddNotificationObjectIDIDs adds the "notificationObjectIDs" edge to the NotificationObjectID entity by IDs.
func (etc *EntityTypeCreate) AddNotificationObjectIDIDs(ids ...int) *EntityTypeCreate {
	etc.mutation.AddNotificationObjectIDIDs(ids...)
	return etc
}

// AddNotificationObjectIDs adds the "notificationObjectIDs" edges to the NotificationObjectID entity.
func (etc *EntityTypeCreate) AddNotificationObjectIDs(n ...*NotificationObjectID) *EntityTypeCreate {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return etc.AddNotificationObjectIDIDs(ids...)
}

// Mutation returns the EntityTypeMutation object of the builder.
func (etc *EntityTypeCreate) Mutation() *EntityTypeMutation {
	return etc.mutation
}

// Save creates the EntityType in the database.
func (etc *EntityTypeCreate) Save(ctx context.Context) (*EntityType, error) {
	return withHooks(ctx, etc.sqlSave, etc.mutation, etc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (etc *EntityTypeCreate) SaveX(ctx context.Context) *EntityType {
	v, err := etc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (etc *EntityTypeCreate) Exec(ctx context.Context) error {
	_, err := etc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (etc *EntityTypeCreate) ExecX(ctx context.Context) {
	if err := etc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (etc *EntityTypeCreate) check() error {
	if _, ok := etc.mutation.EntityName(); !ok {
		return &ValidationError{Name: "entityName", err: errors.New(`ent: missing required field "EntityType.entityName"`)}
	}
	if _, ok := etc.mutation.NotificationDescription(); !ok {
		return &ValidationError{Name: "notificationDescription", err: errors.New(`ent: missing required field "EntityType.notificationDescription"`)}
	}
	return nil
}

func (etc *EntityTypeCreate) sqlSave(ctx context.Context) (*EntityType, error) {
	if err := etc.check(); err != nil {
		return nil, err
	}
	_node, _spec := etc.createSpec()
	if err := sqlgraph.CreateNode(ctx, etc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	etc.mutation.id = &_node.ID
	etc.mutation.done = true
	return _node, nil
}

func (etc *EntityTypeCreate) createSpec() (*EntityType, *sqlgraph.CreateSpec) {
	var (
		_node = &EntityType{config: etc.config}
		_spec = sqlgraph.NewCreateSpec(entitytype.Table, sqlgraph.NewFieldSpec(entitytype.FieldID, field.TypeInt))
	)
	if value, ok := etc.mutation.DeleteTime(); ok {
		_spec.SetField(entitytype.FieldDeleteTime, field.TypeTime, value)
		_node.DeleteTime = value
	}
	if value, ok := etc.mutation.EntityName(); ok {
		_spec.SetField(entitytype.FieldEntityName, field.TypeString, value)
		_node.EntityName = value
	}
	if value, ok := etc.mutation.NotificationDescription(); ok {
		_spec.SetField(entitytype.FieldNotificationDescription, field.TypeString, value)
		_node.NotificationDescription = value
	}
	if nodes := etc.mutation.NotificationObjectIDsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   entitytype.NotificationObjectIDsTable,
			Columns: []string{entitytype.NotificationObjectIDsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notificationobjectid.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// EntityTypeCreateBulk is the builder for creating many EntityType entities in bulk.
type EntityTypeCreateBulk struct {
	config
	err      error
	builders []*EntityTypeCreate
}

// Save creates the EntityType entities in the database.
func (etcb *EntityTypeCreateBulk) Save(ctx context.Context) ([]*EntityType, error) {
	if etcb.err != nil {
		return nil, etcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(etcb.builders))
	nodes := make([]*EntityType, len(etcb.builders))
	mutators := make([]Mutator, len(etcb.builders))
	for i := range etcb.builders {
		func(i int, root context.Context) {
			builder := etcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*EntityTypeMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, etcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, etcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, etcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (etcb *EntityTypeCreateBulk) SaveX(ctx context.Context) []*EntityType {
	v, err := etcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (etcb *EntityTypeCreateBulk) Exec(ctx context.Context) error {
	_, err := etcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (etcb *EntityTypeCreateBulk) ExecX(ctx context.Context) {
	if err := etcb.Exec(ctx); err != nil {
		panic(err)
	}
}
