// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"notification-service/ent/entitytype"
	"notification-service/ent/notification"
	"notification-service/ent/notificationchange"
	"notification-service/ent/notificationobjectid"
	"notification-service/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// NotificationObjectIDUpdate is the builder for updating NotificationObjectID entities.
type NotificationObjectIDUpdate struct {
	config
	hooks    []Hook
	mutation *NotificationObjectIDMutation
}

// Where appends a list predicates to the NotificationObjectIDUpdate builder.
func (noiu *NotificationObjectIDUpdate) Where(ps ...predicate.NotificationObjectID) *NotificationObjectIDUpdate {
	noiu.mutation.Where(ps...)
	return noiu
}

// SetDeleteTime sets the "delete_time" field.
func (noiu *NotificationObjectIDUpdate) SetDeleteTime(t time.Time) *NotificationObjectIDUpdate {
	noiu.mutation.SetDeleteTime(t)
	return noiu
}

// SetNillableDeleteTime sets the "delete_time" field if the given value is not nil.
func (noiu *NotificationObjectIDUpdate) SetNillableDeleteTime(t *time.Time) *NotificationObjectIDUpdate {
	if t != nil {
		noiu.SetDeleteTime(*t)
	}
	return noiu
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (noiu *NotificationObjectIDUpdate) ClearDeleteTime() *NotificationObjectIDUpdate {
	noiu.mutation.ClearDeleteTime()
	return noiu
}

// SetEntityID sets the "entity_id" field.
func (noiu *NotificationObjectIDUpdate) SetEntityID(i int) *NotificationObjectIDUpdate {
	noiu.mutation.ResetEntityID()
	noiu.mutation.SetEntityID(i)
	return noiu
}

// SetNillableEntityID sets the "entity_id" field if the given value is not nil.
func (noiu *NotificationObjectIDUpdate) SetNillableEntityID(i *int) *NotificationObjectIDUpdate {
	if i != nil {
		noiu.SetEntityID(*i)
	}
	return noiu
}

// AddEntityID adds i to the "entity_id" field.
func (noiu *NotificationObjectIDUpdate) AddEntityID(i int) *NotificationObjectIDUpdate {
	noiu.mutation.AddEntityID(i)
	return noiu
}

// AddNotificationIDs adds the "notifications" edge to the Notification entity by IDs.
func (noiu *NotificationObjectIDUpdate) AddNotificationIDs(ids ...int) *NotificationObjectIDUpdate {
	noiu.mutation.AddNotificationIDs(ids...)
	return noiu
}

// AddNotifications adds the "notifications" edges to the Notification entity.
func (noiu *NotificationObjectIDUpdate) AddNotifications(n ...*Notification) *NotificationObjectIDUpdate {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return noiu.AddNotificationIDs(ids...)
}

// AddNotificationChangeIDs adds the "notificationChanges" edge to the NotificationChange entity by IDs.
func (noiu *NotificationObjectIDUpdate) AddNotificationChangeIDs(ids ...int) *NotificationObjectIDUpdate {
	noiu.mutation.AddNotificationChangeIDs(ids...)
	return noiu
}

// AddNotificationChanges adds the "notificationChanges" edges to the NotificationChange entity.
func (noiu *NotificationObjectIDUpdate) AddNotificationChanges(n ...*NotificationChange) *NotificationObjectIDUpdate {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return noiu.AddNotificationChangeIDs(ids...)
}

// SetEntityTypeIDID sets the "entityTypeID" edge to the EntityType entity by ID.
func (noiu *NotificationObjectIDUpdate) SetEntityTypeIDID(id int) *NotificationObjectIDUpdate {
	noiu.mutation.SetEntityTypeIDID(id)
	return noiu
}

// SetNillableEntityTypeIDID sets the "entityTypeID" edge to the EntityType entity by ID if the given value is not nil.
func (noiu *NotificationObjectIDUpdate) SetNillableEntityTypeIDID(id *int) *NotificationObjectIDUpdate {
	if id != nil {
		noiu = noiu.SetEntityTypeIDID(*id)
	}
	return noiu
}

// SetEntityTypeID sets the "entityTypeID" edge to the EntityType entity.
func (noiu *NotificationObjectIDUpdate) SetEntityTypeID(e *EntityType) *NotificationObjectIDUpdate {
	return noiu.SetEntityTypeIDID(e.ID)
}

// Mutation returns the NotificationObjectIDMutation object of the builder.
func (noiu *NotificationObjectIDUpdate) Mutation() *NotificationObjectIDMutation {
	return noiu.mutation
}

// ClearNotifications clears all "notifications" edges to the Notification entity.
func (noiu *NotificationObjectIDUpdate) ClearNotifications() *NotificationObjectIDUpdate {
	noiu.mutation.ClearNotifications()
	return noiu
}

// RemoveNotificationIDs removes the "notifications" edge to Notification entities by IDs.
func (noiu *NotificationObjectIDUpdate) RemoveNotificationIDs(ids ...int) *NotificationObjectIDUpdate {
	noiu.mutation.RemoveNotificationIDs(ids...)
	return noiu
}

// RemoveNotifications removes "notifications" edges to Notification entities.
func (noiu *NotificationObjectIDUpdate) RemoveNotifications(n ...*Notification) *NotificationObjectIDUpdate {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return noiu.RemoveNotificationIDs(ids...)
}

// ClearNotificationChanges clears all "notificationChanges" edges to the NotificationChange entity.
func (noiu *NotificationObjectIDUpdate) ClearNotificationChanges() *NotificationObjectIDUpdate {
	noiu.mutation.ClearNotificationChanges()
	return noiu
}

// RemoveNotificationChangeIDs removes the "notificationChanges" edge to NotificationChange entities by IDs.
func (noiu *NotificationObjectIDUpdate) RemoveNotificationChangeIDs(ids ...int) *NotificationObjectIDUpdate {
	noiu.mutation.RemoveNotificationChangeIDs(ids...)
	return noiu
}

// RemoveNotificationChanges removes "notificationChanges" edges to NotificationChange entities.
func (noiu *NotificationObjectIDUpdate) RemoveNotificationChanges(n ...*NotificationChange) *NotificationObjectIDUpdate {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return noiu.RemoveNotificationChangeIDs(ids...)
}

// ClearEntityTypeID clears the "entityTypeID" edge to the EntityType entity.
func (noiu *NotificationObjectIDUpdate) ClearEntityTypeID() *NotificationObjectIDUpdate {
	noiu.mutation.ClearEntityTypeID()
	return noiu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (noiu *NotificationObjectIDUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, noiu.sqlSave, noiu.mutation, noiu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (noiu *NotificationObjectIDUpdate) SaveX(ctx context.Context) int {
	affected, err := noiu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (noiu *NotificationObjectIDUpdate) Exec(ctx context.Context) error {
	_, err := noiu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (noiu *NotificationObjectIDUpdate) ExecX(ctx context.Context) {
	if err := noiu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (noiu *NotificationObjectIDUpdate) check() error {
	if v, ok := noiu.mutation.EntityID(); ok {
		if err := notificationobjectid.EntityIDValidator(v); err != nil {
			return &ValidationError{Name: "entity_id", err: fmt.Errorf(`ent: validator failed for field "NotificationObjectID.entity_id": %w`, err)}
		}
	}
	return nil
}

func (noiu *NotificationObjectIDUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := noiu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(notificationobjectid.Table, notificationobjectid.Columns, sqlgraph.NewFieldSpec(notificationobjectid.FieldID, field.TypeInt))
	if ps := noiu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := noiu.mutation.DeleteTime(); ok {
		_spec.SetField(notificationobjectid.FieldDeleteTime, field.TypeTime, value)
	}
	if noiu.mutation.DeleteTimeCleared() {
		_spec.ClearField(notificationobjectid.FieldDeleteTime, field.TypeTime)
	}
	if value, ok := noiu.mutation.EntityID(); ok {
		_spec.SetField(notificationobjectid.FieldEntityID, field.TypeInt, value)
	}
	if value, ok := noiu.mutation.AddedEntityID(); ok {
		_spec.AddField(notificationobjectid.FieldEntityID, field.TypeInt, value)
	}
	if noiu.mutation.NotificationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   notificationobjectid.NotificationsTable,
			Columns: []string{notificationobjectid.NotificationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notification.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := noiu.mutation.RemovedNotificationsIDs(); len(nodes) > 0 && !noiu.mutation.NotificationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   notificationobjectid.NotificationsTable,
			Columns: []string{notificationobjectid.NotificationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notification.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := noiu.mutation.NotificationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   notificationobjectid.NotificationsTable,
			Columns: []string{notificationobjectid.NotificationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notification.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if noiu.mutation.NotificationChangesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   notificationobjectid.NotificationChangesTable,
			Columns: []string{notificationobjectid.NotificationChangesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notificationchange.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := noiu.mutation.RemovedNotificationChangesIDs(); len(nodes) > 0 && !noiu.mutation.NotificationChangesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   notificationobjectid.NotificationChangesTable,
			Columns: []string{notificationobjectid.NotificationChangesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notificationchange.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := noiu.mutation.NotificationChangesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   notificationobjectid.NotificationChangesTable,
			Columns: []string{notificationobjectid.NotificationChangesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notificationchange.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if noiu.mutation.EntityTypeIDCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   notificationobjectid.EntityTypeIDTable,
			Columns: []string{notificationobjectid.EntityTypeIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entitytype.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := noiu.mutation.EntityTypeIDIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   notificationobjectid.EntityTypeIDTable,
			Columns: []string{notificationobjectid.EntityTypeIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entitytype.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, noiu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{notificationobjectid.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	noiu.mutation.done = true
	return n, nil
}

// NotificationObjectIDUpdateOne is the builder for updating a single NotificationObjectID entity.
type NotificationObjectIDUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *NotificationObjectIDMutation
}

// SetDeleteTime sets the "delete_time" field.
func (noiuo *NotificationObjectIDUpdateOne) SetDeleteTime(t time.Time) *NotificationObjectIDUpdateOne {
	noiuo.mutation.SetDeleteTime(t)
	return noiuo
}

// SetNillableDeleteTime sets the "delete_time" field if the given value is not nil.
func (noiuo *NotificationObjectIDUpdateOne) SetNillableDeleteTime(t *time.Time) *NotificationObjectIDUpdateOne {
	if t != nil {
		noiuo.SetDeleteTime(*t)
	}
	return noiuo
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (noiuo *NotificationObjectIDUpdateOne) ClearDeleteTime() *NotificationObjectIDUpdateOne {
	noiuo.mutation.ClearDeleteTime()
	return noiuo
}

// SetEntityID sets the "entity_id" field.
func (noiuo *NotificationObjectIDUpdateOne) SetEntityID(i int) *NotificationObjectIDUpdateOne {
	noiuo.mutation.ResetEntityID()
	noiuo.mutation.SetEntityID(i)
	return noiuo
}

// SetNillableEntityID sets the "entity_id" field if the given value is not nil.
func (noiuo *NotificationObjectIDUpdateOne) SetNillableEntityID(i *int) *NotificationObjectIDUpdateOne {
	if i != nil {
		noiuo.SetEntityID(*i)
	}
	return noiuo
}

// AddEntityID adds i to the "entity_id" field.
func (noiuo *NotificationObjectIDUpdateOne) AddEntityID(i int) *NotificationObjectIDUpdateOne {
	noiuo.mutation.AddEntityID(i)
	return noiuo
}

// AddNotificationIDs adds the "notifications" edge to the Notification entity by IDs.
func (noiuo *NotificationObjectIDUpdateOne) AddNotificationIDs(ids ...int) *NotificationObjectIDUpdateOne {
	noiuo.mutation.AddNotificationIDs(ids...)
	return noiuo
}

// AddNotifications adds the "notifications" edges to the Notification entity.
func (noiuo *NotificationObjectIDUpdateOne) AddNotifications(n ...*Notification) *NotificationObjectIDUpdateOne {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return noiuo.AddNotificationIDs(ids...)
}

// AddNotificationChangeIDs adds the "notificationChanges" edge to the NotificationChange entity by IDs.
func (noiuo *NotificationObjectIDUpdateOne) AddNotificationChangeIDs(ids ...int) *NotificationObjectIDUpdateOne {
	noiuo.mutation.AddNotificationChangeIDs(ids...)
	return noiuo
}

// AddNotificationChanges adds the "notificationChanges" edges to the NotificationChange entity.
func (noiuo *NotificationObjectIDUpdateOne) AddNotificationChanges(n ...*NotificationChange) *NotificationObjectIDUpdateOne {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return noiuo.AddNotificationChangeIDs(ids...)
}

// SetEntityTypeIDID sets the "entityTypeID" edge to the EntityType entity by ID.
func (noiuo *NotificationObjectIDUpdateOne) SetEntityTypeIDID(id int) *NotificationObjectIDUpdateOne {
	noiuo.mutation.SetEntityTypeIDID(id)
	return noiuo
}

// SetNillableEntityTypeIDID sets the "entityTypeID" edge to the EntityType entity by ID if the given value is not nil.
func (noiuo *NotificationObjectIDUpdateOne) SetNillableEntityTypeIDID(id *int) *NotificationObjectIDUpdateOne {
	if id != nil {
		noiuo = noiuo.SetEntityTypeIDID(*id)
	}
	return noiuo
}

// SetEntityTypeID sets the "entityTypeID" edge to the EntityType entity.
func (noiuo *NotificationObjectIDUpdateOne) SetEntityTypeID(e *EntityType) *NotificationObjectIDUpdateOne {
	return noiuo.SetEntityTypeIDID(e.ID)
}

// Mutation returns the NotificationObjectIDMutation object of the builder.
func (noiuo *NotificationObjectIDUpdateOne) Mutation() *NotificationObjectIDMutation {
	return noiuo.mutation
}

// ClearNotifications clears all "notifications" edges to the Notification entity.
func (noiuo *NotificationObjectIDUpdateOne) ClearNotifications() *NotificationObjectIDUpdateOne {
	noiuo.mutation.ClearNotifications()
	return noiuo
}

// RemoveNotificationIDs removes the "notifications" edge to Notification entities by IDs.
func (noiuo *NotificationObjectIDUpdateOne) RemoveNotificationIDs(ids ...int) *NotificationObjectIDUpdateOne {
	noiuo.mutation.RemoveNotificationIDs(ids...)
	return noiuo
}

// RemoveNotifications removes "notifications" edges to Notification entities.
func (noiuo *NotificationObjectIDUpdateOne) RemoveNotifications(n ...*Notification) *NotificationObjectIDUpdateOne {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return noiuo.RemoveNotificationIDs(ids...)
}

// ClearNotificationChanges clears all "notificationChanges" edges to the NotificationChange entity.
func (noiuo *NotificationObjectIDUpdateOne) ClearNotificationChanges() *NotificationObjectIDUpdateOne {
	noiuo.mutation.ClearNotificationChanges()
	return noiuo
}

// RemoveNotificationChangeIDs removes the "notificationChanges" edge to NotificationChange entities by IDs.
func (noiuo *NotificationObjectIDUpdateOne) RemoveNotificationChangeIDs(ids ...int) *NotificationObjectIDUpdateOne {
	noiuo.mutation.RemoveNotificationChangeIDs(ids...)
	return noiuo
}

// RemoveNotificationChanges removes "notificationChanges" edges to NotificationChange entities.
func (noiuo *NotificationObjectIDUpdateOne) RemoveNotificationChanges(n ...*NotificationChange) *NotificationObjectIDUpdateOne {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return noiuo.RemoveNotificationChangeIDs(ids...)
}

// ClearEntityTypeID clears the "entityTypeID" edge to the EntityType entity.
func (noiuo *NotificationObjectIDUpdateOne) ClearEntityTypeID() *NotificationObjectIDUpdateOne {
	noiuo.mutation.ClearEntityTypeID()
	return noiuo
}

// Where appends a list predicates to the NotificationObjectIDUpdate builder.
func (noiuo *NotificationObjectIDUpdateOne) Where(ps ...predicate.NotificationObjectID) *NotificationObjectIDUpdateOne {
	noiuo.mutation.Where(ps...)
	return noiuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (noiuo *NotificationObjectIDUpdateOne) Select(field string, fields ...string) *NotificationObjectIDUpdateOne {
	noiuo.fields = append([]string{field}, fields...)
	return noiuo
}

// Save executes the query and returns the updated NotificationObjectID entity.
func (noiuo *NotificationObjectIDUpdateOne) Save(ctx context.Context) (*NotificationObjectID, error) {
	return withHooks(ctx, noiuo.sqlSave, noiuo.mutation, noiuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (noiuo *NotificationObjectIDUpdateOne) SaveX(ctx context.Context) *NotificationObjectID {
	node, err := noiuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (noiuo *NotificationObjectIDUpdateOne) Exec(ctx context.Context) error {
	_, err := noiuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (noiuo *NotificationObjectIDUpdateOne) ExecX(ctx context.Context) {
	if err := noiuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (noiuo *NotificationObjectIDUpdateOne) check() error {
	if v, ok := noiuo.mutation.EntityID(); ok {
		if err := notificationobjectid.EntityIDValidator(v); err != nil {
			return &ValidationError{Name: "entity_id", err: fmt.Errorf(`ent: validator failed for field "NotificationObjectID.entity_id": %w`, err)}
		}
	}
	return nil
}

func (noiuo *NotificationObjectIDUpdateOne) sqlSave(ctx context.Context) (_node *NotificationObjectID, err error) {
	if err := noiuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(notificationobjectid.Table, notificationobjectid.Columns, sqlgraph.NewFieldSpec(notificationobjectid.FieldID, field.TypeInt))
	id, ok := noiuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "NotificationObjectID.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := noiuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, notificationobjectid.FieldID)
		for _, f := range fields {
			if !notificationobjectid.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != notificationobjectid.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := noiuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := noiuo.mutation.DeleteTime(); ok {
		_spec.SetField(notificationobjectid.FieldDeleteTime, field.TypeTime, value)
	}
	if noiuo.mutation.DeleteTimeCleared() {
		_spec.ClearField(notificationobjectid.FieldDeleteTime, field.TypeTime)
	}
	if value, ok := noiuo.mutation.EntityID(); ok {
		_spec.SetField(notificationobjectid.FieldEntityID, field.TypeInt, value)
	}
	if value, ok := noiuo.mutation.AddedEntityID(); ok {
		_spec.AddField(notificationobjectid.FieldEntityID, field.TypeInt, value)
	}
	if noiuo.mutation.NotificationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   notificationobjectid.NotificationsTable,
			Columns: []string{notificationobjectid.NotificationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notification.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := noiuo.mutation.RemovedNotificationsIDs(); len(nodes) > 0 && !noiuo.mutation.NotificationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   notificationobjectid.NotificationsTable,
			Columns: []string{notificationobjectid.NotificationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notification.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := noiuo.mutation.NotificationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   notificationobjectid.NotificationsTable,
			Columns: []string{notificationobjectid.NotificationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notification.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if noiuo.mutation.NotificationChangesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   notificationobjectid.NotificationChangesTable,
			Columns: []string{notificationobjectid.NotificationChangesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notificationchange.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := noiuo.mutation.RemovedNotificationChangesIDs(); len(nodes) > 0 && !noiuo.mutation.NotificationChangesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   notificationobjectid.NotificationChangesTable,
			Columns: []string{notificationobjectid.NotificationChangesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notificationchange.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := noiuo.mutation.NotificationChangesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   notificationobjectid.NotificationChangesTable,
			Columns: []string{notificationobjectid.NotificationChangesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notificationchange.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if noiuo.mutation.EntityTypeIDCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   notificationobjectid.EntityTypeIDTable,
			Columns: []string{notificationobjectid.EntityTypeIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entitytype.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := noiuo.mutation.EntityTypeIDIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   notificationobjectid.EntityTypeIDTable,
			Columns: []string{notificationobjectid.EntityTypeIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entitytype.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &NotificationObjectID{config: noiuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, noiuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{notificationobjectid.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	noiuo.mutation.done = true
	return _node, nil
}
