// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"notification-service/ent/entitytype"
	"notification-service/ent/notificationobject"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// NotificationObject is the model entity for the NotificationObject schema.
type NotificationObject struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// EntityID holds the value of the "entity_id" field.
	EntityID int `json:"entity_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the NotificationObjectQuery when eager-loading is set.
	Edges                            NotificationObjectEdges `json:"edges"`
	entity_type_notification_objects *int
	selectValues                     sql.SelectValues
}

// NotificationObjectEdges holds the relations/edges for other nodes in the graph.
type NotificationObjectEdges struct {
	// Notifications holds the value of the notifications edge.
	Notifications []*Notification `json:"notifications,omitempty"`
	// NotificationChanges holds the value of the notificationChanges edge.
	NotificationChanges []*NotificationChange `json:"notificationChanges,omitempty"`
	// EntityType holds the value of the entityType edge.
	EntityType *EntityType `json:"entityType,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// NotificationsOrErr returns the Notifications value or an error if the edge
// was not loaded in eager-loading.
func (e NotificationObjectEdges) NotificationsOrErr() ([]*Notification, error) {
	if e.loadedTypes[0] {
		return e.Notifications, nil
	}
	return nil, &NotLoadedError{edge: "notifications"}
}

// NotificationChangesOrErr returns the NotificationChanges value or an error if the edge
// was not loaded in eager-loading.
func (e NotificationObjectEdges) NotificationChangesOrErr() ([]*NotificationChange, error) {
	if e.loadedTypes[1] {
		return e.NotificationChanges, nil
	}
	return nil, &NotLoadedError{edge: "notificationChanges"}
}

// EntityTypeOrErr returns the EntityType value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e NotificationObjectEdges) EntityTypeOrErr() (*EntityType, error) {
	if e.EntityType != nil {
		return e.EntityType, nil
	} else if e.loadedTypes[2] {
		return nil, &NotFoundError{label: entitytype.Label}
	}
	return nil, &NotLoadedError{edge: "entityType"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*NotificationObject) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case notificationobject.FieldID, notificationobject.FieldEntityID:
			values[i] = new(sql.NullInt64)
		case notificationobject.FieldCreatedAt, notificationobject.FieldUpdatedAt, notificationobject.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		case notificationobject.ForeignKeys[0]: // entity_type_notification_objects
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the NotificationObject fields.
func (no *NotificationObject) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case notificationobject.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			no.ID = int(value.Int64)
		case notificationobject.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				no.CreatedAt = value.Time
			}
		case notificationobject.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				no.UpdatedAt = value.Time
			}
		case notificationobject.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				no.DeletedAt = value.Time
			}
		case notificationobject.FieldEntityID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field entity_id", values[i])
			} else if value.Valid {
				no.EntityID = int(value.Int64)
			}
		case notificationobject.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field entity_type_notification_objects", value)
			} else if value.Valid {
				no.entity_type_notification_objects = new(int)
				*no.entity_type_notification_objects = int(value.Int64)
			}
		default:
			no.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the NotificationObject.
// This includes values selected through modifiers, order, etc.
func (no *NotificationObject) Value(name string) (ent.Value, error) {
	return no.selectValues.Get(name)
}

// QueryNotifications queries the "notifications" edge of the NotificationObject entity.
func (no *NotificationObject) QueryNotifications() *NotificationQuery {
	return NewNotificationObjectClient(no.config).QueryNotifications(no)
}

// QueryNotificationChanges queries the "notificationChanges" edge of the NotificationObject entity.
func (no *NotificationObject) QueryNotificationChanges() *NotificationChangeQuery {
	return NewNotificationObjectClient(no.config).QueryNotificationChanges(no)
}

// QueryEntityType queries the "entityType" edge of the NotificationObject entity.
func (no *NotificationObject) QueryEntityType() *EntityTypeQuery {
	return NewNotificationObjectClient(no.config).QueryEntityType(no)
}

// Update returns a builder for updating this NotificationObject.
// Note that you need to call NotificationObject.Unwrap() before calling this method if this NotificationObject
// was returned from a transaction, and the transaction was committed or rolled back.
func (no *NotificationObject) Update() *NotificationObjectUpdateOne {
	return NewNotificationObjectClient(no.config).UpdateOne(no)
}

// Unwrap unwraps the NotificationObject entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (no *NotificationObject) Unwrap() *NotificationObject {
	_tx, ok := no.config.driver.(*txDriver)
	if !ok {
		panic("ent: NotificationObject is not a transactional entity")
	}
	no.config.driver = _tx.drv
	return no
}

// String implements the fmt.Stringer.
func (no *NotificationObject) String() string {
	var builder strings.Builder
	builder.WriteString("NotificationObject(")
	builder.WriteString(fmt.Sprintf("id=%v, ", no.ID))
	builder.WriteString("created_at=")
	builder.WriteString(no.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(no.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(no.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("entity_id=")
	builder.WriteString(fmt.Sprintf("%v", no.EntityID))
	builder.WriteByte(')')
	return builder.String()
}

// NotificationObjects is a parsable slice of NotificationObject.
type NotificationObjects []*NotificationObject
