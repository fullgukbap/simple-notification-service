// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"
	"notification-service/ent/entitytype"
	"notification-service/ent/notification"
	"notification-service/ent/notificationchange"
	"notification-service/ent/notificationobjectid"
	"notification-service/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// NotificationObjectIDQuery is the builder for querying NotificationObjectID entities.
type NotificationObjectIDQuery struct {
	config
	ctx                     *QueryContext
	order                   []notificationobjectid.OrderOption
	inters                  []Interceptor
	predicates              []predicate.NotificationObjectID
	withNotifications       *NotificationQuery
	withNotificationChanges *NotificationChangeQuery
	withEntityTypeID        *EntityTypeQuery
	withFKs                 bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the NotificationObjectIDQuery builder.
func (noiq *NotificationObjectIDQuery) Where(ps ...predicate.NotificationObjectID) *NotificationObjectIDQuery {
	noiq.predicates = append(noiq.predicates, ps...)
	return noiq
}

// Limit the number of records to be returned by this query.
func (noiq *NotificationObjectIDQuery) Limit(limit int) *NotificationObjectIDQuery {
	noiq.ctx.Limit = &limit
	return noiq
}

// Offset to start from.
func (noiq *NotificationObjectIDQuery) Offset(offset int) *NotificationObjectIDQuery {
	noiq.ctx.Offset = &offset
	return noiq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (noiq *NotificationObjectIDQuery) Unique(unique bool) *NotificationObjectIDQuery {
	noiq.ctx.Unique = &unique
	return noiq
}

// Order specifies how the records should be ordered.
func (noiq *NotificationObjectIDQuery) Order(o ...notificationobjectid.OrderOption) *NotificationObjectIDQuery {
	noiq.order = append(noiq.order, o...)
	return noiq
}

// QueryNotifications chains the current query on the "notifications" edge.
func (noiq *NotificationObjectIDQuery) QueryNotifications() *NotificationQuery {
	query := (&NotificationClient{config: noiq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := noiq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := noiq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(notificationobjectid.Table, notificationobjectid.FieldID, selector),
			sqlgraph.To(notification.Table, notification.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, notificationobjectid.NotificationsTable, notificationobjectid.NotificationsColumn),
		)
		fromU = sqlgraph.SetNeighbors(noiq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryNotificationChanges chains the current query on the "notificationChanges" edge.
func (noiq *NotificationObjectIDQuery) QueryNotificationChanges() *NotificationChangeQuery {
	query := (&NotificationChangeClient{config: noiq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := noiq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := noiq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(notificationobjectid.Table, notificationobjectid.FieldID, selector),
			sqlgraph.To(notificationchange.Table, notificationchange.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, notificationobjectid.NotificationChangesTable, notificationobjectid.NotificationChangesColumn),
		)
		fromU = sqlgraph.SetNeighbors(noiq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryEntityTypeID chains the current query on the "entityTypeID" edge.
func (noiq *NotificationObjectIDQuery) QueryEntityTypeID() *EntityTypeQuery {
	query := (&EntityTypeClient{config: noiq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := noiq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := noiq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(notificationobjectid.Table, notificationobjectid.FieldID, selector),
			sqlgraph.To(entitytype.Table, entitytype.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, notificationobjectid.EntityTypeIDTable, notificationobjectid.EntityTypeIDColumn),
		)
		fromU = sqlgraph.SetNeighbors(noiq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first NotificationObjectID entity from the query.
// Returns a *NotFoundError when no NotificationObjectID was found.
func (noiq *NotificationObjectIDQuery) First(ctx context.Context) (*NotificationObjectID, error) {
	nodes, err := noiq.Limit(1).All(setContextOp(ctx, noiq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{notificationobjectid.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (noiq *NotificationObjectIDQuery) FirstX(ctx context.Context) *NotificationObjectID {
	node, err := noiq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first NotificationObjectID ID from the query.
// Returns a *NotFoundError when no NotificationObjectID ID was found.
func (noiq *NotificationObjectIDQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = noiq.Limit(1).IDs(setContextOp(ctx, noiq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{notificationobjectid.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (noiq *NotificationObjectIDQuery) FirstIDX(ctx context.Context) int {
	id, err := noiq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single NotificationObjectID entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one NotificationObjectID entity is found.
// Returns a *NotFoundError when no NotificationObjectID entities are found.
func (noiq *NotificationObjectIDQuery) Only(ctx context.Context) (*NotificationObjectID, error) {
	nodes, err := noiq.Limit(2).All(setContextOp(ctx, noiq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{notificationobjectid.Label}
	default:
		return nil, &NotSingularError{notificationobjectid.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (noiq *NotificationObjectIDQuery) OnlyX(ctx context.Context) *NotificationObjectID {
	node, err := noiq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only NotificationObjectID ID in the query.
// Returns a *NotSingularError when more than one NotificationObjectID ID is found.
// Returns a *NotFoundError when no entities are found.
func (noiq *NotificationObjectIDQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = noiq.Limit(2).IDs(setContextOp(ctx, noiq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{notificationobjectid.Label}
	default:
		err = &NotSingularError{notificationobjectid.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (noiq *NotificationObjectIDQuery) OnlyIDX(ctx context.Context) int {
	id, err := noiq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of NotificationObjectIDs.
func (noiq *NotificationObjectIDQuery) All(ctx context.Context) ([]*NotificationObjectID, error) {
	ctx = setContextOp(ctx, noiq.ctx, "All")
	if err := noiq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*NotificationObjectID, *NotificationObjectIDQuery]()
	return withInterceptors[[]*NotificationObjectID](ctx, noiq, qr, noiq.inters)
}

// AllX is like All, but panics if an error occurs.
func (noiq *NotificationObjectIDQuery) AllX(ctx context.Context) []*NotificationObjectID {
	nodes, err := noiq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of NotificationObjectID IDs.
func (noiq *NotificationObjectIDQuery) IDs(ctx context.Context) (ids []int, err error) {
	if noiq.ctx.Unique == nil && noiq.path != nil {
		noiq.Unique(true)
	}
	ctx = setContextOp(ctx, noiq.ctx, "IDs")
	if err = noiq.Select(notificationobjectid.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (noiq *NotificationObjectIDQuery) IDsX(ctx context.Context) []int {
	ids, err := noiq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (noiq *NotificationObjectIDQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, noiq.ctx, "Count")
	if err := noiq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, noiq, querierCount[*NotificationObjectIDQuery](), noiq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (noiq *NotificationObjectIDQuery) CountX(ctx context.Context) int {
	count, err := noiq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (noiq *NotificationObjectIDQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, noiq.ctx, "Exist")
	switch _, err := noiq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (noiq *NotificationObjectIDQuery) ExistX(ctx context.Context) bool {
	exist, err := noiq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the NotificationObjectIDQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (noiq *NotificationObjectIDQuery) Clone() *NotificationObjectIDQuery {
	if noiq == nil {
		return nil
	}
	return &NotificationObjectIDQuery{
		config:                  noiq.config,
		ctx:                     noiq.ctx.Clone(),
		order:                   append([]notificationobjectid.OrderOption{}, noiq.order...),
		inters:                  append([]Interceptor{}, noiq.inters...),
		predicates:              append([]predicate.NotificationObjectID{}, noiq.predicates...),
		withNotifications:       noiq.withNotifications.Clone(),
		withNotificationChanges: noiq.withNotificationChanges.Clone(),
		withEntityTypeID:        noiq.withEntityTypeID.Clone(),
		// clone intermediate query.
		sql:  noiq.sql.Clone(),
		path: noiq.path,
	}
}

// WithNotifications tells the query-builder to eager-load the nodes that are connected to
// the "notifications" edge. The optional arguments are used to configure the query builder of the edge.
func (noiq *NotificationObjectIDQuery) WithNotifications(opts ...func(*NotificationQuery)) *NotificationObjectIDQuery {
	query := (&NotificationClient{config: noiq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	noiq.withNotifications = query
	return noiq
}

// WithNotificationChanges tells the query-builder to eager-load the nodes that are connected to
// the "notificationChanges" edge. The optional arguments are used to configure the query builder of the edge.
func (noiq *NotificationObjectIDQuery) WithNotificationChanges(opts ...func(*NotificationChangeQuery)) *NotificationObjectIDQuery {
	query := (&NotificationChangeClient{config: noiq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	noiq.withNotificationChanges = query
	return noiq
}

// WithEntityTypeID tells the query-builder to eager-load the nodes that are connected to
// the "entityTypeID" edge. The optional arguments are used to configure the query builder of the edge.
func (noiq *NotificationObjectIDQuery) WithEntityTypeID(opts ...func(*EntityTypeQuery)) *NotificationObjectIDQuery {
	query := (&EntityTypeClient{config: noiq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	noiq.withEntityTypeID = query
	return noiq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		DeleteTime time.Time `json:"delete_time,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.NotificationObjectID.Query().
//		GroupBy(notificationobjectid.FieldDeleteTime).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (noiq *NotificationObjectIDQuery) GroupBy(field string, fields ...string) *NotificationObjectIDGroupBy {
	noiq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &NotificationObjectIDGroupBy{build: noiq}
	grbuild.flds = &noiq.ctx.Fields
	grbuild.label = notificationobjectid.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		DeleteTime time.Time `json:"delete_time,omitempty"`
//	}
//
//	client.NotificationObjectID.Query().
//		Select(notificationobjectid.FieldDeleteTime).
//		Scan(ctx, &v)
func (noiq *NotificationObjectIDQuery) Select(fields ...string) *NotificationObjectIDSelect {
	noiq.ctx.Fields = append(noiq.ctx.Fields, fields...)
	sbuild := &NotificationObjectIDSelect{NotificationObjectIDQuery: noiq}
	sbuild.label = notificationobjectid.Label
	sbuild.flds, sbuild.scan = &noiq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a NotificationObjectIDSelect configured with the given aggregations.
func (noiq *NotificationObjectIDQuery) Aggregate(fns ...AggregateFunc) *NotificationObjectIDSelect {
	return noiq.Select().Aggregate(fns...)
}

func (noiq *NotificationObjectIDQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range noiq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, noiq); err != nil {
				return err
			}
		}
	}
	for _, f := range noiq.ctx.Fields {
		if !notificationobjectid.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if noiq.path != nil {
		prev, err := noiq.path(ctx)
		if err != nil {
			return err
		}
		noiq.sql = prev
	}
	return nil
}

func (noiq *NotificationObjectIDQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*NotificationObjectID, error) {
	var (
		nodes       = []*NotificationObjectID{}
		withFKs     = noiq.withFKs
		_spec       = noiq.querySpec()
		loadedTypes = [3]bool{
			noiq.withNotifications != nil,
			noiq.withNotificationChanges != nil,
			noiq.withEntityTypeID != nil,
		}
	)
	if noiq.withEntityTypeID != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, notificationobjectid.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*NotificationObjectID).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &NotificationObjectID{config: noiq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, noiq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := noiq.withNotifications; query != nil {
		if err := noiq.loadNotifications(ctx, query, nodes,
			func(n *NotificationObjectID) { n.Edges.Notifications = []*Notification{} },
			func(n *NotificationObjectID, e *Notification) {
				n.Edges.Notifications = append(n.Edges.Notifications, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := noiq.withNotificationChanges; query != nil {
		if err := noiq.loadNotificationChanges(ctx, query, nodes,
			func(n *NotificationObjectID) { n.Edges.NotificationChanges = []*NotificationChange{} },
			func(n *NotificationObjectID, e *NotificationChange) {
				n.Edges.NotificationChanges = append(n.Edges.NotificationChanges, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := noiq.withEntityTypeID; query != nil {
		if err := noiq.loadEntityTypeID(ctx, query, nodes, nil,
			func(n *NotificationObjectID, e *EntityType) { n.Edges.EntityTypeID = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (noiq *NotificationObjectIDQuery) loadNotifications(ctx context.Context, query *NotificationQuery, nodes []*NotificationObjectID, init func(*NotificationObjectID), assign func(*NotificationObjectID, *Notification)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*NotificationObjectID)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Notification(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(notificationobjectid.NotificationsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.notification_object_id_notifications
		if fk == nil {
			return fmt.Errorf(`foreign-key "notification_object_id_notifications" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "notification_object_id_notifications" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (noiq *NotificationObjectIDQuery) loadNotificationChanges(ctx context.Context, query *NotificationChangeQuery, nodes []*NotificationObjectID, init func(*NotificationObjectID), assign func(*NotificationObjectID, *NotificationChange)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*NotificationObjectID)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.NotificationChange(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(notificationobjectid.NotificationChangesColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.notification_object_id_notification_changes
		if fk == nil {
			return fmt.Errorf(`foreign-key "notification_object_id_notification_changes" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "notification_object_id_notification_changes" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (noiq *NotificationObjectIDQuery) loadEntityTypeID(ctx context.Context, query *EntityTypeQuery, nodes []*NotificationObjectID, init func(*NotificationObjectID), assign func(*NotificationObjectID, *EntityType)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*NotificationObjectID)
	for i := range nodes {
		if nodes[i].entity_type_notification_object_ids == nil {
			continue
		}
		fk := *nodes[i].entity_type_notification_object_ids
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(entitytype.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "entity_type_notification_object_ids" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (noiq *NotificationObjectIDQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := noiq.querySpec()
	_spec.Node.Columns = noiq.ctx.Fields
	if len(noiq.ctx.Fields) > 0 {
		_spec.Unique = noiq.ctx.Unique != nil && *noiq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, noiq.driver, _spec)
}

func (noiq *NotificationObjectIDQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(notificationobjectid.Table, notificationobjectid.Columns, sqlgraph.NewFieldSpec(notificationobjectid.FieldID, field.TypeInt))
	_spec.From = noiq.sql
	if unique := noiq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if noiq.path != nil {
		_spec.Unique = true
	}
	if fields := noiq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, notificationobjectid.FieldID)
		for i := range fields {
			if fields[i] != notificationobjectid.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := noiq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := noiq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := noiq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := noiq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (noiq *NotificationObjectIDQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(noiq.driver.Dialect())
	t1 := builder.Table(notificationobjectid.Table)
	columns := noiq.ctx.Fields
	if len(columns) == 0 {
		columns = notificationobjectid.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if noiq.sql != nil {
		selector = noiq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if noiq.ctx.Unique != nil && *noiq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range noiq.predicates {
		p(selector)
	}
	for _, p := range noiq.order {
		p(selector)
	}
	if offset := noiq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := noiq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// NotificationObjectIDGroupBy is the group-by builder for NotificationObjectID entities.
type NotificationObjectIDGroupBy struct {
	selector
	build *NotificationObjectIDQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (noigb *NotificationObjectIDGroupBy) Aggregate(fns ...AggregateFunc) *NotificationObjectIDGroupBy {
	noigb.fns = append(noigb.fns, fns...)
	return noigb
}

// Scan applies the selector query and scans the result into the given value.
func (noigb *NotificationObjectIDGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, noigb.build.ctx, "GroupBy")
	if err := noigb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*NotificationObjectIDQuery, *NotificationObjectIDGroupBy](ctx, noigb.build, noigb, noigb.build.inters, v)
}

func (noigb *NotificationObjectIDGroupBy) sqlScan(ctx context.Context, root *NotificationObjectIDQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(noigb.fns))
	for _, fn := range noigb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*noigb.flds)+len(noigb.fns))
		for _, f := range *noigb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*noigb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := noigb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// NotificationObjectIDSelect is the builder for selecting fields of NotificationObjectID entities.
type NotificationObjectIDSelect struct {
	*NotificationObjectIDQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (nois *NotificationObjectIDSelect) Aggregate(fns ...AggregateFunc) *NotificationObjectIDSelect {
	nois.fns = append(nois.fns, fns...)
	return nois
}

// Scan applies the selector query and scans the result into the given value.
func (nois *NotificationObjectIDSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, nois.ctx, "Select")
	if err := nois.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*NotificationObjectIDQuery, *NotificationObjectIDSelect](ctx, nois.NotificationObjectIDQuery, nois, nois.inters, v)
}

func (nois *NotificationObjectIDSelect) sqlScan(ctx context.Context, root *NotificationObjectIDQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(nois.fns))
	for _, fn := range nois.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*nois.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := nois.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
