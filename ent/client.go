// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"
	"reflect"

	"notification-service/ent/migrate"

	"notification-service/ent/entitytype"
	"notification-service/ent/friendship"
	"notification-service/ent/friendshipstatus"
	"notification-service/ent/notification"
	"notification-service/ent/notificationchange"
	"notification-service/ent/notificationobject"
	"notification-service/ent/user"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// EntityType is the client for interacting with the EntityType builders.
	EntityType *EntityTypeClient
	// Friendship is the client for interacting with the Friendship builders.
	Friendship *FriendshipClient
	// FriendshipStatus is the client for interacting with the FriendshipStatus builders.
	FriendshipStatus *FriendshipStatusClient
	// Notification is the client for interacting with the Notification builders.
	Notification *NotificationClient
	// NotificationChange is the client for interacting with the NotificationChange builders.
	NotificationChange *NotificationChangeClient
	// NotificationObject is the client for interacting with the NotificationObject builders.
	NotificationObject *NotificationObjectClient
	// User is the client for interacting with the User builders.
	User *UserClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	client := &Client{config: newConfig(opts...)}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.EntityType = NewEntityTypeClient(c.config)
	c.Friendship = NewFriendshipClient(c.config)
	c.FriendshipStatus = NewFriendshipStatusClient(c.config)
	c.Notification = NewNotificationClient(c.config)
	c.NotificationChange = NewNotificationChangeClient(c.config)
	c.NotificationObject = NewNotificationObjectClient(c.config)
	c.User = NewUserClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// newConfig creates a new config for the client.
func newConfig(opts ...Option) config {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	return cfg
}

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// ErrTxStarted is returned when trying to start a new transaction from a transactional client.
var ErrTxStarted = errors.New("ent: cannot start a transaction within a transaction")

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, ErrTxStarted
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:                ctx,
		config:             cfg,
		EntityType:         NewEntityTypeClient(cfg),
		Friendship:         NewFriendshipClient(cfg),
		FriendshipStatus:   NewFriendshipStatusClient(cfg),
		Notification:       NewNotificationClient(cfg),
		NotificationChange: NewNotificationChangeClient(cfg),
		NotificationObject: NewNotificationObjectClient(cfg),
		User:               NewUserClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:                ctx,
		config:             cfg,
		EntityType:         NewEntityTypeClient(cfg),
		Friendship:         NewFriendshipClient(cfg),
		FriendshipStatus:   NewFriendshipStatusClient(cfg),
		Notification:       NewNotificationClient(cfg),
		NotificationChange: NewNotificationChangeClient(cfg),
		NotificationObject: NewNotificationObjectClient(cfg),
		User:               NewUserClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		EntityType.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	for _, n := range []interface{ Use(...Hook) }{
		c.EntityType, c.Friendship, c.FriendshipStatus, c.Notification,
		c.NotificationChange, c.NotificationObject, c.User,
	} {
		n.Use(hooks...)
	}
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	for _, n := range []interface{ Intercept(...Interceptor) }{
		c.EntityType, c.Friendship, c.FriendshipStatus, c.Notification,
		c.NotificationChange, c.NotificationObject, c.User,
	} {
		n.Intercept(interceptors...)
	}
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *EntityTypeMutation:
		return c.EntityType.mutate(ctx, m)
	case *FriendshipMutation:
		return c.Friendship.mutate(ctx, m)
	case *FriendshipStatusMutation:
		return c.FriendshipStatus.mutate(ctx, m)
	case *NotificationMutation:
		return c.Notification.mutate(ctx, m)
	case *NotificationChangeMutation:
		return c.NotificationChange.mutate(ctx, m)
	case *NotificationObjectMutation:
		return c.NotificationObject.mutate(ctx, m)
	case *UserMutation:
		return c.User.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// EntityTypeClient is a client for the EntityType schema.
type EntityTypeClient struct {
	config
}

// NewEntityTypeClient returns a client for the EntityType from the given config.
func NewEntityTypeClient(c config) *EntityTypeClient {
	return &EntityTypeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `entitytype.Hooks(f(g(h())))`.
func (c *EntityTypeClient) Use(hooks ...Hook) {
	c.hooks.EntityType = append(c.hooks.EntityType, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `entitytype.Intercept(f(g(h())))`.
func (c *EntityTypeClient) Intercept(interceptors ...Interceptor) {
	c.inters.EntityType = append(c.inters.EntityType, interceptors...)
}

// Create returns a builder for creating a EntityType entity.
func (c *EntityTypeClient) Create() *EntityTypeCreate {
	mutation := newEntityTypeMutation(c.config, OpCreate)
	return &EntityTypeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of EntityType entities.
func (c *EntityTypeClient) CreateBulk(builders ...*EntityTypeCreate) *EntityTypeCreateBulk {
	return &EntityTypeCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *EntityTypeClient) MapCreateBulk(slice any, setFunc func(*EntityTypeCreate, int)) *EntityTypeCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &EntityTypeCreateBulk{err: fmt.Errorf("calling to EntityTypeClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*EntityTypeCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &EntityTypeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for EntityType.
func (c *EntityTypeClient) Update() *EntityTypeUpdate {
	mutation := newEntityTypeMutation(c.config, OpUpdate)
	return &EntityTypeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *EntityTypeClient) UpdateOne(et *EntityType) *EntityTypeUpdateOne {
	mutation := newEntityTypeMutation(c.config, OpUpdateOne, withEntityType(et))
	return &EntityTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *EntityTypeClient) UpdateOneID(id int) *EntityTypeUpdateOne {
	mutation := newEntityTypeMutation(c.config, OpUpdateOne, withEntityTypeID(id))
	return &EntityTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for EntityType.
func (c *EntityTypeClient) Delete() *EntityTypeDelete {
	mutation := newEntityTypeMutation(c.config, OpDelete)
	return &EntityTypeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *EntityTypeClient) DeleteOne(et *EntityType) *EntityTypeDeleteOne {
	return c.DeleteOneID(et.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *EntityTypeClient) DeleteOneID(id int) *EntityTypeDeleteOne {
	builder := c.Delete().Where(entitytype.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &EntityTypeDeleteOne{builder}
}

// Query returns a query builder for EntityType.
func (c *EntityTypeClient) Query() *EntityTypeQuery {
	return &EntityTypeQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeEntityType},
		inters: c.Interceptors(),
	}
}

// Get returns a EntityType entity by its id.
func (c *EntityTypeClient) Get(ctx context.Context, id int) (*EntityType, error) {
	return c.Query().Where(entitytype.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *EntityTypeClient) GetX(ctx context.Context, id int) *EntityType {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryNotificationObjects queries the notificationObjects edge of a EntityType.
func (c *EntityTypeClient) QueryNotificationObjects(et *EntityType) *NotificationObjectQuery {
	query := (&NotificationObjectClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := et.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(entitytype.Table, entitytype.FieldID, id),
			sqlgraph.To(notificationobject.Table, notificationobject.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, entitytype.NotificationObjectsTable, entitytype.NotificationObjectsColumn),
		)
		fromV = sqlgraph.Neighbors(et.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *EntityTypeClient) Hooks() []Hook {
	hooks := c.hooks.EntityType
	return append(hooks[:len(hooks):len(hooks)], entitytype.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *EntityTypeClient) Interceptors() []Interceptor {
	inters := c.inters.EntityType
	return append(inters[:len(inters):len(inters)], entitytype.Interceptors[:]...)
}

func (c *EntityTypeClient) mutate(ctx context.Context, m *EntityTypeMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&EntityTypeCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&EntityTypeUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&EntityTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&EntityTypeDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown EntityType mutation op: %q", m.Op())
	}
}

// FriendshipClient is a client for the Friendship schema.
type FriendshipClient struct {
	config
}

// NewFriendshipClient returns a client for the Friendship from the given config.
func NewFriendshipClient(c config) *FriendshipClient {
	return &FriendshipClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `friendship.Hooks(f(g(h())))`.
func (c *FriendshipClient) Use(hooks ...Hook) {
	c.hooks.Friendship = append(c.hooks.Friendship, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `friendship.Intercept(f(g(h())))`.
func (c *FriendshipClient) Intercept(interceptors ...Interceptor) {
	c.inters.Friendship = append(c.inters.Friendship, interceptors...)
}

// Create returns a builder for creating a Friendship entity.
func (c *FriendshipClient) Create() *FriendshipCreate {
	mutation := newFriendshipMutation(c.config, OpCreate)
	return &FriendshipCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Friendship entities.
func (c *FriendshipClient) CreateBulk(builders ...*FriendshipCreate) *FriendshipCreateBulk {
	return &FriendshipCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *FriendshipClient) MapCreateBulk(slice any, setFunc func(*FriendshipCreate, int)) *FriendshipCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &FriendshipCreateBulk{err: fmt.Errorf("calling to FriendshipClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*FriendshipCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &FriendshipCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Friendship.
func (c *FriendshipClient) Update() *FriendshipUpdate {
	mutation := newFriendshipMutation(c.config, OpUpdate)
	return &FriendshipUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *FriendshipClient) UpdateOne(f *Friendship) *FriendshipUpdateOne {
	mutation := newFriendshipMutation(c.config, OpUpdateOne, withFriendship(f))
	return &FriendshipUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *FriendshipClient) UpdateOneID(id int) *FriendshipUpdateOne {
	mutation := newFriendshipMutation(c.config, OpUpdateOne, withFriendshipID(id))
	return &FriendshipUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Friendship.
func (c *FriendshipClient) Delete() *FriendshipDelete {
	mutation := newFriendshipMutation(c.config, OpDelete)
	return &FriendshipDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *FriendshipClient) DeleteOne(f *Friendship) *FriendshipDeleteOne {
	return c.DeleteOneID(f.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *FriendshipClient) DeleteOneID(id int) *FriendshipDeleteOne {
	builder := c.Delete().Where(friendship.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &FriendshipDeleteOne{builder}
}

// Query returns a query builder for Friendship.
func (c *FriendshipClient) Query() *FriendshipQuery {
	return &FriendshipQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeFriendship},
		inters: c.Interceptors(),
	}
}

// Get returns a Friendship entity by its id.
func (c *FriendshipClient) Get(ctx context.Context, id int) (*Friendship, error) {
	return c.Query().Where(friendship.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *FriendshipClient) GetX(ctx context.Context, id int) *Friendship {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QuerySender queries the sender edge of a Friendship.
func (c *FriendshipClient) QuerySender(f *Friendship) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := f.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(friendship.Table, friendship.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, friendship.SenderTable, friendship.SenderColumn),
		)
		fromV = sqlgraph.Neighbors(f.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryReceiver queries the receiver edge of a Friendship.
func (c *FriendshipClient) QueryReceiver(f *Friendship) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := f.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(friendship.Table, friendship.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, friendship.ReceiverTable, friendship.ReceiverColumn),
		)
		fromV = sqlgraph.Neighbors(f.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryFriendshipStatus queries the friendshipStatus edge of a Friendship.
func (c *FriendshipClient) QueryFriendshipStatus(f *Friendship) *FriendshipStatusQuery {
	query := (&FriendshipStatusClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := f.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(friendship.Table, friendship.FieldID, id),
			sqlgraph.To(friendshipstatus.Table, friendshipstatus.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, friendship.FriendshipStatusTable, friendship.FriendshipStatusColumn),
		)
		fromV = sqlgraph.Neighbors(f.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *FriendshipClient) Hooks() []Hook {
	hooks := c.hooks.Friendship
	return append(hooks[:len(hooks):len(hooks)], friendship.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *FriendshipClient) Interceptors() []Interceptor {
	inters := c.inters.Friendship
	return append(inters[:len(inters):len(inters)], friendship.Interceptors[:]...)
}

func (c *FriendshipClient) mutate(ctx context.Context, m *FriendshipMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&FriendshipCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&FriendshipUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&FriendshipUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&FriendshipDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Friendship mutation op: %q", m.Op())
	}
}

// FriendshipStatusClient is a client for the FriendshipStatus schema.
type FriendshipStatusClient struct {
	config
}

// NewFriendshipStatusClient returns a client for the FriendshipStatus from the given config.
func NewFriendshipStatusClient(c config) *FriendshipStatusClient {
	return &FriendshipStatusClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `friendshipstatus.Hooks(f(g(h())))`.
func (c *FriendshipStatusClient) Use(hooks ...Hook) {
	c.hooks.FriendshipStatus = append(c.hooks.FriendshipStatus, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `friendshipstatus.Intercept(f(g(h())))`.
func (c *FriendshipStatusClient) Intercept(interceptors ...Interceptor) {
	c.inters.FriendshipStatus = append(c.inters.FriendshipStatus, interceptors...)
}

// Create returns a builder for creating a FriendshipStatus entity.
func (c *FriendshipStatusClient) Create() *FriendshipStatusCreate {
	mutation := newFriendshipStatusMutation(c.config, OpCreate)
	return &FriendshipStatusCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of FriendshipStatus entities.
func (c *FriendshipStatusClient) CreateBulk(builders ...*FriendshipStatusCreate) *FriendshipStatusCreateBulk {
	return &FriendshipStatusCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *FriendshipStatusClient) MapCreateBulk(slice any, setFunc func(*FriendshipStatusCreate, int)) *FriendshipStatusCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &FriendshipStatusCreateBulk{err: fmt.Errorf("calling to FriendshipStatusClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*FriendshipStatusCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &FriendshipStatusCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for FriendshipStatus.
func (c *FriendshipStatusClient) Update() *FriendshipStatusUpdate {
	mutation := newFriendshipStatusMutation(c.config, OpUpdate)
	return &FriendshipStatusUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *FriendshipStatusClient) UpdateOne(fs *FriendshipStatus) *FriendshipStatusUpdateOne {
	mutation := newFriendshipStatusMutation(c.config, OpUpdateOne, withFriendshipStatus(fs))
	return &FriendshipStatusUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *FriendshipStatusClient) UpdateOneID(id int) *FriendshipStatusUpdateOne {
	mutation := newFriendshipStatusMutation(c.config, OpUpdateOne, withFriendshipStatusID(id))
	return &FriendshipStatusUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for FriendshipStatus.
func (c *FriendshipStatusClient) Delete() *FriendshipStatusDelete {
	mutation := newFriendshipStatusMutation(c.config, OpDelete)
	return &FriendshipStatusDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *FriendshipStatusClient) DeleteOne(fs *FriendshipStatus) *FriendshipStatusDeleteOne {
	return c.DeleteOneID(fs.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *FriendshipStatusClient) DeleteOneID(id int) *FriendshipStatusDeleteOne {
	builder := c.Delete().Where(friendshipstatus.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &FriendshipStatusDeleteOne{builder}
}

// Query returns a query builder for FriendshipStatus.
func (c *FriendshipStatusClient) Query() *FriendshipStatusQuery {
	return &FriendshipStatusQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeFriendshipStatus},
		inters: c.Interceptors(),
	}
}

// Get returns a FriendshipStatus entity by its id.
func (c *FriendshipStatusClient) Get(ctx context.Context, id int) (*FriendshipStatus, error) {
	return c.Query().Where(friendshipstatus.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *FriendshipStatusClient) GetX(ctx context.Context, id int) *FriendshipStatus {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryFriendships queries the friendships edge of a FriendshipStatus.
func (c *FriendshipStatusClient) QueryFriendships(fs *FriendshipStatus) *FriendshipQuery {
	query := (&FriendshipClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := fs.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(friendshipstatus.Table, friendshipstatus.FieldID, id),
			sqlgraph.To(friendship.Table, friendship.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, friendshipstatus.FriendshipsTable, friendshipstatus.FriendshipsColumn),
		)
		fromV = sqlgraph.Neighbors(fs.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *FriendshipStatusClient) Hooks() []Hook {
	hooks := c.hooks.FriendshipStatus
	return append(hooks[:len(hooks):len(hooks)], friendshipstatus.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *FriendshipStatusClient) Interceptors() []Interceptor {
	inters := c.inters.FriendshipStatus
	return append(inters[:len(inters):len(inters)], friendshipstatus.Interceptors[:]...)
}

func (c *FriendshipStatusClient) mutate(ctx context.Context, m *FriendshipStatusMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&FriendshipStatusCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&FriendshipStatusUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&FriendshipStatusUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&FriendshipStatusDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown FriendshipStatus mutation op: %q", m.Op())
	}
}

// NotificationClient is a client for the Notification schema.
type NotificationClient struct {
	config
}

// NewNotificationClient returns a client for the Notification from the given config.
func NewNotificationClient(c config) *NotificationClient {
	return &NotificationClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `notification.Hooks(f(g(h())))`.
func (c *NotificationClient) Use(hooks ...Hook) {
	c.hooks.Notification = append(c.hooks.Notification, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `notification.Intercept(f(g(h())))`.
func (c *NotificationClient) Intercept(interceptors ...Interceptor) {
	c.inters.Notification = append(c.inters.Notification, interceptors...)
}

// Create returns a builder for creating a Notification entity.
func (c *NotificationClient) Create() *NotificationCreate {
	mutation := newNotificationMutation(c.config, OpCreate)
	return &NotificationCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Notification entities.
func (c *NotificationClient) CreateBulk(builders ...*NotificationCreate) *NotificationCreateBulk {
	return &NotificationCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *NotificationClient) MapCreateBulk(slice any, setFunc func(*NotificationCreate, int)) *NotificationCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &NotificationCreateBulk{err: fmt.Errorf("calling to NotificationClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*NotificationCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &NotificationCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Notification.
func (c *NotificationClient) Update() *NotificationUpdate {
	mutation := newNotificationMutation(c.config, OpUpdate)
	return &NotificationUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *NotificationClient) UpdateOne(n *Notification) *NotificationUpdateOne {
	mutation := newNotificationMutation(c.config, OpUpdateOne, withNotification(n))
	return &NotificationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *NotificationClient) UpdateOneID(id int) *NotificationUpdateOne {
	mutation := newNotificationMutation(c.config, OpUpdateOne, withNotificationID(id))
	return &NotificationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Notification.
func (c *NotificationClient) Delete() *NotificationDelete {
	mutation := newNotificationMutation(c.config, OpDelete)
	return &NotificationDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *NotificationClient) DeleteOne(n *Notification) *NotificationDeleteOne {
	return c.DeleteOneID(n.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *NotificationClient) DeleteOneID(id int) *NotificationDeleteOne {
	builder := c.Delete().Where(notification.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &NotificationDeleteOne{builder}
}

// Query returns a query builder for Notification.
func (c *NotificationClient) Query() *NotificationQuery {
	return &NotificationQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeNotification},
		inters: c.Interceptors(),
	}
}

// Get returns a Notification entity by its id.
func (c *NotificationClient) Get(ctx context.Context, id int) (*Notification, error) {
	return c.Query().Where(notification.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *NotificationClient) GetX(ctx context.Context, id int) *Notification {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryNotificationObject queries the notificationObject edge of a Notification.
func (c *NotificationClient) QueryNotificationObject(n *Notification) *NotificationObjectQuery {
	query := (&NotificationObjectClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := n.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(notification.Table, notification.FieldID, id),
			sqlgraph.To(notificationobject.Table, notificationobject.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, notification.NotificationObjectTable, notification.NotificationObjectColumn),
		)
		fromV = sqlgraph.Neighbors(n.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryNotifier queries the notifier edge of a Notification.
func (c *NotificationClient) QueryNotifier(n *Notification) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := n.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(notification.Table, notification.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, notification.NotifierTable, notification.NotifierColumn),
		)
		fromV = sqlgraph.Neighbors(n.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *NotificationClient) Hooks() []Hook {
	hooks := c.hooks.Notification
	return append(hooks[:len(hooks):len(hooks)], notification.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *NotificationClient) Interceptors() []Interceptor {
	inters := c.inters.Notification
	return append(inters[:len(inters):len(inters)], notification.Interceptors[:]...)
}

func (c *NotificationClient) mutate(ctx context.Context, m *NotificationMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&NotificationCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&NotificationUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&NotificationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&NotificationDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Notification mutation op: %q", m.Op())
	}
}

// NotificationChangeClient is a client for the NotificationChange schema.
type NotificationChangeClient struct {
	config
}

// NewNotificationChangeClient returns a client for the NotificationChange from the given config.
func NewNotificationChangeClient(c config) *NotificationChangeClient {
	return &NotificationChangeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `notificationchange.Hooks(f(g(h())))`.
func (c *NotificationChangeClient) Use(hooks ...Hook) {
	c.hooks.NotificationChange = append(c.hooks.NotificationChange, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `notificationchange.Intercept(f(g(h())))`.
func (c *NotificationChangeClient) Intercept(interceptors ...Interceptor) {
	c.inters.NotificationChange = append(c.inters.NotificationChange, interceptors...)
}

// Create returns a builder for creating a NotificationChange entity.
func (c *NotificationChangeClient) Create() *NotificationChangeCreate {
	mutation := newNotificationChangeMutation(c.config, OpCreate)
	return &NotificationChangeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of NotificationChange entities.
func (c *NotificationChangeClient) CreateBulk(builders ...*NotificationChangeCreate) *NotificationChangeCreateBulk {
	return &NotificationChangeCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *NotificationChangeClient) MapCreateBulk(slice any, setFunc func(*NotificationChangeCreate, int)) *NotificationChangeCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &NotificationChangeCreateBulk{err: fmt.Errorf("calling to NotificationChangeClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*NotificationChangeCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &NotificationChangeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for NotificationChange.
func (c *NotificationChangeClient) Update() *NotificationChangeUpdate {
	mutation := newNotificationChangeMutation(c.config, OpUpdate)
	return &NotificationChangeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *NotificationChangeClient) UpdateOne(nc *NotificationChange) *NotificationChangeUpdateOne {
	mutation := newNotificationChangeMutation(c.config, OpUpdateOne, withNotificationChange(nc))
	return &NotificationChangeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *NotificationChangeClient) UpdateOneID(id int) *NotificationChangeUpdateOne {
	mutation := newNotificationChangeMutation(c.config, OpUpdateOne, withNotificationChangeID(id))
	return &NotificationChangeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for NotificationChange.
func (c *NotificationChangeClient) Delete() *NotificationChangeDelete {
	mutation := newNotificationChangeMutation(c.config, OpDelete)
	return &NotificationChangeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *NotificationChangeClient) DeleteOne(nc *NotificationChange) *NotificationChangeDeleteOne {
	return c.DeleteOneID(nc.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *NotificationChangeClient) DeleteOneID(id int) *NotificationChangeDeleteOne {
	builder := c.Delete().Where(notificationchange.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &NotificationChangeDeleteOne{builder}
}

// Query returns a query builder for NotificationChange.
func (c *NotificationChangeClient) Query() *NotificationChangeQuery {
	return &NotificationChangeQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeNotificationChange},
		inters: c.Interceptors(),
	}
}

// Get returns a NotificationChange entity by its id.
func (c *NotificationChangeClient) Get(ctx context.Context, id int) (*NotificationChange, error) {
	return c.Query().Where(notificationchange.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *NotificationChangeClient) GetX(ctx context.Context, id int) *NotificationChange {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryActor queries the actor edge of a NotificationChange.
func (c *NotificationChangeClient) QueryActor(nc *NotificationChange) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := nc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(notificationchange.Table, notificationchange.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, notificationchange.ActorTable, notificationchange.ActorColumn),
		)
		fromV = sqlgraph.Neighbors(nc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryNotificationObject queries the notificationObject edge of a NotificationChange.
func (c *NotificationChangeClient) QueryNotificationObject(nc *NotificationChange) *NotificationObjectQuery {
	query := (&NotificationObjectClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := nc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(notificationchange.Table, notificationchange.FieldID, id),
			sqlgraph.To(notificationobject.Table, notificationobject.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, notificationchange.NotificationObjectTable, notificationchange.NotificationObjectColumn),
		)
		fromV = sqlgraph.Neighbors(nc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *NotificationChangeClient) Hooks() []Hook {
	hooks := c.hooks.NotificationChange
	return append(hooks[:len(hooks):len(hooks)], notificationchange.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *NotificationChangeClient) Interceptors() []Interceptor {
	inters := c.inters.NotificationChange
	return append(inters[:len(inters):len(inters)], notificationchange.Interceptors[:]...)
}

func (c *NotificationChangeClient) mutate(ctx context.Context, m *NotificationChangeMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&NotificationChangeCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&NotificationChangeUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&NotificationChangeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&NotificationChangeDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown NotificationChange mutation op: %q", m.Op())
	}
}

// NotificationObjectClient is a client for the NotificationObject schema.
type NotificationObjectClient struct {
	config
}

// NewNotificationObjectClient returns a client for the NotificationObject from the given config.
func NewNotificationObjectClient(c config) *NotificationObjectClient {
	return &NotificationObjectClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `notificationobject.Hooks(f(g(h())))`.
func (c *NotificationObjectClient) Use(hooks ...Hook) {
	c.hooks.NotificationObject = append(c.hooks.NotificationObject, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `notificationobject.Intercept(f(g(h())))`.
func (c *NotificationObjectClient) Intercept(interceptors ...Interceptor) {
	c.inters.NotificationObject = append(c.inters.NotificationObject, interceptors...)
}

// Create returns a builder for creating a NotificationObject entity.
func (c *NotificationObjectClient) Create() *NotificationObjectCreate {
	mutation := newNotificationObjectMutation(c.config, OpCreate)
	return &NotificationObjectCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of NotificationObject entities.
func (c *NotificationObjectClient) CreateBulk(builders ...*NotificationObjectCreate) *NotificationObjectCreateBulk {
	return &NotificationObjectCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *NotificationObjectClient) MapCreateBulk(slice any, setFunc func(*NotificationObjectCreate, int)) *NotificationObjectCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &NotificationObjectCreateBulk{err: fmt.Errorf("calling to NotificationObjectClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*NotificationObjectCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &NotificationObjectCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for NotificationObject.
func (c *NotificationObjectClient) Update() *NotificationObjectUpdate {
	mutation := newNotificationObjectMutation(c.config, OpUpdate)
	return &NotificationObjectUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *NotificationObjectClient) UpdateOne(no *NotificationObject) *NotificationObjectUpdateOne {
	mutation := newNotificationObjectMutation(c.config, OpUpdateOne, withNotificationObject(no))
	return &NotificationObjectUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *NotificationObjectClient) UpdateOneID(id int) *NotificationObjectUpdateOne {
	mutation := newNotificationObjectMutation(c.config, OpUpdateOne, withNotificationObjectID(id))
	return &NotificationObjectUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for NotificationObject.
func (c *NotificationObjectClient) Delete() *NotificationObjectDelete {
	mutation := newNotificationObjectMutation(c.config, OpDelete)
	return &NotificationObjectDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *NotificationObjectClient) DeleteOne(no *NotificationObject) *NotificationObjectDeleteOne {
	return c.DeleteOneID(no.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *NotificationObjectClient) DeleteOneID(id int) *NotificationObjectDeleteOne {
	builder := c.Delete().Where(notificationobject.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &NotificationObjectDeleteOne{builder}
}

// Query returns a query builder for NotificationObject.
func (c *NotificationObjectClient) Query() *NotificationObjectQuery {
	return &NotificationObjectQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeNotificationObject},
		inters: c.Interceptors(),
	}
}

// Get returns a NotificationObject entity by its id.
func (c *NotificationObjectClient) Get(ctx context.Context, id int) (*NotificationObject, error) {
	return c.Query().Where(notificationobject.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *NotificationObjectClient) GetX(ctx context.Context, id int) *NotificationObject {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryNotifications queries the notifications edge of a NotificationObject.
func (c *NotificationObjectClient) QueryNotifications(no *NotificationObject) *NotificationQuery {
	query := (&NotificationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := no.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(notificationobject.Table, notificationobject.FieldID, id),
			sqlgraph.To(notification.Table, notification.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, notificationobject.NotificationsTable, notificationobject.NotificationsColumn),
		)
		fromV = sqlgraph.Neighbors(no.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryNotificationChanges queries the notificationChanges edge of a NotificationObject.
func (c *NotificationObjectClient) QueryNotificationChanges(no *NotificationObject) *NotificationChangeQuery {
	query := (&NotificationChangeClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := no.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(notificationobject.Table, notificationobject.FieldID, id),
			sqlgraph.To(notificationchange.Table, notificationchange.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, notificationobject.NotificationChangesTable, notificationobject.NotificationChangesColumn),
		)
		fromV = sqlgraph.Neighbors(no.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryEntityType queries the entityType edge of a NotificationObject.
func (c *NotificationObjectClient) QueryEntityType(no *NotificationObject) *EntityTypeQuery {
	query := (&EntityTypeClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := no.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(notificationobject.Table, notificationobject.FieldID, id),
			sqlgraph.To(entitytype.Table, entitytype.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, notificationobject.EntityTypeTable, notificationobject.EntityTypeColumn),
		)
		fromV = sqlgraph.Neighbors(no.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *NotificationObjectClient) Hooks() []Hook {
	hooks := c.hooks.NotificationObject
	return append(hooks[:len(hooks):len(hooks)], notificationobject.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *NotificationObjectClient) Interceptors() []Interceptor {
	inters := c.inters.NotificationObject
	return append(inters[:len(inters):len(inters)], notificationobject.Interceptors[:]...)
}

func (c *NotificationObjectClient) mutate(ctx context.Context, m *NotificationObjectMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&NotificationObjectCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&NotificationObjectUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&NotificationObjectUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&NotificationObjectDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown NotificationObject mutation op: %q", m.Op())
	}
}

// UserClient is a client for the User schema.
type UserClient struct {
	config
}

// NewUserClient returns a client for the User from the given config.
func NewUserClient(c config) *UserClient {
	return &UserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `user.Hooks(f(g(h())))`.
func (c *UserClient) Use(hooks ...Hook) {
	c.hooks.User = append(c.hooks.User, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `user.Intercept(f(g(h())))`.
func (c *UserClient) Intercept(interceptors ...Interceptor) {
	c.inters.User = append(c.inters.User, interceptors...)
}

// Create returns a builder for creating a User entity.
func (c *UserClient) Create() *UserCreate {
	mutation := newUserMutation(c.config, OpCreate)
	return &UserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of User entities.
func (c *UserClient) CreateBulk(builders ...*UserCreate) *UserCreateBulk {
	return &UserCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *UserClient) MapCreateBulk(slice any, setFunc func(*UserCreate, int)) *UserCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &UserCreateBulk{err: fmt.Errorf("calling to UserClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*UserCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &UserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for User.
func (c *UserClient) Update() *UserUpdate {
	mutation := newUserMutation(c.config, OpUpdate)
	return &UserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserClient) UpdateOne(u *User) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUser(u))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserClient) UpdateOneID(id int) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUserID(id))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for User.
func (c *UserClient) Delete() *UserDelete {
	mutation := newUserMutation(c.config, OpDelete)
	return &UserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UserClient) DeleteOne(u *User) *UserDeleteOne {
	return c.DeleteOneID(u.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UserClient) DeleteOneID(id int) *UserDeleteOne {
	builder := c.Delete().Where(user.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserDeleteOne{builder}
}

// Query returns a query builder for User.
func (c *UserClient) Query() *UserQuery {
	return &UserQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUser},
		inters: c.Interceptors(),
	}
}

// Get returns a User entity by its id.
func (c *UserClient) Get(ctx context.Context, id int) (*User, error) {
	return c.Query().Where(user.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserClient) GetX(ctx context.Context, id int) *User {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryFriendshipsReceiver queries the friendshipsReceiver edge of a User.
func (c *UserClient) QueryFriendshipsReceiver(u *User) *FriendshipQuery {
	query := (&FriendshipClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(friendship.Table, friendship.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.FriendshipsReceiverTable, user.FriendshipsReceiverColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryFriendshipsSender queries the friendshipsSender edge of a User.
func (c *UserClient) QueryFriendshipsSender(u *User) *FriendshipQuery {
	query := (&FriendshipClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(friendship.Table, friendship.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.FriendshipsSenderTable, user.FriendshipsSenderColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryNotifications queries the notifications edge of a User.
func (c *UserClient) QueryNotifications(u *User) *NotificationQuery {
	query := (&NotificationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(notification.Table, notification.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.NotificationsTable, user.NotificationsColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryNotificationChanges queries the notificationChanges edge of a User.
func (c *UserClient) QueryNotificationChanges(u *User) *NotificationChangeQuery {
	query := (&NotificationChangeClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(notificationchange.Table, notificationchange.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.NotificationChangesTable, user.NotificationChangesColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UserClient) Hooks() []Hook {
	hooks := c.hooks.User
	return append(hooks[:len(hooks):len(hooks)], user.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *UserClient) Interceptors() []Interceptor {
	inters := c.inters.User
	return append(inters[:len(inters):len(inters)], user.Interceptors[:]...)
}

func (c *UserClient) mutate(ctx context.Context, m *UserMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UserCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UserUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UserDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown User mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		EntityType, Friendship, FriendshipStatus, Notification, NotificationChange,
		NotificationObject, User []ent.Hook
	}
	inters struct {
		EntityType, Friendship, FriendshipStatus, Notification, NotificationChange,
		NotificationObject, User []ent.Interceptor
	}
)
