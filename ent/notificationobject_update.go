// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"notification-service/ent/entitytype"
	"notification-service/ent/notification"
	"notification-service/ent/notificationchange"
	"notification-service/ent/notificationobject"
	"notification-service/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// NotificationObjectUpdate is the builder for updating NotificationObject entities.
type NotificationObjectUpdate struct {
	config
	hooks    []Hook
	mutation *NotificationObjectMutation
}

// Where appends a list predicates to the NotificationObjectUpdate builder.
func (nou *NotificationObjectUpdate) Where(ps ...predicate.NotificationObject) *NotificationObjectUpdate {
	nou.mutation.Where(ps...)
	return nou
}

// SetUpdatedAt sets the "updated_at" field.
func (nou *NotificationObjectUpdate) SetUpdatedAt(t time.Time) *NotificationObjectUpdate {
	nou.mutation.SetUpdatedAt(t)
	return nou
}

// SetDeletedAt sets the "deleted_at" field.
func (nou *NotificationObjectUpdate) SetDeletedAt(t time.Time) *NotificationObjectUpdate {
	nou.mutation.SetDeletedAt(t)
	return nou
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (nou *NotificationObjectUpdate) SetNillableDeletedAt(t *time.Time) *NotificationObjectUpdate {
	if t != nil {
		nou.SetDeletedAt(*t)
	}
	return nou
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (nou *NotificationObjectUpdate) ClearDeletedAt() *NotificationObjectUpdate {
	nou.mutation.ClearDeletedAt()
	return nou
}

// SetEntityID sets the "entity_id" field.
func (nou *NotificationObjectUpdate) SetEntityID(i int) *NotificationObjectUpdate {
	nou.mutation.ResetEntityID()
	nou.mutation.SetEntityID(i)
	return nou
}

// SetNillableEntityID sets the "entity_id" field if the given value is not nil.
func (nou *NotificationObjectUpdate) SetNillableEntityID(i *int) *NotificationObjectUpdate {
	if i != nil {
		nou.SetEntityID(*i)
	}
	return nou
}

// AddEntityID adds i to the "entity_id" field.
func (nou *NotificationObjectUpdate) AddEntityID(i int) *NotificationObjectUpdate {
	nou.mutation.AddEntityID(i)
	return nou
}

// AddNotificationIDs adds the "notifications" edge to the Notification entity by IDs.
func (nou *NotificationObjectUpdate) AddNotificationIDs(ids ...int) *NotificationObjectUpdate {
	nou.mutation.AddNotificationIDs(ids...)
	return nou
}

// AddNotifications adds the "notifications" edges to the Notification entity.
func (nou *NotificationObjectUpdate) AddNotifications(n ...*Notification) *NotificationObjectUpdate {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return nou.AddNotificationIDs(ids...)
}

// AddNotificationChangeIDs adds the "notificationChanges" edge to the NotificationChange entity by IDs.
func (nou *NotificationObjectUpdate) AddNotificationChangeIDs(ids ...int) *NotificationObjectUpdate {
	nou.mutation.AddNotificationChangeIDs(ids...)
	return nou
}

// AddNotificationChanges adds the "notificationChanges" edges to the NotificationChange entity.
func (nou *NotificationObjectUpdate) AddNotificationChanges(n ...*NotificationChange) *NotificationObjectUpdate {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return nou.AddNotificationChangeIDs(ids...)
}

// SetEntityTypeID sets the "entityType" edge to the EntityType entity by ID.
func (nou *NotificationObjectUpdate) SetEntityTypeID(id int) *NotificationObjectUpdate {
	nou.mutation.SetEntityTypeID(id)
	return nou
}

// SetNillableEntityTypeID sets the "entityType" edge to the EntityType entity by ID if the given value is not nil.
func (nou *NotificationObjectUpdate) SetNillableEntityTypeID(id *int) *NotificationObjectUpdate {
	if id != nil {
		nou = nou.SetEntityTypeID(*id)
	}
	return nou
}

// SetEntityType sets the "entityType" edge to the EntityType entity.
func (nou *NotificationObjectUpdate) SetEntityType(e *EntityType) *NotificationObjectUpdate {
	return nou.SetEntityTypeID(e.ID)
}

// Mutation returns the NotificationObjectMutation object of the builder.
func (nou *NotificationObjectUpdate) Mutation() *NotificationObjectMutation {
	return nou.mutation
}

// ClearNotifications clears all "notifications" edges to the Notification entity.
func (nou *NotificationObjectUpdate) ClearNotifications() *NotificationObjectUpdate {
	nou.mutation.ClearNotifications()
	return nou
}

// RemoveNotificationIDs removes the "notifications" edge to Notification entities by IDs.
func (nou *NotificationObjectUpdate) RemoveNotificationIDs(ids ...int) *NotificationObjectUpdate {
	nou.mutation.RemoveNotificationIDs(ids...)
	return nou
}

// RemoveNotifications removes "notifications" edges to Notification entities.
func (nou *NotificationObjectUpdate) RemoveNotifications(n ...*Notification) *NotificationObjectUpdate {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return nou.RemoveNotificationIDs(ids...)
}

// ClearNotificationChanges clears all "notificationChanges" edges to the NotificationChange entity.
func (nou *NotificationObjectUpdate) ClearNotificationChanges() *NotificationObjectUpdate {
	nou.mutation.ClearNotificationChanges()
	return nou
}

// RemoveNotificationChangeIDs removes the "notificationChanges" edge to NotificationChange entities by IDs.
func (nou *NotificationObjectUpdate) RemoveNotificationChangeIDs(ids ...int) *NotificationObjectUpdate {
	nou.mutation.RemoveNotificationChangeIDs(ids...)
	return nou
}

// RemoveNotificationChanges removes "notificationChanges" edges to NotificationChange entities.
func (nou *NotificationObjectUpdate) RemoveNotificationChanges(n ...*NotificationChange) *NotificationObjectUpdate {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return nou.RemoveNotificationChangeIDs(ids...)
}

// ClearEntityType clears the "entityType" edge to the EntityType entity.
func (nou *NotificationObjectUpdate) ClearEntityType() *NotificationObjectUpdate {
	nou.mutation.ClearEntityType()
	return nou
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (nou *NotificationObjectUpdate) Save(ctx context.Context) (int, error) {
	if err := nou.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, nou.sqlSave, nou.mutation, nou.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (nou *NotificationObjectUpdate) SaveX(ctx context.Context) int {
	affected, err := nou.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (nou *NotificationObjectUpdate) Exec(ctx context.Context) error {
	_, err := nou.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nou *NotificationObjectUpdate) ExecX(ctx context.Context) {
	if err := nou.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (nou *NotificationObjectUpdate) defaults() error {
	if _, ok := nou.mutation.UpdatedAt(); !ok {
		if notificationobject.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized notificationobject.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := notificationobject.UpdateDefaultUpdatedAt()
		nou.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (nou *NotificationObjectUpdate) check() error {
	if v, ok := nou.mutation.EntityID(); ok {
		if err := notificationobject.EntityIDValidator(v); err != nil {
			return &ValidationError{Name: "entity_id", err: fmt.Errorf(`ent: validator failed for field "NotificationObject.entity_id": %w`, err)}
		}
	}
	return nil
}

func (nou *NotificationObjectUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := nou.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(notificationobject.Table, notificationobject.Columns, sqlgraph.NewFieldSpec(notificationobject.FieldID, field.TypeInt))
	if ps := nou.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := nou.mutation.UpdatedAt(); ok {
		_spec.SetField(notificationobject.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := nou.mutation.DeletedAt(); ok {
		_spec.SetField(notificationobject.FieldDeletedAt, field.TypeTime, value)
	}
	if nou.mutation.DeletedAtCleared() {
		_spec.ClearField(notificationobject.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := nou.mutation.EntityID(); ok {
		_spec.SetField(notificationobject.FieldEntityID, field.TypeInt, value)
	}
	if value, ok := nou.mutation.AddedEntityID(); ok {
		_spec.AddField(notificationobject.FieldEntityID, field.TypeInt, value)
	}
	if nou.mutation.NotificationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   notificationobject.NotificationsTable,
			Columns: []string{notificationobject.NotificationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notification.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nou.mutation.RemovedNotificationsIDs(); len(nodes) > 0 && !nou.mutation.NotificationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   notificationobject.NotificationsTable,
			Columns: []string{notificationobject.NotificationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notification.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nou.mutation.NotificationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   notificationobject.NotificationsTable,
			Columns: []string{notificationobject.NotificationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notification.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nou.mutation.NotificationChangesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   notificationobject.NotificationChangesTable,
			Columns: []string{notificationobject.NotificationChangesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notificationchange.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nou.mutation.RemovedNotificationChangesIDs(); len(nodes) > 0 && !nou.mutation.NotificationChangesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   notificationobject.NotificationChangesTable,
			Columns: []string{notificationobject.NotificationChangesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notificationchange.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nou.mutation.NotificationChangesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   notificationobject.NotificationChangesTable,
			Columns: []string{notificationobject.NotificationChangesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notificationchange.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nou.mutation.EntityTypeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   notificationobject.EntityTypeTable,
			Columns: []string{notificationobject.EntityTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entitytype.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nou.mutation.EntityTypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   notificationobject.EntityTypeTable,
			Columns: []string{notificationobject.EntityTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entitytype.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, nou.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{notificationobject.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	nou.mutation.done = true
	return n, nil
}

// NotificationObjectUpdateOne is the builder for updating a single NotificationObject entity.
type NotificationObjectUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *NotificationObjectMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (nouo *NotificationObjectUpdateOne) SetUpdatedAt(t time.Time) *NotificationObjectUpdateOne {
	nouo.mutation.SetUpdatedAt(t)
	return nouo
}

// SetDeletedAt sets the "deleted_at" field.
func (nouo *NotificationObjectUpdateOne) SetDeletedAt(t time.Time) *NotificationObjectUpdateOne {
	nouo.mutation.SetDeletedAt(t)
	return nouo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (nouo *NotificationObjectUpdateOne) SetNillableDeletedAt(t *time.Time) *NotificationObjectUpdateOne {
	if t != nil {
		nouo.SetDeletedAt(*t)
	}
	return nouo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (nouo *NotificationObjectUpdateOne) ClearDeletedAt() *NotificationObjectUpdateOne {
	nouo.mutation.ClearDeletedAt()
	return nouo
}

// SetEntityID sets the "entity_id" field.
func (nouo *NotificationObjectUpdateOne) SetEntityID(i int) *NotificationObjectUpdateOne {
	nouo.mutation.ResetEntityID()
	nouo.mutation.SetEntityID(i)
	return nouo
}

// SetNillableEntityID sets the "entity_id" field if the given value is not nil.
func (nouo *NotificationObjectUpdateOne) SetNillableEntityID(i *int) *NotificationObjectUpdateOne {
	if i != nil {
		nouo.SetEntityID(*i)
	}
	return nouo
}

// AddEntityID adds i to the "entity_id" field.
func (nouo *NotificationObjectUpdateOne) AddEntityID(i int) *NotificationObjectUpdateOne {
	nouo.mutation.AddEntityID(i)
	return nouo
}

// AddNotificationIDs adds the "notifications" edge to the Notification entity by IDs.
func (nouo *NotificationObjectUpdateOne) AddNotificationIDs(ids ...int) *NotificationObjectUpdateOne {
	nouo.mutation.AddNotificationIDs(ids...)
	return nouo
}

// AddNotifications adds the "notifications" edges to the Notification entity.
func (nouo *NotificationObjectUpdateOne) AddNotifications(n ...*Notification) *NotificationObjectUpdateOne {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return nouo.AddNotificationIDs(ids...)
}

// AddNotificationChangeIDs adds the "notificationChanges" edge to the NotificationChange entity by IDs.
func (nouo *NotificationObjectUpdateOne) AddNotificationChangeIDs(ids ...int) *NotificationObjectUpdateOne {
	nouo.mutation.AddNotificationChangeIDs(ids...)
	return nouo
}

// AddNotificationChanges adds the "notificationChanges" edges to the NotificationChange entity.
func (nouo *NotificationObjectUpdateOne) AddNotificationChanges(n ...*NotificationChange) *NotificationObjectUpdateOne {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return nouo.AddNotificationChangeIDs(ids...)
}

// SetEntityTypeID sets the "entityType" edge to the EntityType entity by ID.
func (nouo *NotificationObjectUpdateOne) SetEntityTypeID(id int) *NotificationObjectUpdateOne {
	nouo.mutation.SetEntityTypeID(id)
	return nouo
}

// SetNillableEntityTypeID sets the "entityType" edge to the EntityType entity by ID if the given value is not nil.
func (nouo *NotificationObjectUpdateOne) SetNillableEntityTypeID(id *int) *NotificationObjectUpdateOne {
	if id != nil {
		nouo = nouo.SetEntityTypeID(*id)
	}
	return nouo
}

// SetEntityType sets the "entityType" edge to the EntityType entity.
func (nouo *NotificationObjectUpdateOne) SetEntityType(e *EntityType) *NotificationObjectUpdateOne {
	return nouo.SetEntityTypeID(e.ID)
}

// Mutation returns the NotificationObjectMutation object of the builder.
func (nouo *NotificationObjectUpdateOne) Mutation() *NotificationObjectMutation {
	return nouo.mutation
}

// ClearNotifications clears all "notifications" edges to the Notification entity.
func (nouo *NotificationObjectUpdateOne) ClearNotifications() *NotificationObjectUpdateOne {
	nouo.mutation.ClearNotifications()
	return nouo
}

// RemoveNotificationIDs removes the "notifications" edge to Notification entities by IDs.
func (nouo *NotificationObjectUpdateOne) RemoveNotificationIDs(ids ...int) *NotificationObjectUpdateOne {
	nouo.mutation.RemoveNotificationIDs(ids...)
	return nouo
}

// RemoveNotifications removes "notifications" edges to Notification entities.
func (nouo *NotificationObjectUpdateOne) RemoveNotifications(n ...*Notification) *NotificationObjectUpdateOne {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return nouo.RemoveNotificationIDs(ids...)
}

// ClearNotificationChanges clears all "notificationChanges" edges to the NotificationChange entity.
func (nouo *NotificationObjectUpdateOne) ClearNotificationChanges() *NotificationObjectUpdateOne {
	nouo.mutation.ClearNotificationChanges()
	return nouo
}

// RemoveNotificationChangeIDs removes the "notificationChanges" edge to NotificationChange entities by IDs.
func (nouo *NotificationObjectUpdateOne) RemoveNotificationChangeIDs(ids ...int) *NotificationObjectUpdateOne {
	nouo.mutation.RemoveNotificationChangeIDs(ids...)
	return nouo
}

// RemoveNotificationChanges removes "notificationChanges" edges to NotificationChange entities.
func (nouo *NotificationObjectUpdateOne) RemoveNotificationChanges(n ...*NotificationChange) *NotificationObjectUpdateOne {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return nouo.RemoveNotificationChangeIDs(ids...)
}

// ClearEntityType clears the "entityType" edge to the EntityType entity.
func (nouo *NotificationObjectUpdateOne) ClearEntityType() *NotificationObjectUpdateOne {
	nouo.mutation.ClearEntityType()
	return nouo
}

// Where appends a list predicates to the NotificationObjectUpdate builder.
func (nouo *NotificationObjectUpdateOne) Where(ps ...predicate.NotificationObject) *NotificationObjectUpdateOne {
	nouo.mutation.Where(ps...)
	return nouo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (nouo *NotificationObjectUpdateOne) Select(field string, fields ...string) *NotificationObjectUpdateOne {
	nouo.fields = append([]string{field}, fields...)
	return nouo
}

// Save executes the query and returns the updated NotificationObject entity.
func (nouo *NotificationObjectUpdateOne) Save(ctx context.Context) (*NotificationObject, error) {
	if err := nouo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, nouo.sqlSave, nouo.mutation, nouo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (nouo *NotificationObjectUpdateOne) SaveX(ctx context.Context) *NotificationObject {
	node, err := nouo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (nouo *NotificationObjectUpdateOne) Exec(ctx context.Context) error {
	_, err := nouo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nouo *NotificationObjectUpdateOne) ExecX(ctx context.Context) {
	if err := nouo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (nouo *NotificationObjectUpdateOne) defaults() error {
	if _, ok := nouo.mutation.UpdatedAt(); !ok {
		if notificationobject.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized notificationobject.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := notificationobject.UpdateDefaultUpdatedAt()
		nouo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (nouo *NotificationObjectUpdateOne) check() error {
	if v, ok := nouo.mutation.EntityID(); ok {
		if err := notificationobject.EntityIDValidator(v); err != nil {
			return &ValidationError{Name: "entity_id", err: fmt.Errorf(`ent: validator failed for field "NotificationObject.entity_id": %w`, err)}
		}
	}
	return nil
}

func (nouo *NotificationObjectUpdateOne) sqlSave(ctx context.Context) (_node *NotificationObject, err error) {
	if err := nouo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(notificationobject.Table, notificationobject.Columns, sqlgraph.NewFieldSpec(notificationobject.FieldID, field.TypeInt))
	id, ok := nouo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "NotificationObject.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := nouo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, notificationobject.FieldID)
		for _, f := range fields {
			if !notificationobject.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != notificationobject.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := nouo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := nouo.mutation.UpdatedAt(); ok {
		_spec.SetField(notificationobject.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := nouo.mutation.DeletedAt(); ok {
		_spec.SetField(notificationobject.FieldDeletedAt, field.TypeTime, value)
	}
	if nouo.mutation.DeletedAtCleared() {
		_spec.ClearField(notificationobject.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := nouo.mutation.EntityID(); ok {
		_spec.SetField(notificationobject.FieldEntityID, field.TypeInt, value)
	}
	if value, ok := nouo.mutation.AddedEntityID(); ok {
		_spec.AddField(notificationobject.FieldEntityID, field.TypeInt, value)
	}
	if nouo.mutation.NotificationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   notificationobject.NotificationsTable,
			Columns: []string{notificationobject.NotificationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notification.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nouo.mutation.RemovedNotificationsIDs(); len(nodes) > 0 && !nouo.mutation.NotificationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   notificationobject.NotificationsTable,
			Columns: []string{notificationobject.NotificationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notification.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nouo.mutation.NotificationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   notificationobject.NotificationsTable,
			Columns: []string{notificationobject.NotificationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notification.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nouo.mutation.NotificationChangesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   notificationobject.NotificationChangesTable,
			Columns: []string{notificationobject.NotificationChangesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notificationchange.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nouo.mutation.RemovedNotificationChangesIDs(); len(nodes) > 0 && !nouo.mutation.NotificationChangesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   notificationobject.NotificationChangesTable,
			Columns: []string{notificationobject.NotificationChangesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notificationchange.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nouo.mutation.NotificationChangesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   notificationobject.NotificationChangesTable,
			Columns: []string{notificationobject.NotificationChangesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notificationchange.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nouo.mutation.EntityTypeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   notificationobject.EntityTypeTable,
			Columns: []string{notificationobject.EntityTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entitytype.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nouo.mutation.EntityTypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   notificationobject.EntityTypeTable,
			Columns: []string{notificationobject.EntityTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entitytype.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &NotificationObject{config: nouo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, nouo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{notificationobject.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	nouo.mutation.done = true
	return _node, nil
}
