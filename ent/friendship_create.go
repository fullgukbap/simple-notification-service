// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"notification-service/ent/friendship"
	"notification-service/ent/friendshipstatus"
	"notification-service/ent/user"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// FriendshipCreate is the builder for creating a Friendship entity.
type FriendshipCreate struct {
	config
	mutation *FriendshipMutation
	hooks    []Hook
}

// SetDeleteTime sets the "delete_time" field.
func (fc *FriendshipCreate) SetDeleteTime(t time.Time) *FriendshipCreate {
	fc.mutation.SetDeleteTime(t)
	return fc
}

// SetNillableDeleteTime sets the "delete_time" field if the given value is not nil.
func (fc *FriendshipCreate) SetNillableDeleteTime(t *time.Time) *FriendshipCreate {
	if t != nil {
		fc.SetDeleteTime(*t)
	}
	return fc
}

// SetSenderIDID sets the "senderID" edge to the User entity by ID.
func (fc *FriendshipCreate) SetSenderIDID(id int) *FriendshipCreate {
	fc.mutation.SetSenderIDID(id)
	return fc
}

// SetNillableSenderIDID sets the "senderID" edge to the User entity by ID if the given value is not nil.
func (fc *FriendshipCreate) SetNillableSenderIDID(id *int) *FriendshipCreate {
	if id != nil {
		fc = fc.SetSenderIDID(*id)
	}
	return fc
}

// SetSenderID sets the "senderID" edge to the User entity.
func (fc *FriendshipCreate) SetSenderID(u *User) *FriendshipCreate {
	return fc.SetSenderIDID(u.ID)
}

// SetReceiverIDID sets the "receiverID" edge to the User entity by ID.
func (fc *FriendshipCreate) SetReceiverIDID(id int) *FriendshipCreate {
	fc.mutation.SetReceiverIDID(id)
	return fc
}

// SetNillableReceiverIDID sets the "receiverID" edge to the User entity by ID if the given value is not nil.
func (fc *FriendshipCreate) SetNillableReceiverIDID(id *int) *FriendshipCreate {
	if id != nil {
		fc = fc.SetReceiverIDID(*id)
	}
	return fc
}

// SetReceiverID sets the "receiverID" edge to the User entity.
func (fc *FriendshipCreate) SetReceiverID(u *User) *FriendshipCreate {
	return fc.SetReceiverIDID(u.ID)
}

// SetFriendshipStatusIDID sets the "friendshipStatusID" edge to the FriendshipStatus entity by ID.
func (fc *FriendshipCreate) SetFriendshipStatusIDID(id int) *FriendshipCreate {
	fc.mutation.SetFriendshipStatusIDID(id)
	return fc
}

// SetNillableFriendshipStatusIDID sets the "friendshipStatusID" edge to the FriendshipStatus entity by ID if the given value is not nil.
func (fc *FriendshipCreate) SetNillableFriendshipStatusIDID(id *int) *FriendshipCreate {
	if id != nil {
		fc = fc.SetFriendshipStatusIDID(*id)
	}
	return fc
}

// SetFriendshipStatusID sets the "friendshipStatusID" edge to the FriendshipStatus entity.
func (fc *FriendshipCreate) SetFriendshipStatusID(f *FriendshipStatus) *FriendshipCreate {
	return fc.SetFriendshipStatusIDID(f.ID)
}

// Mutation returns the FriendshipMutation object of the builder.
func (fc *FriendshipCreate) Mutation() *FriendshipMutation {
	return fc.mutation
}

// Save creates the Friendship in the database.
func (fc *FriendshipCreate) Save(ctx context.Context) (*Friendship, error) {
	return withHooks(ctx, fc.sqlSave, fc.mutation, fc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (fc *FriendshipCreate) SaveX(ctx context.Context) *Friendship {
	v, err := fc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (fc *FriendshipCreate) Exec(ctx context.Context) error {
	_, err := fc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fc *FriendshipCreate) ExecX(ctx context.Context) {
	if err := fc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fc *FriendshipCreate) check() error {
	return nil
}

func (fc *FriendshipCreate) sqlSave(ctx context.Context) (*Friendship, error) {
	if err := fc.check(); err != nil {
		return nil, err
	}
	_node, _spec := fc.createSpec()
	if err := sqlgraph.CreateNode(ctx, fc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	fc.mutation.id = &_node.ID
	fc.mutation.done = true
	return _node, nil
}

func (fc *FriendshipCreate) createSpec() (*Friendship, *sqlgraph.CreateSpec) {
	var (
		_node = &Friendship{config: fc.config}
		_spec = sqlgraph.NewCreateSpec(friendship.Table, sqlgraph.NewFieldSpec(friendship.FieldID, field.TypeInt))
	)
	if value, ok := fc.mutation.DeleteTime(); ok {
		_spec.SetField(friendship.FieldDeleteTime, field.TypeTime, value)
		_node.DeleteTime = value
	}
	if nodes := fc.mutation.SenderIDIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   friendship.SenderIDTable,
			Columns: []string{friendship.SenderIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_friendships_receiver = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := fc.mutation.ReceiverIDIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   friendship.ReceiverIDTable,
			Columns: []string{friendship.ReceiverIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_friendships_sender = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := fc.mutation.FriendshipStatusIDIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   friendship.FriendshipStatusIDTable,
			Columns: []string{friendship.FriendshipStatusIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(friendshipstatus.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.friendship_status_friendships = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// FriendshipCreateBulk is the builder for creating many Friendship entities in bulk.
type FriendshipCreateBulk struct {
	config
	err      error
	builders []*FriendshipCreate
}

// Save creates the Friendship entities in the database.
func (fcb *FriendshipCreateBulk) Save(ctx context.Context) ([]*Friendship, error) {
	if fcb.err != nil {
		return nil, fcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(fcb.builders))
	nodes := make([]*Friendship, len(fcb.builders))
	mutators := make([]Mutator, len(fcb.builders))
	for i := range fcb.builders {
		func(i int, root context.Context) {
			builder := fcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*FriendshipMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, fcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, fcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, fcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (fcb *FriendshipCreateBulk) SaveX(ctx context.Context) []*Friendship {
	v, err := fcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (fcb *FriendshipCreateBulk) Exec(ctx context.Context) error {
	_, err := fcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fcb *FriendshipCreateBulk) ExecX(ctx context.Context) {
	if err := fcb.Exec(ctx); err != nil {
		panic(err)
	}
}
