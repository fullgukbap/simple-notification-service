// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"notification-service/ent/friendship"
	"notification-service/ent/friendshipstatus"
	"notification-service/ent/user"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Friendship is the model entity for the Friendship schema.
type Friendship struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// DeleteTime holds the value of the "delete_time" field.
	DeleteTime time.Time `json:"delete_time,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the FriendshipQuery when eager-loading is set.
	Edges                         FriendshipEdges `json:"edges"`
	friendship_status_friendships *int
	user_friendships_receiver     *int
	user_friendships_sender       *int
	selectValues                  sql.SelectValues
}

// FriendshipEdges holds the relations/edges for other nodes in the graph.
type FriendshipEdges struct {
	// SenderID holds the value of the senderID edge.
	SenderID *User `json:"senderID,omitempty"`
	// ReceiverID holds the value of the receiverID edge.
	ReceiverID *User `json:"receiverID,omitempty"`
	// FriendshipStatusID holds the value of the friendshipStatusID edge.
	FriendshipStatusID *FriendshipStatus `json:"friendshipStatusID,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// SenderIDOrErr returns the SenderID value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e FriendshipEdges) SenderIDOrErr() (*User, error) {
	if e.SenderID != nil {
		return e.SenderID, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "senderID"}
}

// ReceiverIDOrErr returns the ReceiverID value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e FriendshipEdges) ReceiverIDOrErr() (*User, error) {
	if e.ReceiverID != nil {
		return e.ReceiverID, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "receiverID"}
}

// FriendshipStatusIDOrErr returns the FriendshipStatusID value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e FriendshipEdges) FriendshipStatusIDOrErr() (*FriendshipStatus, error) {
	if e.FriendshipStatusID != nil {
		return e.FriendshipStatusID, nil
	} else if e.loadedTypes[2] {
		return nil, &NotFoundError{label: friendshipstatus.Label}
	}
	return nil, &NotLoadedError{edge: "friendshipStatusID"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Friendship) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case friendship.FieldID:
			values[i] = new(sql.NullInt64)
		case friendship.FieldDeleteTime:
			values[i] = new(sql.NullTime)
		case friendship.ForeignKeys[0]: // friendship_status_friendships
			values[i] = new(sql.NullInt64)
		case friendship.ForeignKeys[1]: // user_friendships_receiver
			values[i] = new(sql.NullInt64)
		case friendship.ForeignKeys[2]: // user_friendships_sender
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Friendship fields.
func (f *Friendship) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case friendship.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			f.ID = int(value.Int64)
		case friendship.FieldDeleteTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field delete_time", values[i])
			} else if value.Valid {
				f.DeleteTime = value.Time
			}
		case friendship.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field friendship_status_friendships", value)
			} else if value.Valid {
				f.friendship_status_friendships = new(int)
				*f.friendship_status_friendships = int(value.Int64)
			}
		case friendship.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_friendships_receiver", value)
			} else if value.Valid {
				f.user_friendships_receiver = new(int)
				*f.user_friendships_receiver = int(value.Int64)
			}
		case friendship.ForeignKeys[2]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_friendships_sender", value)
			} else if value.Valid {
				f.user_friendships_sender = new(int)
				*f.user_friendships_sender = int(value.Int64)
			}
		default:
			f.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Friendship.
// This includes values selected through modifiers, order, etc.
func (f *Friendship) Value(name string) (ent.Value, error) {
	return f.selectValues.Get(name)
}

// QuerySenderID queries the "senderID" edge of the Friendship entity.
func (f *Friendship) QuerySenderID() *UserQuery {
	return NewFriendshipClient(f.config).QuerySenderID(f)
}

// QueryReceiverID queries the "receiverID" edge of the Friendship entity.
func (f *Friendship) QueryReceiverID() *UserQuery {
	return NewFriendshipClient(f.config).QueryReceiverID(f)
}

// QueryFriendshipStatusID queries the "friendshipStatusID" edge of the Friendship entity.
func (f *Friendship) QueryFriendshipStatusID() *FriendshipStatusQuery {
	return NewFriendshipClient(f.config).QueryFriendshipStatusID(f)
}

// Update returns a builder for updating this Friendship.
// Note that you need to call Friendship.Unwrap() before calling this method if this Friendship
// was returned from a transaction, and the transaction was committed or rolled back.
func (f *Friendship) Update() *FriendshipUpdateOne {
	return NewFriendshipClient(f.config).UpdateOne(f)
}

// Unwrap unwraps the Friendship entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (f *Friendship) Unwrap() *Friendship {
	_tx, ok := f.config.driver.(*txDriver)
	if !ok {
		panic("ent: Friendship is not a transactional entity")
	}
	f.config.driver = _tx.drv
	return f
}

// String implements the fmt.Stringer.
func (f *Friendship) String() string {
	var builder strings.Builder
	builder.WriteString("Friendship(")
	builder.WriteString(fmt.Sprintf("id=%v, ", f.ID))
	builder.WriteString("delete_time=")
	builder.WriteString(f.DeleteTime.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Friendships is a parsable slice of Friendship.
type Friendships []*Friendship
