// Code generated by ent, DO NOT EDIT.

package entitytype

import (
	"notification-service/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.EntityType {
	return predicate.EntityType(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.EntityType {
	return predicate.EntityType(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.EntityType {
	return predicate.EntityType(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.EntityType {
	return predicate.EntityType(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.EntityType {
	return predicate.EntityType(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.EntityType {
	return predicate.EntityType(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.EntityType {
	return predicate.EntityType(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.EntityType {
	return predicate.EntityType(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.EntityType {
	return predicate.EntityType(sql.FieldLTE(FieldID, id))
}

// DeleteTime applies equality check predicate on the "delete_time" field. It's identical to DeleteTimeEQ.
func DeleteTime(v time.Time) predicate.EntityType {
	return predicate.EntityType(sql.FieldEQ(FieldDeleteTime, v))
}

// EntityName applies equality check predicate on the "entityName" field. It's identical to EntityNameEQ.
func EntityName(v string) predicate.EntityType {
	return predicate.EntityType(sql.FieldEQ(FieldEntityName, v))
}

// NotificationDescription applies equality check predicate on the "notificationDescription" field. It's identical to NotificationDescriptionEQ.
func NotificationDescription(v string) predicate.EntityType {
	return predicate.EntityType(sql.FieldEQ(FieldNotificationDescription, v))
}

// DeleteTimeEQ applies the EQ predicate on the "delete_time" field.
func DeleteTimeEQ(v time.Time) predicate.EntityType {
	return predicate.EntityType(sql.FieldEQ(FieldDeleteTime, v))
}

// DeleteTimeNEQ applies the NEQ predicate on the "delete_time" field.
func DeleteTimeNEQ(v time.Time) predicate.EntityType {
	return predicate.EntityType(sql.FieldNEQ(FieldDeleteTime, v))
}

// DeleteTimeIn applies the In predicate on the "delete_time" field.
func DeleteTimeIn(vs ...time.Time) predicate.EntityType {
	return predicate.EntityType(sql.FieldIn(FieldDeleteTime, vs...))
}

// DeleteTimeNotIn applies the NotIn predicate on the "delete_time" field.
func DeleteTimeNotIn(vs ...time.Time) predicate.EntityType {
	return predicate.EntityType(sql.FieldNotIn(FieldDeleteTime, vs...))
}

// DeleteTimeGT applies the GT predicate on the "delete_time" field.
func DeleteTimeGT(v time.Time) predicate.EntityType {
	return predicate.EntityType(sql.FieldGT(FieldDeleteTime, v))
}

// DeleteTimeGTE applies the GTE predicate on the "delete_time" field.
func DeleteTimeGTE(v time.Time) predicate.EntityType {
	return predicate.EntityType(sql.FieldGTE(FieldDeleteTime, v))
}

// DeleteTimeLT applies the LT predicate on the "delete_time" field.
func DeleteTimeLT(v time.Time) predicate.EntityType {
	return predicate.EntityType(sql.FieldLT(FieldDeleteTime, v))
}

// DeleteTimeLTE applies the LTE predicate on the "delete_time" field.
func DeleteTimeLTE(v time.Time) predicate.EntityType {
	return predicate.EntityType(sql.FieldLTE(FieldDeleteTime, v))
}

// DeleteTimeIsNil applies the IsNil predicate on the "delete_time" field.
func DeleteTimeIsNil() predicate.EntityType {
	return predicate.EntityType(sql.FieldIsNull(FieldDeleteTime))
}

// DeleteTimeNotNil applies the NotNil predicate on the "delete_time" field.
func DeleteTimeNotNil() predicate.EntityType {
	return predicate.EntityType(sql.FieldNotNull(FieldDeleteTime))
}

// EntityNameEQ applies the EQ predicate on the "entityName" field.
func EntityNameEQ(v string) predicate.EntityType {
	return predicate.EntityType(sql.FieldEQ(FieldEntityName, v))
}

// EntityNameNEQ applies the NEQ predicate on the "entityName" field.
func EntityNameNEQ(v string) predicate.EntityType {
	return predicate.EntityType(sql.FieldNEQ(FieldEntityName, v))
}

// EntityNameIn applies the In predicate on the "entityName" field.
func EntityNameIn(vs ...string) predicate.EntityType {
	return predicate.EntityType(sql.FieldIn(FieldEntityName, vs...))
}

// EntityNameNotIn applies the NotIn predicate on the "entityName" field.
func EntityNameNotIn(vs ...string) predicate.EntityType {
	return predicate.EntityType(sql.FieldNotIn(FieldEntityName, vs...))
}

// EntityNameGT applies the GT predicate on the "entityName" field.
func EntityNameGT(v string) predicate.EntityType {
	return predicate.EntityType(sql.FieldGT(FieldEntityName, v))
}

// EntityNameGTE applies the GTE predicate on the "entityName" field.
func EntityNameGTE(v string) predicate.EntityType {
	return predicate.EntityType(sql.FieldGTE(FieldEntityName, v))
}

// EntityNameLT applies the LT predicate on the "entityName" field.
func EntityNameLT(v string) predicate.EntityType {
	return predicate.EntityType(sql.FieldLT(FieldEntityName, v))
}

// EntityNameLTE applies the LTE predicate on the "entityName" field.
func EntityNameLTE(v string) predicate.EntityType {
	return predicate.EntityType(sql.FieldLTE(FieldEntityName, v))
}

// EntityNameContains applies the Contains predicate on the "entityName" field.
func EntityNameContains(v string) predicate.EntityType {
	return predicate.EntityType(sql.FieldContains(FieldEntityName, v))
}

// EntityNameHasPrefix applies the HasPrefix predicate on the "entityName" field.
func EntityNameHasPrefix(v string) predicate.EntityType {
	return predicate.EntityType(sql.FieldHasPrefix(FieldEntityName, v))
}

// EntityNameHasSuffix applies the HasSuffix predicate on the "entityName" field.
func EntityNameHasSuffix(v string) predicate.EntityType {
	return predicate.EntityType(sql.FieldHasSuffix(FieldEntityName, v))
}

// EntityNameEqualFold applies the EqualFold predicate on the "entityName" field.
func EntityNameEqualFold(v string) predicate.EntityType {
	return predicate.EntityType(sql.FieldEqualFold(FieldEntityName, v))
}

// EntityNameContainsFold applies the ContainsFold predicate on the "entityName" field.
func EntityNameContainsFold(v string) predicate.EntityType {
	return predicate.EntityType(sql.FieldContainsFold(FieldEntityName, v))
}

// NotificationDescriptionEQ applies the EQ predicate on the "notificationDescription" field.
func NotificationDescriptionEQ(v string) predicate.EntityType {
	return predicate.EntityType(sql.FieldEQ(FieldNotificationDescription, v))
}

// NotificationDescriptionNEQ applies the NEQ predicate on the "notificationDescription" field.
func NotificationDescriptionNEQ(v string) predicate.EntityType {
	return predicate.EntityType(sql.FieldNEQ(FieldNotificationDescription, v))
}

// NotificationDescriptionIn applies the In predicate on the "notificationDescription" field.
func NotificationDescriptionIn(vs ...string) predicate.EntityType {
	return predicate.EntityType(sql.FieldIn(FieldNotificationDescription, vs...))
}

// NotificationDescriptionNotIn applies the NotIn predicate on the "notificationDescription" field.
func NotificationDescriptionNotIn(vs ...string) predicate.EntityType {
	return predicate.EntityType(sql.FieldNotIn(FieldNotificationDescription, vs...))
}

// NotificationDescriptionGT applies the GT predicate on the "notificationDescription" field.
func NotificationDescriptionGT(v string) predicate.EntityType {
	return predicate.EntityType(sql.FieldGT(FieldNotificationDescription, v))
}

// NotificationDescriptionGTE applies the GTE predicate on the "notificationDescription" field.
func NotificationDescriptionGTE(v string) predicate.EntityType {
	return predicate.EntityType(sql.FieldGTE(FieldNotificationDescription, v))
}

// NotificationDescriptionLT applies the LT predicate on the "notificationDescription" field.
func NotificationDescriptionLT(v string) predicate.EntityType {
	return predicate.EntityType(sql.FieldLT(FieldNotificationDescription, v))
}

// NotificationDescriptionLTE applies the LTE predicate on the "notificationDescription" field.
func NotificationDescriptionLTE(v string) predicate.EntityType {
	return predicate.EntityType(sql.FieldLTE(FieldNotificationDescription, v))
}

// NotificationDescriptionContains applies the Contains predicate on the "notificationDescription" field.
func NotificationDescriptionContains(v string) predicate.EntityType {
	return predicate.EntityType(sql.FieldContains(FieldNotificationDescription, v))
}

// NotificationDescriptionHasPrefix applies the HasPrefix predicate on the "notificationDescription" field.
func NotificationDescriptionHasPrefix(v string) predicate.EntityType {
	return predicate.EntityType(sql.FieldHasPrefix(FieldNotificationDescription, v))
}

// NotificationDescriptionHasSuffix applies the HasSuffix predicate on the "notificationDescription" field.
func NotificationDescriptionHasSuffix(v string) predicate.EntityType {
	return predicate.EntityType(sql.FieldHasSuffix(FieldNotificationDescription, v))
}

// NotificationDescriptionEqualFold applies the EqualFold predicate on the "notificationDescription" field.
func NotificationDescriptionEqualFold(v string) predicate.EntityType {
	return predicate.EntityType(sql.FieldEqualFold(FieldNotificationDescription, v))
}

// NotificationDescriptionContainsFold applies the ContainsFold predicate on the "notificationDescription" field.
func NotificationDescriptionContainsFold(v string) predicate.EntityType {
	return predicate.EntityType(sql.FieldContainsFold(FieldNotificationDescription, v))
}

// HasNotificationObjectIDs applies the HasEdge predicate on the "notificationObjectIDs" edge.
func HasNotificationObjectIDs() predicate.EntityType {
	return predicate.EntityType(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, NotificationObjectIDsTable, NotificationObjectIDsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasNotificationObjectIDsWith applies the HasEdge predicate on the "notificationObjectIDs" edge with a given conditions (other predicates).
func HasNotificationObjectIDsWith(preds ...predicate.NotificationObjectID) predicate.EntityType {
	return predicate.EntityType(func(s *sql.Selector) {
		step := newNotificationObjectIDsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.EntityType) predicate.EntityType {
	return predicate.EntityType(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.EntityType) predicate.EntityType {
	return predicate.EntityType(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.EntityType) predicate.EntityType {
	return predicate.EntityType(sql.NotPredicates(p))
}
