// Code generated by ent, DO NOT EDIT.

package entitytype

import (
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the entitytype type in the database.
	Label = "entity_type"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldEntityName holds the string denoting the entityname field in the database.
	FieldEntityName = "entity_name"
	// FieldNotificationDescription holds the string denoting the notificationdescription field in the database.
	FieldNotificationDescription = "notification_description"
	// EdgeNotificationObjects holds the string denoting the notificationobjects edge name in mutations.
	EdgeNotificationObjects = "notificationObjects"
	// Table holds the table name of the entitytype in the database.
	Table = "entity_types"
	// NotificationObjectsTable is the table that holds the notificationObjects relation/edge.
	NotificationObjectsTable = "notification_objects"
	// NotificationObjectsInverseTable is the table name for the NotificationObject entity.
	// It exists in this package in order to avoid circular dependency with the "notificationobject" package.
	NotificationObjectsInverseTable = "notification_objects"
	// NotificationObjectsColumn is the table column denoting the notificationObjects relation/edge.
	NotificationObjectsColumn = "entity_type_notification_objects"
)

// Columns holds all SQL columns for entitytype fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDeletedAt,
	FieldEntityName,
	FieldNotificationDescription,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "notification-service/ent/runtime"
var (
	Hooks        [1]ent.Hook
	Interceptors [1]ent.Interceptor
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
)

// OrderOption defines the ordering options for the EntityType queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByEntityName orders the results by the entityName field.
func ByEntityName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEntityName, opts...).ToFunc()
}

// ByNotificationDescription orders the results by the notificationDescription field.
func ByNotificationDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNotificationDescription, opts...).ToFunc()
}

// ByNotificationObjectsCount orders the results by notificationObjects count.
func ByNotificationObjectsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newNotificationObjectsStep(), opts...)
	}
}

// ByNotificationObjects orders the results by notificationObjects terms.
func ByNotificationObjects(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newNotificationObjectsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newNotificationObjectsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(NotificationObjectsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, NotificationObjectsTable, NotificationObjectsColumn),
	)
}
