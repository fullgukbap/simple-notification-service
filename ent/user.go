// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"notification-service/ent/user"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// User is the model entity for the User schema.
type User struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// DeleteTime holds the value of the "delete_time" field.
	DeleteTime time.Time `json:"delete_time,omitempty"`
	// Username holds the value of the "username" field.
	Username string `json:"username,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the UserQuery when eager-loading is set.
	Edges        UserEdges `json:"edges"`
	selectValues sql.SelectValues
}

// UserEdges holds the relations/edges for other nodes in the graph.
type UserEdges struct {
	// FriendshipsReceiver holds the value of the friendshipsReceiver edge.
	FriendshipsReceiver []*Friendship `json:"friendshipsReceiver,omitempty"`
	// FriendshipsSender holds the value of the friendshipsSender edge.
	FriendshipsSender []*Friendship `json:"friendshipsSender,omitempty"`
	// Notifications holds the value of the notifications edge.
	Notifications []*Notification `json:"notifications,omitempty"`
	// NotificationChanges holds the value of the notificationChanges edge.
	NotificationChanges []*NotificationChange `json:"notificationChanges,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// FriendshipsReceiverOrErr returns the FriendshipsReceiver value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) FriendshipsReceiverOrErr() ([]*Friendship, error) {
	if e.loadedTypes[0] {
		return e.FriendshipsReceiver, nil
	}
	return nil, &NotLoadedError{edge: "friendshipsReceiver"}
}

// FriendshipsSenderOrErr returns the FriendshipsSender value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) FriendshipsSenderOrErr() ([]*Friendship, error) {
	if e.loadedTypes[1] {
		return e.FriendshipsSender, nil
	}
	return nil, &NotLoadedError{edge: "friendshipsSender"}
}

// NotificationsOrErr returns the Notifications value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) NotificationsOrErr() ([]*Notification, error) {
	if e.loadedTypes[2] {
		return e.Notifications, nil
	}
	return nil, &NotLoadedError{edge: "notifications"}
}

// NotificationChangesOrErr returns the NotificationChanges value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) NotificationChangesOrErr() ([]*NotificationChange, error) {
	if e.loadedTypes[3] {
		return e.NotificationChanges, nil
	}
	return nil, &NotLoadedError{edge: "notificationChanges"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*User) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case user.FieldID:
			values[i] = new(sql.NullInt64)
		case user.FieldUsername:
			values[i] = new(sql.NullString)
		case user.FieldDeleteTime:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the User fields.
func (u *User) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case user.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			u.ID = int(value.Int64)
		case user.FieldDeleteTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field delete_time", values[i])
			} else if value.Valid {
				u.DeleteTime = value.Time
			}
		case user.FieldUsername:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field username", values[i])
			} else if value.Valid {
				u.Username = value.String
			}
		default:
			u.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the User.
// This includes values selected through modifiers, order, etc.
func (u *User) Value(name string) (ent.Value, error) {
	return u.selectValues.Get(name)
}

// QueryFriendshipsReceiver queries the "friendshipsReceiver" edge of the User entity.
func (u *User) QueryFriendshipsReceiver() *FriendshipQuery {
	return NewUserClient(u.config).QueryFriendshipsReceiver(u)
}

// QueryFriendshipsSender queries the "friendshipsSender" edge of the User entity.
func (u *User) QueryFriendshipsSender() *FriendshipQuery {
	return NewUserClient(u.config).QueryFriendshipsSender(u)
}

// QueryNotifications queries the "notifications" edge of the User entity.
func (u *User) QueryNotifications() *NotificationQuery {
	return NewUserClient(u.config).QueryNotifications(u)
}

// QueryNotificationChanges queries the "notificationChanges" edge of the User entity.
func (u *User) QueryNotificationChanges() *NotificationChangeQuery {
	return NewUserClient(u.config).QueryNotificationChanges(u)
}

// Update returns a builder for updating this User.
// Note that you need to call User.Unwrap() before calling this method if this User
// was returned from a transaction, and the transaction was committed or rolled back.
func (u *User) Update() *UserUpdateOne {
	return NewUserClient(u.config).UpdateOne(u)
}

// Unwrap unwraps the User entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (u *User) Unwrap() *User {
	_tx, ok := u.config.driver.(*txDriver)
	if !ok {
		panic("ent: User is not a transactional entity")
	}
	u.config.driver = _tx.drv
	return u
}

// String implements the fmt.Stringer.
func (u *User) String() string {
	var builder strings.Builder
	builder.WriteString("User(")
	builder.WriteString(fmt.Sprintf("id=%v, ", u.ID))
	builder.WriteString("delete_time=")
	builder.WriteString(u.DeleteTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("username=")
	builder.WriteString(u.Username)
	builder.WriteByte(')')
	return builder.String()
}

// Users is a parsable slice of User.
type Users []*User
