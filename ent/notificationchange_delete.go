// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"notification-service/ent/notificationchange"
	"notification-service/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// NotificationChangeDelete is the builder for deleting a NotificationChange entity.
type NotificationChangeDelete struct {
	config
	hooks    []Hook
	mutation *NotificationChangeMutation
}

// Where appends a list predicates to the NotificationChangeDelete builder.
func (ncd *NotificationChangeDelete) Where(ps ...predicate.NotificationChange) *NotificationChangeDelete {
	ncd.mutation.Where(ps...)
	return ncd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (ncd *NotificationChangeDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, ncd.sqlExec, ncd.mutation, ncd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (ncd *NotificationChangeDelete) ExecX(ctx context.Context) int {
	n, err := ncd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (ncd *NotificationChangeDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(notificationchange.Table, sqlgraph.NewFieldSpec(notificationchange.FieldID, field.TypeInt))
	if ps := ncd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, ncd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	ncd.mutation.done = true
	return affected, err
}

// NotificationChangeDeleteOne is the builder for deleting a single NotificationChange entity.
type NotificationChangeDeleteOne struct {
	ncd *NotificationChangeDelete
}

// Where appends a list predicates to the NotificationChangeDelete builder.
func (ncdo *NotificationChangeDeleteOne) Where(ps ...predicate.NotificationChange) *NotificationChangeDeleteOne {
	ncdo.ncd.mutation.Where(ps...)
	return ncdo
}

// Exec executes the deletion query.
func (ncdo *NotificationChangeDeleteOne) Exec(ctx context.Context) error {
	n, err := ncdo.ncd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{notificationchange.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (ncdo *NotificationChangeDeleteOne) ExecX(ctx context.Context) {
	if err := ncdo.Exec(ctx); err != nil {
		panic(err)
	}
}
