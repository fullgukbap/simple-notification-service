// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"notification-service/ent/entitytype"
	"notification-service/ent/friendship"
	"notification-service/ent/friendshipstatus"
	"notification-service/ent/notification"
	"notification-service/ent/notificationchange"
	"notification-service/ent/notificationobject"
	"notification-service/ent/predicate"
	"notification-service/ent/user"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeEntityType         = "EntityType"
	TypeFriendship         = "Friendship"
	TypeFriendshipStatus   = "FriendshipStatus"
	TypeNotification       = "Notification"
	TypeNotificationChange = "NotificationChange"
	TypeNotificationObject = "NotificationObject"
	TypeUser               = "User"
)

// EntityTypeMutation represents an operation that mutates the EntityType nodes in the graph.
type EntityTypeMutation struct {
	config
	op                         Op
	typ                        string
	id                         *int
	created_at                 *time.Time
	updated_at                 *time.Time
	deleted_at                 *time.Time
	entityName                 *string
	notificationDescription    *string
	clearedFields              map[string]struct{}
	notificationObjects        map[int]struct{}
	removednotificationObjects map[int]struct{}
	clearednotificationObjects bool
	done                       bool
	oldValue                   func(context.Context) (*EntityType, error)
	predicates                 []predicate.EntityType
}

var _ ent.Mutation = (*EntityTypeMutation)(nil)

// entitytypeOption allows management of the mutation configuration using functional options.
type entitytypeOption func(*EntityTypeMutation)

// newEntityTypeMutation creates new mutation for the EntityType entity.
func newEntityTypeMutation(c config, op Op, opts ...entitytypeOption) *EntityTypeMutation {
	m := &EntityTypeMutation{
		config:        c,
		op:            op,
		typ:           TypeEntityType,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withEntityTypeID sets the ID field of the mutation.
func withEntityTypeID(id int) entitytypeOption {
	return func(m *EntityTypeMutation) {
		var (
			err   error
			once  sync.Once
			value *EntityType
		)
		m.oldValue = func(ctx context.Context) (*EntityType, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().EntityType.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withEntityType sets the old EntityType of the mutation.
func withEntityType(node *EntityType) entitytypeOption {
	return func(m *EntityTypeMutation) {
		m.oldValue = func(context.Context) (*EntityType, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m EntityTypeMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m EntityTypeMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *EntityTypeMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *EntityTypeMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().EntityType.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *EntityTypeMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *EntityTypeMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the EntityType entity.
// If the EntityType object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EntityTypeMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *EntityTypeMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *EntityTypeMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *EntityTypeMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the EntityType entity.
// If the EntityType object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EntityTypeMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *EntityTypeMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetDeletedAt sets the "deleted_at" field.
func (m *EntityTypeMutation) SetDeletedAt(t time.Time) {
	m.deleted_at = &t
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *EntityTypeMutation) DeletedAt() (r time.Time, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the EntityType entity.
// If the EntityType object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EntityTypeMutation) OldDeletedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (m *EntityTypeMutation) ClearDeletedAt() {
	m.deleted_at = nil
	m.clearedFields[entitytype.FieldDeletedAt] = struct{}{}
}

// DeletedAtCleared returns if the "deleted_at" field was cleared in this mutation.
func (m *EntityTypeMutation) DeletedAtCleared() bool {
	_, ok := m.clearedFields[entitytype.FieldDeletedAt]
	return ok
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *EntityTypeMutation) ResetDeletedAt() {
	m.deleted_at = nil
	delete(m.clearedFields, entitytype.FieldDeletedAt)
}

// SetEntityName sets the "entityName" field.
func (m *EntityTypeMutation) SetEntityName(s string) {
	m.entityName = &s
}

// EntityName returns the value of the "entityName" field in the mutation.
func (m *EntityTypeMutation) EntityName() (r string, exists bool) {
	v := m.entityName
	if v == nil {
		return
	}
	return *v, true
}

// OldEntityName returns the old "entityName" field's value of the EntityType entity.
// If the EntityType object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EntityTypeMutation) OldEntityName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEntityName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEntityName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEntityName: %w", err)
	}
	return oldValue.EntityName, nil
}

// ResetEntityName resets all changes to the "entityName" field.
func (m *EntityTypeMutation) ResetEntityName() {
	m.entityName = nil
}

// SetNotificationDescription sets the "notificationDescription" field.
func (m *EntityTypeMutation) SetNotificationDescription(s string) {
	m.notificationDescription = &s
}

// NotificationDescription returns the value of the "notificationDescription" field in the mutation.
func (m *EntityTypeMutation) NotificationDescription() (r string, exists bool) {
	v := m.notificationDescription
	if v == nil {
		return
	}
	return *v, true
}

// OldNotificationDescription returns the old "notificationDescription" field's value of the EntityType entity.
// If the EntityType object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EntityTypeMutation) OldNotificationDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldNotificationDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldNotificationDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNotificationDescription: %w", err)
	}
	return oldValue.NotificationDescription, nil
}

// ResetNotificationDescription resets all changes to the "notificationDescription" field.
func (m *EntityTypeMutation) ResetNotificationDescription() {
	m.notificationDescription = nil
}

// AddNotificationObjectIDs adds the "notificationObjects" edge to the NotificationObject entity by ids.
func (m *EntityTypeMutation) AddNotificationObjectIDs(ids ...int) {
	if m.notificationObjects == nil {
		m.notificationObjects = make(map[int]struct{})
	}
	for i := range ids {
		m.notificationObjects[ids[i]] = struct{}{}
	}
}

// ClearNotificationObjects clears the "notificationObjects" edge to the NotificationObject entity.
func (m *EntityTypeMutation) ClearNotificationObjects() {
	m.clearednotificationObjects = true
}

// NotificationObjectsCleared reports if the "notificationObjects" edge to the NotificationObject entity was cleared.
func (m *EntityTypeMutation) NotificationObjectsCleared() bool {
	return m.clearednotificationObjects
}

// RemoveNotificationObjectIDs removes the "notificationObjects" edge to the NotificationObject entity by IDs.
func (m *EntityTypeMutation) RemoveNotificationObjectIDs(ids ...int) {
	if m.removednotificationObjects == nil {
		m.removednotificationObjects = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.notificationObjects, ids[i])
		m.removednotificationObjects[ids[i]] = struct{}{}
	}
}

// RemovedNotificationObjects returns the removed IDs of the "notificationObjects" edge to the NotificationObject entity.
func (m *EntityTypeMutation) RemovedNotificationObjectsIDs() (ids []int) {
	for id := range m.removednotificationObjects {
		ids = append(ids, id)
	}
	return
}

// NotificationObjectsIDs returns the "notificationObjects" edge IDs in the mutation.
func (m *EntityTypeMutation) NotificationObjectsIDs() (ids []int) {
	for id := range m.notificationObjects {
		ids = append(ids, id)
	}
	return
}

// ResetNotificationObjects resets all changes to the "notificationObjects" edge.
func (m *EntityTypeMutation) ResetNotificationObjects() {
	m.notificationObjects = nil
	m.clearednotificationObjects = false
	m.removednotificationObjects = nil
}

// Where appends a list predicates to the EntityTypeMutation builder.
func (m *EntityTypeMutation) Where(ps ...predicate.EntityType) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the EntityTypeMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *EntityTypeMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.EntityType, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *EntityTypeMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *EntityTypeMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (EntityType).
func (m *EntityTypeMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *EntityTypeMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.created_at != nil {
		fields = append(fields, entitytype.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, entitytype.FieldUpdatedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, entitytype.FieldDeletedAt)
	}
	if m.entityName != nil {
		fields = append(fields, entitytype.FieldEntityName)
	}
	if m.notificationDescription != nil {
		fields = append(fields, entitytype.FieldNotificationDescription)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *EntityTypeMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case entitytype.FieldCreatedAt:
		return m.CreatedAt()
	case entitytype.FieldUpdatedAt:
		return m.UpdatedAt()
	case entitytype.FieldDeletedAt:
		return m.DeletedAt()
	case entitytype.FieldEntityName:
		return m.EntityName()
	case entitytype.FieldNotificationDescription:
		return m.NotificationDescription()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *EntityTypeMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case entitytype.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case entitytype.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case entitytype.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case entitytype.FieldEntityName:
		return m.OldEntityName(ctx)
	case entitytype.FieldNotificationDescription:
		return m.OldNotificationDescription(ctx)
	}
	return nil, fmt.Errorf("unknown EntityType field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *EntityTypeMutation) SetField(name string, value ent.Value) error {
	switch name {
	case entitytype.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case entitytype.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case entitytype.FieldDeletedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case entitytype.FieldEntityName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEntityName(v)
		return nil
	case entitytype.FieldNotificationDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNotificationDescription(v)
		return nil
	}
	return fmt.Errorf("unknown EntityType field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *EntityTypeMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *EntityTypeMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *EntityTypeMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown EntityType numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *EntityTypeMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(entitytype.FieldDeletedAt) {
		fields = append(fields, entitytype.FieldDeletedAt)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *EntityTypeMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *EntityTypeMutation) ClearField(name string) error {
	switch name {
	case entitytype.FieldDeletedAt:
		m.ClearDeletedAt()
		return nil
	}
	return fmt.Errorf("unknown EntityType nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *EntityTypeMutation) ResetField(name string) error {
	switch name {
	case entitytype.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case entitytype.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case entitytype.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case entitytype.FieldEntityName:
		m.ResetEntityName()
		return nil
	case entitytype.FieldNotificationDescription:
		m.ResetNotificationDescription()
		return nil
	}
	return fmt.Errorf("unknown EntityType field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *EntityTypeMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.notificationObjects != nil {
		edges = append(edges, entitytype.EdgeNotificationObjects)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *EntityTypeMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case entitytype.EdgeNotificationObjects:
		ids := make([]ent.Value, 0, len(m.notificationObjects))
		for id := range m.notificationObjects {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *EntityTypeMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removednotificationObjects != nil {
		edges = append(edges, entitytype.EdgeNotificationObjects)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *EntityTypeMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case entitytype.EdgeNotificationObjects:
		ids := make([]ent.Value, 0, len(m.removednotificationObjects))
		for id := range m.removednotificationObjects {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *EntityTypeMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearednotificationObjects {
		edges = append(edges, entitytype.EdgeNotificationObjects)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *EntityTypeMutation) EdgeCleared(name string) bool {
	switch name {
	case entitytype.EdgeNotificationObjects:
		return m.clearednotificationObjects
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *EntityTypeMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown EntityType unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *EntityTypeMutation) ResetEdge(name string) error {
	switch name {
	case entitytype.EdgeNotificationObjects:
		m.ResetNotificationObjects()
		return nil
	}
	return fmt.Errorf("unknown EntityType edge %s", name)
}

// FriendshipMutation represents an operation that mutates the Friendship nodes in the graph.
type FriendshipMutation struct {
	config
	op                      Op
	typ                     string
	id                      *int
	created_at              *time.Time
	updated_at              *time.Time
	deleted_at              *time.Time
	clearedFields           map[string]struct{}
	sender                  *int
	clearedsender           bool
	receiver                *int
	clearedreceiver         bool
	friendshipStatus        *int
	clearedfriendshipStatus bool
	done                    bool
	oldValue                func(context.Context) (*Friendship, error)
	predicates              []predicate.Friendship
}

var _ ent.Mutation = (*FriendshipMutation)(nil)

// friendshipOption allows management of the mutation configuration using functional options.
type friendshipOption func(*FriendshipMutation)

// newFriendshipMutation creates new mutation for the Friendship entity.
func newFriendshipMutation(c config, op Op, opts ...friendshipOption) *FriendshipMutation {
	m := &FriendshipMutation{
		config:        c,
		op:            op,
		typ:           TypeFriendship,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withFriendshipID sets the ID field of the mutation.
func withFriendshipID(id int) friendshipOption {
	return func(m *FriendshipMutation) {
		var (
			err   error
			once  sync.Once
			value *Friendship
		)
		m.oldValue = func(ctx context.Context) (*Friendship, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Friendship.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withFriendship sets the old Friendship of the mutation.
func withFriendship(node *Friendship) friendshipOption {
	return func(m *FriendshipMutation) {
		m.oldValue = func(context.Context) (*Friendship, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m FriendshipMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m FriendshipMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *FriendshipMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *FriendshipMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Friendship.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *FriendshipMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *FriendshipMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Friendship entity.
// If the Friendship object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FriendshipMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *FriendshipMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *FriendshipMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *FriendshipMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Friendship entity.
// If the Friendship object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FriendshipMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *FriendshipMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetDeletedAt sets the "deleted_at" field.
func (m *FriendshipMutation) SetDeletedAt(t time.Time) {
	m.deleted_at = &t
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *FriendshipMutation) DeletedAt() (r time.Time, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the Friendship entity.
// If the Friendship object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FriendshipMutation) OldDeletedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (m *FriendshipMutation) ClearDeletedAt() {
	m.deleted_at = nil
	m.clearedFields[friendship.FieldDeletedAt] = struct{}{}
}

// DeletedAtCleared returns if the "deleted_at" field was cleared in this mutation.
func (m *FriendshipMutation) DeletedAtCleared() bool {
	_, ok := m.clearedFields[friendship.FieldDeletedAt]
	return ok
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *FriendshipMutation) ResetDeletedAt() {
	m.deleted_at = nil
	delete(m.clearedFields, friendship.FieldDeletedAt)
}

// SetSenderID sets the "sender" edge to the User entity by id.
func (m *FriendshipMutation) SetSenderID(id int) {
	m.sender = &id
}

// ClearSender clears the "sender" edge to the User entity.
func (m *FriendshipMutation) ClearSender() {
	m.clearedsender = true
}

// SenderCleared reports if the "sender" edge to the User entity was cleared.
func (m *FriendshipMutation) SenderCleared() bool {
	return m.clearedsender
}

// SenderID returns the "sender" edge ID in the mutation.
func (m *FriendshipMutation) SenderID() (id int, exists bool) {
	if m.sender != nil {
		return *m.sender, true
	}
	return
}

// SenderIDs returns the "sender" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// SenderID instead. It exists only for internal usage by the builders.
func (m *FriendshipMutation) SenderIDs() (ids []int) {
	if id := m.sender; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetSender resets all changes to the "sender" edge.
func (m *FriendshipMutation) ResetSender() {
	m.sender = nil
	m.clearedsender = false
}

// SetReceiverID sets the "receiver" edge to the User entity by id.
func (m *FriendshipMutation) SetReceiverID(id int) {
	m.receiver = &id
}

// ClearReceiver clears the "receiver" edge to the User entity.
func (m *FriendshipMutation) ClearReceiver() {
	m.clearedreceiver = true
}

// ReceiverCleared reports if the "receiver" edge to the User entity was cleared.
func (m *FriendshipMutation) ReceiverCleared() bool {
	return m.clearedreceiver
}

// ReceiverID returns the "receiver" edge ID in the mutation.
func (m *FriendshipMutation) ReceiverID() (id int, exists bool) {
	if m.receiver != nil {
		return *m.receiver, true
	}
	return
}

// ReceiverIDs returns the "receiver" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ReceiverID instead. It exists only for internal usage by the builders.
func (m *FriendshipMutation) ReceiverIDs() (ids []int) {
	if id := m.receiver; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetReceiver resets all changes to the "receiver" edge.
func (m *FriendshipMutation) ResetReceiver() {
	m.receiver = nil
	m.clearedreceiver = false
}

// SetFriendshipStatusID sets the "friendshipStatus" edge to the FriendshipStatus entity by id.
func (m *FriendshipMutation) SetFriendshipStatusID(id int) {
	m.friendshipStatus = &id
}

// ClearFriendshipStatus clears the "friendshipStatus" edge to the FriendshipStatus entity.
func (m *FriendshipMutation) ClearFriendshipStatus() {
	m.clearedfriendshipStatus = true
}

// FriendshipStatusCleared reports if the "friendshipStatus" edge to the FriendshipStatus entity was cleared.
func (m *FriendshipMutation) FriendshipStatusCleared() bool {
	return m.clearedfriendshipStatus
}

// FriendshipStatusID returns the "friendshipStatus" edge ID in the mutation.
func (m *FriendshipMutation) FriendshipStatusID() (id int, exists bool) {
	if m.friendshipStatus != nil {
		return *m.friendshipStatus, true
	}
	return
}

// FriendshipStatusIDs returns the "friendshipStatus" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// FriendshipStatusID instead. It exists only for internal usage by the builders.
func (m *FriendshipMutation) FriendshipStatusIDs() (ids []int) {
	if id := m.friendshipStatus; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetFriendshipStatus resets all changes to the "friendshipStatus" edge.
func (m *FriendshipMutation) ResetFriendshipStatus() {
	m.friendshipStatus = nil
	m.clearedfriendshipStatus = false
}

// Where appends a list predicates to the FriendshipMutation builder.
func (m *FriendshipMutation) Where(ps ...predicate.Friendship) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the FriendshipMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *FriendshipMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Friendship, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *FriendshipMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *FriendshipMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Friendship).
func (m *FriendshipMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *FriendshipMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.created_at != nil {
		fields = append(fields, friendship.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, friendship.FieldUpdatedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, friendship.FieldDeletedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *FriendshipMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case friendship.FieldCreatedAt:
		return m.CreatedAt()
	case friendship.FieldUpdatedAt:
		return m.UpdatedAt()
	case friendship.FieldDeletedAt:
		return m.DeletedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *FriendshipMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case friendship.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case friendship.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case friendship.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Friendship field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *FriendshipMutation) SetField(name string, value ent.Value) error {
	switch name {
	case friendship.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case friendship.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case friendship.FieldDeletedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Friendship field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *FriendshipMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *FriendshipMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *FriendshipMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Friendship numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *FriendshipMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(friendship.FieldDeletedAt) {
		fields = append(fields, friendship.FieldDeletedAt)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *FriendshipMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *FriendshipMutation) ClearField(name string) error {
	switch name {
	case friendship.FieldDeletedAt:
		m.ClearDeletedAt()
		return nil
	}
	return fmt.Errorf("unknown Friendship nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *FriendshipMutation) ResetField(name string) error {
	switch name {
	case friendship.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case friendship.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case friendship.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	}
	return fmt.Errorf("unknown Friendship field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *FriendshipMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m.sender != nil {
		edges = append(edges, friendship.EdgeSender)
	}
	if m.receiver != nil {
		edges = append(edges, friendship.EdgeReceiver)
	}
	if m.friendshipStatus != nil {
		edges = append(edges, friendship.EdgeFriendshipStatus)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *FriendshipMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case friendship.EdgeSender:
		if id := m.sender; id != nil {
			return []ent.Value{*id}
		}
	case friendship.EdgeReceiver:
		if id := m.receiver; id != nil {
			return []ent.Value{*id}
		}
	case friendship.EdgeFriendshipStatus:
		if id := m.friendshipStatus; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *FriendshipMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *FriendshipMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *FriendshipMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	if m.clearedsender {
		edges = append(edges, friendship.EdgeSender)
	}
	if m.clearedreceiver {
		edges = append(edges, friendship.EdgeReceiver)
	}
	if m.clearedfriendshipStatus {
		edges = append(edges, friendship.EdgeFriendshipStatus)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *FriendshipMutation) EdgeCleared(name string) bool {
	switch name {
	case friendship.EdgeSender:
		return m.clearedsender
	case friendship.EdgeReceiver:
		return m.clearedreceiver
	case friendship.EdgeFriendshipStatus:
		return m.clearedfriendshipStatus
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *FriendshipMutation) ClearEdge(name string) error {
	switch name {
	case friendship.EdgeSender:
		m.ClearSender()
		return nil
	case friendship.EdgeReceiver:
		m.ClearReceiver()
		return nil
	case friendship.EdgeFriendshipStatus:
		m.ClearFriendshipStatus()
		return nil
	}
	return fmt.Errorf("unknown Friendship unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *FriendshipMutation) ResetEdge(name string) error {
	switch name {
	case friendship.EdgeSender:
		m.ResetSender()
		return nil
	case friendship.EdgeReceiver:
		m.ResetReceiver()
		return nil
	case friendship.EdgeFriendshipStatus:
		m.ResetFriendshipStatus()
		return nil
	}
	return fmt.Errorf("unknown Friendship edge %s", name)
}

// FriendshipStatusMutation represents an operation that mutates the FriendshipStatus nodes in the graph.
type FriendshipStatusMutation struct {
	config
	op                 Op
	typ                string
	id                 *int
	created_at         *time.Time
	updated_at         *time.Time
	deleted_at         *time.Time
	description        *string
	clearedFields      map[string]struct{}
	friendships        map[int]struct{}
	removedfriendships map[int]struct{}
	clearedfriendships bool
	done               bool
	oldValue           func(context.Context) (*FriendshipStatus, error)
	predicates         []predicate.FriendshipStatus
}

var _ ent.Mutation = (*FriendshipStatusMutation)(nil)

// friendshipstatusOption allows management of the mutation configuration using functional options.
type friendshipstatusOption func(*FriendshipStatusMutation)

// newFriendshipStatusMutation creates new mutation for the FriendshipStatus entity.
func newFriendshipStatusMutation(c config, op Op, opts ...friendshipstatusOption) *FriendshipStatusMutation {
	m := &FriendshipStatusMutation{
		config:        c,
		op:            op,
		typ:           TypeFriendshipStatus,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withFriendshipStatusID sets the ID field of the mutation.
func withFriendshipStatusID(id int) friendshipstatusOption {
	return func(m *FriendshipStatusMutation) {
		var (
			err   error
			once  sync.Once
			value *FriendshipStatus
		)
		m.oldValue = func(ctx context.Context) (*FriendshipStatus, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().FriendshipStatus.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withFriendshipStatus sets the old FriendshipStatus of the mutation.
func withFriendshipStatus(node *FriendshipStatus) friendshipstatusOption {
	return func(m *FriendshipStatusMutation) {
		m.oldValue = func(context.Context) (*FriendshipStatus, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m FriendshipStatusMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m FriendshipStatusMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *FriendshipStatusMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *FriendshipStatusMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().FriendshipStatus.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *FriendshipStatusMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *FriendshipStatusMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the FriendshipStatus entity.
// If the FriendshipStatus object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FriendshipStatusMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *FriendshipStatusMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *FriendshipStatusMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *FriendshipStatusMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the FriendshipStatus entity.
// If the FriendshipStatus object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FriendshipStatusMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *FriendshipStatusMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetDeletedAt sets the "deleted_at" field.
func (m *FriendshipStatusMutation) SetDeletedAt(t time.Time) {
	m.deleted_at = &t
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *FriendshipStatusMutation) DeletedAt() (r time.Time, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the FriendshipStatus entity.
// If the FriendshipStatus object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FriendshipStatusMutation) OldDeletedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (m *FriendshipStatusMutation) ClearDeletedAt() {
	m.deleted_at = nil
	m.clearedFields[friendshipstatus.FieldDeletedAt] = struct{}{}
}

// DeletedAtCleared returns if the "deleted_at" field was cleared in this mutation.
func (m *FriendshipStatusMutation) DeletedAtCleared() bool {
	_, ok := m.clearedFields[friendshipstatus.FieldDeletedAt]
	return ok
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *FriendshipStatusMutation) ResetDeletedAt() {
	m.deleted_at = nil
	delete(m.clearedFields, friendshipstatus.FieldDeletedAt)
}

// SetDescription sets the "description" field.
func (m *FriendshipStatusMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *FriendshipStatusMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the FriendshipStatus entity.
// If the FriendshipStatus object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FriendshipStatusMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ResetDescription resets all changes to the "description" field.
func (m *FriendshipStatusMutation) ResetDescription() {
	m.description = nil
}

// AddFriendshipIDs adds the "friendships" edge to the Friendship entity by ids.
func (m *FriendshipStatusMutation) AddFriendshipIDs(ids ...int) {
	if m.friendships == nil {
		m.friendships = make(map[int]struct{})
	}
	for i := range ids {
		m.friendships[ids[i]] = struct{}{}
	}
}

// ClearFriendships clears the "friendships" edge to the Friendship entity.
func (m *FriendshipStatusMutation) ClearFriendships() {
	m.clearedfriendships = true
}

// FriendshipsCleared reports if the "friendships" edge to the Friendship entity was cleared.
func (m *FriendshipStatusMutation) FriendshipsCleared() bool {
	return m.clearedfriendships
}

// RemoveFriendshipIDs removes the "friendships" edge to the Friendship entity by IDs.
func (m *FriendshipStatusMutation) RemoveFriendshipIDs(ids ...int) {
	if m.removedfriendships == nil {
		m.removedfriendships = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.friendships, ids[i])
		m.removedfriendships[ids[i]] = struct{}{}
	}
}

// RemovedFriendships returns the removed IDs of the "friendships" edge to the Friendship entity.
func (m *FriendshipStatusMutation) RemovedFriendshipsIDs() (ids []int) {
	for id := range m.removedfriendships {
		ids = append(ids, id)
	}
	return
}

// FriendshipsIDs returns the "friendships" edge IDs in the mutation.
func (m *FriendshipStatusMutation) FriendshipsIDs() (ids []int) {
	for id := range m.friendships {
		ids = append(ids, id)
	}
	return
}

// ResetFriendships resets all changes to the "friendships" edge.
func (m *FriendshipStatusMutation) ResetFriendships() {
	m.friendships = nil
	m.clearedfriendships = false
	m.removedfriendships = nil
}

// Where appends a list predicates to the FriendshipStatusMutation builder.
func (m *FriendshipStatusMutation) Where(ps ...predicate.FriendshipStatus) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the FriendshipStatusMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *FriendshipStatusMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.FriendshipStatus, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *FriendshipStatusMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *FriendshipStatusMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (FriendshipStatus).
func (m *FriendshipStatusMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *FriendshipStatusMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.created_at != nil {
		fields = append(fields, friendshipstatus.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, friendshipstatus.FieldUpdatedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, friendshipstatus.FieldDeletedAt)
	}
	if m.description != nil {
		fields = append(fields, friendshipstatus.FieldDescription)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *FriendshipStatusMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case friendshipstatus.FieldCreatedAt:
		return m.CreatedAt()
	case friendshipstatus.FieldUpdatedAt:
		return m.UpdatedAt()
	case friendshipstatus.FieldDeletedAt:
		return m.DeletedAt()
	case friendshipstatus.FieldDescription:
		return m.Description()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *FriendshipStatusMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case friendshipstatus.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case friendshipstatus.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case friendshipstatus.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case friendshipstatus.FieldDescription:
		return m.OldDescription(ctx)
	}
	return nil, fmt.Errorf("unknown FriendshipStatus field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *FriendshipStatusMutation) SetField(name string, value ent.Value) error {
	switch name {
	case friendshipstatus.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case friendshipstatus.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case friendshipstatus.FieldDeletedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case friendshipstatus.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	}
	return fmt.Errorf("unknown FriendshipStatus field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *FriendshipStatusMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *FriendshipStatusMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *FriendshipStatusMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown FriendshipStatus numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *FriendshipStatusMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(friendshipstatus.FieldDeletedAt) {
		fields = append(fields, friendshipstatus.FieldDeletedAt)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *FriendshipStatusMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *FriendshipStatusMutation) ClearField(name string) error {
	switch name {
	case friendshipstatus.FieldDeletedAt:
		m.ClearDeletedAt()
		return nil
	}
	return fmt.Errorf("unknown FriendshipStatus nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *FriendshipStatusMutation) ResetField(name string) error {
	switch name {
	case friendshipstatus.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case friendshipstatus.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case friendshipstatus.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case friendshipstatus.FieldDescription:
		m.ResetDescription()
		return nil
	}
	return fmt.Errorf("unknown FriendshipStatus field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *FriendshipStatusMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.friendships != nil {
		edges = append(edges, friendshipstatus.EdgeFriendships)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *FriendshipStatusMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case friendshipstatus.EdgeFriendships:
		ids := make([]ent.Value, 0, len(m.friendships))
		for id := range m.friendships {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *FriendshipStatusMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedfriendships != nil {
		edges = append(edges, friendshipstatus.EdgeFriendships)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *FriendshipStatusMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case friendshipstatus.EdgeFriendships:
		ids := make([]ent.Value, 0, len(m.removedfriendships))
		for id := range m.removedfriendships {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *FriendshipStatusMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedfriendships {
		edges = append(edges, friendshipstatus.EdgeFriendships)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *FriendshipStatusMutation) EdgeCleared(name string) bool {
	switch name {
	case friendshipstatus.EdgeFriendships:
		return m.clearedfriendships
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *FriendshipStatusMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown FriendshipStatus unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *FriendshipStatusMutation) ResetEdge(name string) error {
	switch name {
	case friendshipstatus.EdgeFriendships:
		m.ResetFriendships()
		return nil
	}
	return fmt.Errorf("unknown FriendshipStatus edge %s", name)
}

// NotificationMutation represents an operation that mutates the Notification nodes in the graph.
type NotificationMutation struct {
	config
	op                        Op
	typ                       string
	id                        *int
	created_at                *time.Time
	updated_at                *time.Time
	deleted_at                *time.Time
	isRead                    *bool
	clearedFields             map[string]struct{}
	notificationObject        *int
	clearednotificationObject bool
	notifier                  *int
	clearednotifier           bool
	done                      bool
	oldValue                  func(context.Context) (*Notification, error)
	predicates                []predicate.Notification
}

var _ ent.Mutation = (*NotificationMutation)(nil)

// notificationOption allows management of the mutation configuration using functional options.
type notificationOption func(*NotificationMutation)

// newNotificationMutation creates new mutation for the Notification entity.
func newNotificationMutation(c config, op Op, opts ...notificationOption) *NotificationMutation {
	m := &NotificationMutation{
		config:        c,
		op:            op,
		typ:           TypeNotification,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withNotificationID sets the ID field of the mutation.
func withNotificationID(id int) notificationOption {
	return func(m *NotificationMutation) {
		var (
			err   error
			once  sync.Once
			value *Notification
		)
		m.oldValue = func(ctx context.Context) (*Notification, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Notification.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withNotification sets the old Notification of the mutation.
func withNotification(node *Notification) notificationOption {
	return func(m *NotificationMutation) {
		m.oldValue = func(context.Context) (*Notification, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m NotificationMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m NotificationMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *NotificationMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *NotificationMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Notification.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *NotificationMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *NotificationMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Notification entity.
// If the Notification object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NotificationMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *NotificationMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *NotificationMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *NotificationMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Notification entity.
// If the Notification object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NotificationMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *NotificationMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetDeletedAt sets the "deleted_at" field.
func (m *NotificationMutation) SetDeletedAt(t time.Time) {
	m.deleted_at = &t
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *NotificationMutation) DeletedAt() (r time.Time, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the Notification entity.
// If the Notification object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NotificationMutation) OldDeletedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (m *NotificationMutation) ClearDeletedAt() {
	m.deleted_at = nil
	m.clearedFields[notification.FieldDeletedAt] = struct{}{}
}

// DeletedAtCleared returns if the "deleted_at" field was cleared in this mutation.
func (m *NotificationMutation) DeletedAtCleared() bool {
	_, ok := m.clearedFields[notification.FieldDeletedAt]
	return ok
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *NotificationMutation) ResetDeletedAt() {
	m.deleted_at = nil
	delete(m.clearedFields, notification.FieldDeletedAt)
}

// SetIsRead sets the "isRead" field.
func (m *NotificationMutation) SetIsRead(b bool) {
	m.isRead = &b
}

// IsRead returns the value of the "isRead" field in the mutation.
func (m *NotificationMutation) IsRead() (r bool, exists bool) {
	v := m.isRead
	if v == nil {
		return
	}
	return *v, true
}

// OldIsRead returns the old "isRead" field's value of the Notification entity.
// If the Notification object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NotificationMutation) OldIsRead(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsRead is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsRead requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsRead: %w", err)
	}
	return oldValue.IsRead, nil
}

// ResetIsRead resets all changes to the "isRead" field.
func (m *NotificationMutation) ResetIsRead() {
	m.isRead = nil
}

// SetNotificationObjectID sets the "notificationObject" edge to the NotificationObject entity by id.
func (m *NotificationMutation) SetNotificationObjectID(id int) {
	m.notificationObject = &id
}

// ClearNotificationObject clears the "notificationObject" edge to the NotificationObject entity.
func (m *NotificationMutation) ClearNotificationObject() {
	m.clearednotificationObject = true
}

// NotificationObjectCleared reports if the "notificationObject" edge to the NotificationObject entity was cleared.
func (m *NotificationMutation) NotificationObjectCleared() bool {
	return m.clearednotificationObject
}

// NotificationObjectID returns the "notificationObject" edge ID in the mutation.
func (m *NotificationMutation) NotificationObjectID() (id int, exists bool) {
	if m.notificationObject != nil {
		return *m.notificationObject, true
	}
	return
}

// NotificationObjectIDs returns the "notificationObject" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// NotificationObjectID instead. It exists only for internal usage by the builders.
func (m *NotificationMutation) NotificationObjectIDs() (ids []int) {
	if id := m.notificationObject; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetNotificationObject resets all changes to the "notificationObject" edge.
func (m *NotificationMutation) ResetNotificationObject() {
	m.notificationObject = nil
	m.clearednotificationObject = false
}

// SetNotifierID sets the "notifier" edge to the User entity by id.
func (m *NotificationMutation) SetNotifierID(id int) {
	m.notifier = &id
}

// ClearNotifier clears the "notifier" edge to the User entity.
func (m *NotificationMutation) ClearNotifier() {
	m.clearednotifier = true
}

// NotifierCleared reports if the "notifier" edge to the User entity was cleared.
func (m *NotificationMutation) NotifierCleared() bool {
	return m.clearednotifier
}

// NotifierID returns the "notifier" edge ID in the mutation.
func (m *NotificationMutation) NotifierID() (id int, exists bool) {
	if m.notifier != nil {
		return *m.notifier, true
	}
	return
}

// NotifierIDs returns the "notifier" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// NotifierID instead. It exists only for internal usage by the builders.
func (m *NotificationMutation) NotifierIDs() (ids []int) {
	if id := m.notifier; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetNotifier resets all changes to the "notifier" edge.
func (m *NotificationMutation) ResetNotifier() {
	m.notifier = nil
	m.clearednotifier = false
}

// Where appends a list predicates to the NotificationMutation builder.
func (m *NotificationMutation) Where(ps ...predicate.Notification) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the NotificationMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *NotificationMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Notification, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *NotificationMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *NotificationMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Notification).
func (m *NotificationMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *NotificationMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.created_at != nil {
		fields = append(fields, notification.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, notification.FieldUpdatedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, notification.FieldDeletedAt)
	}
	if m.isRead != nil {
		fields = append(fields, notification.FieldIsRead)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *NotificationMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case notification.FieldCreatedAt:
		return m.CreatedAt()
	case notification.FieldUpdatedAt:
		return m.UpdatedAt()
	case notification.FieldDeletedAt:
		return m.DeletedAt()
	case notification.FieldIsRead:
		return m.IsRead()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *NotificationMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case notification.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case notification.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case notification.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case notification.FieldIsRead:
		return m.OldIsRead(ctx)
	}
	return nil, fmt.Errorf("unknown Notification field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *NotificationMutation) SetField(name string, value ent.Value) error {
	switch name {
	case notification.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case notification.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case notification.FieldDeletedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case notification.FieldIsRead:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsRead(v)
		return nil
	}
	return fmt.Errorf("unknown Notification field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *NotificationMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *NotificationMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *NotificationMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Notification numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *NotificationMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(notification.FieldDeletedAt) {
		fields = append(fields, notification.FieldDeletedAt)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *NotificationMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *NotificationMutation) ClearField(name string) error {
	switch name {
	case notification.FieldDeletedAt:
		m.ClearDeletedAt()
		return nil
	}
	return fmt.Errorf("unknown Notification nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *NotificationMutation) ResetField(name string) error {
	switch name {
	case notification.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case notification.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case notification.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case notification.FieldIsRead:
		m.ResetIsRead()
		return nil
	}
	return fmt.Errorf("unknown Notification field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *NotificationMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.notificationObject != nil {
		edges = append(edges, notification.EdgeNotificationObject)
	}
	if m.notifier != nil {
		edges = append(edges, notification.EdgeNotifier)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *NotificationMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case notification.EdgeNotificationObject:
		if id := m.notificationObject; id != nil {
			return []ent.Value{*id}
		}
	case notification.EdgeNotifier:
		if id := m.notifier; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *NotificationMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *NotificationMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *NotificationMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearednotificationObject {
		edges = append(edges, notification.EdgeNotificationObject)
	}
	if m.clearednotifier {
		edges = append(edges, notification.EdgeNotifier)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *NotificationMutation) EdgeCleared(name string) bool {
	switch name {
	case notification.EdgeNotificationObject:
		return m.clearednotificationObject
	case notification.EdgeNotifier:
		return m.clearednotifier
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *NotificationMutation) ClearEdge(name string) error {
	switch name {
	case notification.EdgeNotificationObject:
		m.ClearNotificationObject()
		return nil
	case notification.EdgeNotifier:
		m.ClearNotifier()
		return nil
	}
	return fmt.Errorf("unknown Notification unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *NotificationMutation) ResetEdge(name string) error {
	switch name {
	case notification.EdgeNotificationObject:
		m.ResetNotificationObject()
		return nil
	case notification.EdgeNotifier:
		m.ResetNotifier()
		return nil
	}
	return fmt.Errorf("unknown Notification edge %s", name)
}

// NotificationChangeMutation represents an operation that mutates the NotificationChange nodes in the graph.
type NotificationChangeMutation struct {
	config
	op                        Op
	typ                       string
	id                        *int
	created_at                *time.Time
	updated_at                *time.Time
	deleted_at                *time.Time
	clearedFields             map[string]struct{}
	actor                     *int
	clearedactor              bool
	notificationObject        *int
	clearednotificationObject bool
	done                      bool
	oldValue                  func(context.Context) (*NotificationChange, error)
	predicates                []predicate.NotificationChange
}

var _ ent.Mutation = (*NotificationChangeMutation)(nil)

// notificationchangeOption allows management of the mutation configuration using functional options.
type notificationchangeOption func(*NotificationChangeMutation)

// newNotificationChangeMutation creates new mutation for the NotificationChange entity.
func newNotificationChangeMutation(c config, op Op, opts ...notificationchangeOption) *NotificationChangeMutation {
	m := &NotificationChangeMutation{
		config:        c,
		op:            op,
		typ:           TypeNotificationChange,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withNotificationChangeID sets the ID field of the mutation.
func withNotificationChangeID(id int) notificationchangeOption {
	return func(m *NotificationChangeMutation) {
		var (
			err   error
			once  sync.Once
			value *NotificationChange
		)
		m.oldValue = func(ctx context.Context) (*NotificationChange, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().NotificationChange.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withNotificationChange sets the old NotificationChange of the mutation.
func withNotificationChange(node *NotificationChange) notificationchangeOption {
	return func(m *NotificationChangeMutation) {
		m.oldValue = func(context.Context) (*NotificationChange, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m NotificationChangeMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m NotificationChangeMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *NotificationChangeMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *NotificationChangeMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().NotificationChange.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *NotificationChangeMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *NotificationChangeMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the NotificationChange entity.
// If the NotificationChange object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NotificationChangeMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *NotificationChangeMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *NotificationChangeMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *NotificationChangeMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the NotificationChange entity.
// If the NotificationChange object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NotificationChangeMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *NotificationChangeMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetDeletedAt sets the "deleted_at" field.
func (m *NotificationChangeMutation) SetDeletedAt(t time.Time) {
	m.deleted_at = &t
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *NotificationChangeMutation) DeletedAt() (r time.Time, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the NotificationChange entity.
// If the NotificationChange object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NotificationChangeMutation) OldDeletedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (m *NotificationChangeMutation) ClearDeletedAt() {
	m.deleted_at = nil
	m.clearedFields[notificationchange.FieldDeletedAt] = struct{}{}
}

// DeletedAtCleared returns if the "deleted_at" field was cleared in this mutation.
func (m *NotificationChangeMutation) DeletedAtCleared() bool {
	_, ok := m.clearedFields[notificationchange.FieldDeletedAt]
	return ok
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *NotificationChangeMutation) ResetDeletedAt() {
	m.deleted_at = nil
	delete(m.clearedFields, notificationchange.FieldDeletedAt)
}

// SetActorID sets the "actor" edge to the User entity by id.
func (m *NotificationChangeMutation) SetActorID(id int) {
	m.actor = &id
}

// ClearActor clears the "actor" edge to the User entity.
func (m *NotificationChangeMutation) ClearActor() {
	m.clearedactor = true
}

// ActorCleared reports if the "actor" edge to the User entity was cleared.
func (m *NotificationChangeMutation) ActorCleared() bool {
	return m.clearedactor
}

// ActorID returns the "actor" edge ID in the mutation.
func (m *NotificationChangeMutation) ActorID() (id int, exists bool) {
	if m.actor != nil {
		return *m.actor, true
	}
	return
}

// ActorIDs returns the "actor" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ActorID instead. It exists only for internal usage by the builders.
func (m *NotificationChangeMutation) ActorIDs() (ids []int) {
	if id := m.actor; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetActor resets all changes to the "actor" edge.
func (m *NotificationChangeMutation) ResetActor() {
	m.actor = nil
	m.clearedactor = false
}

// SetNotificationObjectID sets the "notificationObject" edge to the NotificationObject entity by id.
func (m *NotificationChangeMutation) SetNotificationObjectID(id int) {
	m.notificationObject = &id
}

// ClearNotificationObject clears the "notificationObject" edge to the NotificationObject entity.
func (m *NotificationChangeMutation) ClearNotificationObject() {
	m.clearednotificationObject = true
}

// NotificationObjectCleared reports if the "notificationObject" edge to the NotificationObject entity was cleared.
func (m *NotificationChangeMutation) NotificationObjectCleared() bool {
	return m.clearednotificationObject
}

// NotificationObjectID returns the "notificationObject" edge ID in the mutation.
func (m *NotificationChangeMutation) NotificationObjectID() (id int, exists bool) {
	if m.notificationObject != nil {
		return *m.notificationObject, true
	}
	return
}

// NotificationObjectIDs returns the "notificationObject" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// NotificationObjectID instead. It exists only for internal usage by the builders.
func (m *NotificationChangeMutation) NotificationObjectIDs() (ids []int) {
	if id := m.notificationObject; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetNotificationObject resets all changes to the "notificationObject" edge.
func (m *NotificationChangeMutation) ResetNotificationObject() {
	m.notificationObject = nil
	m.clearednotificationObject = false
}

// Where appends a list predicates to the NotificationChangeMutation builder.
func (m *NotificationChangeMutation) Where(ps ...predicate.NotificationChange) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the NotificationChangeMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *NotificationChangeMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.NotificationChange, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *NotificationChangeMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *NotificationChangeMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (NotificationChange).
func (m *NotificationChangeMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *NotificationChangeMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.created_at != nil {
		fields = append(fields, notificationchange.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, notificationchange.FieldUpdatedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, notificationchange.FieldDeletedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *NotificationChangeMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case notificationchange.FieldCreatedAt:
		return m.CreatedAt()
	case notificationchange.FieldUpdatedAt:
		return m.UpdatedAt()
	case notificationchange.FieldDeletedAt:
		return m.DeletedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *NotificationChangeMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case notificationchange.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case notificationchange.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case notificationchange.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	}
	return nil, fmt.Errorf("unknown NotificationChange field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *NotificationChangeMutation) SetField(name string, value ent.Value) error {
	switch name {
	case notificationchange.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case notificationchange.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case notificationchange.FieldDeletedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	}
	return fmt.Errorf("unknown NotificationChange field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *NotificationChangeMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *NotificationChangeMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *NotificationChangeMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown NotificationChange numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *NotificationChangeMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(notificationchange.FieldDeletedAt) {
		fields = append(fields, notificationchange.FieldDeletedAt)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *NotificationChangeMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *NotificationChangeMutation) ClearField(name string) error {
	switch name {
	case notificationchange.FieldDeletedAt:
		m.ClearDeletedAt()
		return nil
	}
	return fmt.Errorf("unknown NotificationChange nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *NotificationChangeMutation) ResetField(name string) error {
	switch name {
	case notificationchange.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case notificationchange.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case notificationchange.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	}
	return fmt.Errorf("unknown NotificationChange field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *NotificationChangeMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.actor != nil {
		edges = append(edges, notificationchange.EdgeActor)
	}
	if m.notificationObject != nil {
		edges = append(edges, notificationchange.EdgeNotificationObject)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *NotificationChangeMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case notificationchange.EdgeActor:
		if id := m.actor; id != nil {
			return []ent.Value{*id}
		}
	case notificationchange.EdgeNotificationObject:
		if id := m.notificationObject; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *NotificationChangeMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *NotificationChangeMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *NotificationChangeMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedactor {
		edges = append(edges, notificationchange.EdgeActor)
	}
	if m.clearednotificationObject {
		edges = append(edges, notificationchange.EdgeNotificationObject)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *NotificationChangeMutation) EdgeCleared(name string) bool {
	switch name {
	case notificationchange.EdgeActor:
		return m.clearedactor
	case notificationchange.EdgeNotificationObject:
		return m.clearednotificationObject
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *NotificationChangeMutation) ClearEdge(name string) error {
	switch name {
	case notificationchange.EdgeActor:
		m.ClearActor()
		return nil
	case notificationchange.EdgeNotificationObject:
		m.ClearNotificationObject()
		return nil
	}
	return fmt.Errorf("unknown NotificationChange unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *NotificationChangeMutation) ResetEdge(name string) error {
	switch name {
	case notificationchange.EdgeActor:
		m.ResetActor()
		return nil
	case notificationchange.EdgeNotificationObject:
		m.ResetNotificationObject()
		return nil
	}
	return fmt.Errorf("unknown NotificationChange edge %s", name)
}

// NotificationObjectMutation represents an operation that mutates the NotificationObject nodes in the graph.
type NotificationObjectMutation struct {
	config
	op                         Op
	typ                        string
	id                         *int
	created_at                 *time.Time
	updated_at                 *time.Time
	deleted_at                 *time.Time
	entity_id                  *int
	addentity_id               *int
	clearedFields              map[string]struct{}
	notifications              map[int]struct{}
	removednotifications       map[int]struct{}
	clearednotifications       bool
	notificationChanges        map[int]struct{}
	removednotificationChanges map[int]struct{}
	clearednotificationChanges bool
	entityType                 *int
	clearedentityType          bool
	done                       bool
	oldValue                   func(context.Context) (*NotificationObject, error)
	predicates                 []predicate.NotificationObject
}

var _ ent.Mutation = (*NotificationObjectMutation)(nil)

// notificationobjectOption allows management of the mutation configuration using functional options.
type notificationobjectOption func(*NotificationObjectMutation)

// newNotificationObjectMutation creates new mutation for the NotificationObject entity.
func newNotificationObjectMutation(c config, op Op, opts ...notificationobjectOption) *NotificationObjectMutation {
	m := &NotificationObjectMutation{
		config:        c,
		op:            op,
		typ:           TypeNotificationObject,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withNotificationObjectID sets the ID field of the mutation.
func withNotificationObjectID(id int) notificationobjectOption {
	return func(m *NotificationObjectMutation) {
		var (
			err   error
			once  sync.Once
			value *NotificationObject
		)
		m.oldValue = func(ctx context.Context) (*NotificationObject, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().NotificationObject.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withNotificationObject sets the old NotificationObject of the mutation.
func withNotificationObject(node *NotificationObject) notificationobjectOption {
	return func(m *NotificationObjectMutation) {
		m.oldValue = func(context.Context) (*NotificationObject, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m NotificationObjectMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m NotificationObjectMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *NotificationObjectMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *NotificationObjectMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().NotificationObject.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *NotificationObjectMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *NotificationObjectMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the NotificationObject entity.
// If the NotificationObject object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NotificationObjectMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *NotificationObjectMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *NotificationObjectMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *NotificationObjectMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the NotificationObject entity.
// If the NotificationObject object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NotificationObjectMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *NotificationObjectMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetDeletedAt sets the "deleted_at" field.
func (m *NotificationObjectMutation) SetDeletedAt(t time.Time) {
	m.deleted_at = &t
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *NotificationObjectMutation) DeletedAt() (r time.Time, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the NotificationObject entity.
// If the NotificationObject object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NotificationObjectMutation) OldDeletedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (m *NotificationObjectMutation) ClearDeletedAt() {
	m.deleted_at = nil
	m.clearedFields[notificationobject.FieldDeletedAt] = struct{}{}
}

// DeletedAtCleared returns if the "deleted_at" field was cleared in this mutation.
func (m *NotificationObjectMutation) DeletedAtCleared() bool {
	_, ok := m.clearedFields[notificationobject.FieldDeletedAt]
	return ok
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *NotificationObjectMutation) ResetDeletedAt() {
	m.deleted_at = nil
	delete(m.clearedFields, notificationobject.FieldDeletedAt)
}

// SetEntityID sets the "entity_id" field.
func (m *NotificationObjectMutation) SetEntityID(i int) {
	m.entity_id = &i
	m.addentity_id = nil
}

// EntityID returns the value of the "entity_id" field in the mutation.
func (m *NotificationObjectMutation) EntityID() (r int, exists bool) {
	v := m.entity_id
	if v == nil {
		return
	}
	return *v, true
}

// OldEntityID returns the old "entity_id" field's value of the NotificationObject entity.
// If the NotificationObject object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NotificationObjectMutation) OldEntityID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEntityID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEntityID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEntityID: %w", err)
	}
	return oldValue.EntityID, nil
}

// AddEntityID adds i to the "entity_id" field.
func (m *NotificationObjectMutation) AddEntityID(i int) {
	if m.addentity_id != nil {
		*m.addentity_id += i
	} else {
		m.addentity_id = &i
	}
}

// AddedEntityID returns the value that was added to the "entity_id" field in this mutation.
func (m *NotificationObjectMutation) AddedEntityID() (r int, exists bool) {
	v := m.addentity_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetEntityID resets all changes to the "entity_id" field.
func (m *NotificationObjectMutation) ResetEntityID() {
	m.entity_id = nil
	m.addentity_id = nil
}

// AddNotificationIDs adds the "notifications" edge to the Notification entity by ids.
func (m *NotificationObjectMutation) AddNotificationIDs(ids ...int) {
	if m.notifications == nil {
		m.notifications = make(map[int]struct{})
	}
	for i := range ids {
		m.notifications[ids[i]] = struct{}{}
	}
}

// ClearNotifications clears the "notifications" edge to the Notification entity.
func (m *NotificationObjectMutation) ClearNotifications() {
	m.clearednotifications = true
}

// NotificationsCleared reports if the "notifications" edge to the Notification entity was cleared.
func (m *NotificationObjectMutation) NotificationsCleared() bool {
	return m.clearednotifications
}

// RemoveNotificationIDs removes the "notifications" edge to the Notification entity by IDs.
func (m *NotificationObjectMutation) RemoveNotificationIDs(ids ...int) {
	if m.removednotifications == nil {
		m.removednotifications = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.notifications, ids[i])
		m.removednotifications[ids[i]] = struct{}{}
	}
}

// RemovedNotifications returns the removed IDs of the "notifications" edge to the Notification entity.
func (m *NotificationObjectMutation) RemovedNotificationsIDs() (ids []int) {
	for id := range m.removednotifications {
		ids = append(ids, id)
	}
	return
}

// NotificationsIDs returns the "notifications" edge IDs in the mutation.
func (m *NotificationObjectMutation) NotificationsIDs() (ids []int) {
	for id := range m.notifications {
		ids = append(ids, id)
	}
	return
}

// ResetNotifications resets all changes to the "notifications" edge.
func (m *NotificationObjectMutation) ResetNotifications() {
	m.notifications = nil
	m.clearednotifications = false
	m.removednotifications = nil
}

// AddNotificationChangeIDs adds the "notificationChanges" edge to the NotificationChange entity by ids.
func (m *NotificationObjectMutation) AddNotificationChangeIDs(ids ...int) {
	if m.notificationChanges == nil {
		m.notificationChanges = make(map[int]struct{})
	}
	for i := range ids {
		m.notificationChanges[ids[i]] = struct{}{}
	}
}

// ClearNotificationChanges clears the "notificationChanges" edge to the NotificationChange entity.
func (m *NotificationObjectMutation) ClearNotificationChanges() {
	m.clearednotificationChanges = true
}

// NotificationChangesCleared reports if the "notificationChanges" edge to the NotificationChange entity was cleared.
func (m *NotificationObjectMutation) NotificationChangesCleared() bool {
	return m.clearednotificationChanges
}

// RemoveNotificationChangeIDs removes the "notificationChanges" edge to the NotificationChange entity by IDs.
func (m *NotificationObjectMutation) RemoveNotificationChangeIDs(ids ...int) {
	if m.removednotificationChanges == nil {
		m.removednotificationChanges = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.notificationChanges, ids[i])
		m.removednotificationChanges[ids[i]] = struct{}{}
	}
}

// RemovedNotificationChanges returns the removed IDs of the "notificationChanges" edge to the NotificationChange entity.
func (m *NotificationObjectMutation) RemovedNotificationChangesIDs() (ids []int) {
	for id := range m.removednotificationChanges {
		ids = append(ids, id)
	}
	return
}

// NotificationChangesIDs returns the "notificationChanges" edge IDs in the mutation.
func (m *NotificationObjectMutation) NotificationChangesIDs() (ids []int) {
	for id := range m.notificationChanges {
		ids = append(ids, id)
	}
	return
}

// ResetNotificationChanges resets all changes to the "notificationChanges" edge.
func (m *NotificationObjectMutation) ResetNotificationChanges() {
	m.notificationChanges = nil
	m.clearednotificationChanges = false
	m.removednotificationChanges = nil
}

// SetEntityTypeID sets the "entityType" edge to the EntityType entity by id.
func (m *NotificationObjectMutation) SetEntityTypeID(id int) {
	m.entityType = &id
}

// ClearEntityType clears the "entityType" edge to the EntityType entity.
func (m *NotificationObjectMutation) ClearEntityType() {
	m.clearedentityType = true
}

// EntityTypeCleared reports if the "entityType" edge to the EntityType entity was cleared.
func (m *NotificationObjectMutation) EntityTypeCleared() bool {
	return m.clearedentityType
}

// EntityTypeID returns the "entityType" edge ID in the mutation.
func (m *NotificationObjectMutation) EntityTypeID() (id int, exists bool) {
	if m.entityType != nil {
		return *m.entityType, true
	}
	return
}

// EntityTypeIDs returns the "entityType" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// EntityTypeID instead. It exists only for internal usage by the builders.
func (m *NotificationObjectMutation) EntityTypeIDs() (ids []int) {
	if id := m.entityType; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetEntityType resets all changes to the "entityType" edge.
func (m *NotificationObjectMutation) ResetEntityType() {
	m.entityType = nil
	m.clearedentityType = false
}

// Where appends a list predicates to the NotificationObjectMutation builder.
func (m *NotificationObjectMutation) Where(ps ...predicate.NotificationObject) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the NotificationObjectMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *NotificationObjectMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.NotificationObject, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *NotificationObjectMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *NotificationObjectMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (NotificationObject).
func (m *NotificationObjectMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *NotificationObjectMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.created_at != nil {
		fields = append(fields, notificationobject.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, notificationobject.FieldUpdatedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, notificationobject.FieldDeletedAt)
	}
	if m.entity_id != nil {
		fields = append(fields, notificationobject.FieldEntityID)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *NotificationObjectMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case notificationobject.FieldCreatedAt:
		return m.CreatedAt()
	case notificationobject.FieldUpdatedAt:
		return m.UpdatedAt()
	case notificationobject.FieldDeletedAt:
		return m.DeletedAt()
	case notificationobject.FieldEntityID:
		return m.EntityID()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *NotificationObjectMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case notificationobject.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case notificationobject.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case notificationobject.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case notificationobject.FieldEntityID:
		return m.OldEntityID(ctx)
	}
	return nil, fmt.Errorf("unknown NotificationObject field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *NotificationObjectMutation) SetField(name string, value ent.Value) error {
	switch name {
	case notificationobject.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case notificationobject.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case notificationobject.FieldDeletedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case notificationobject.FieldEntityID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEntityID(v)
		return nil
	}
	return fmt.Errorf("unknown NotificationObject field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *NotificationObjectMutation) AddedFields() []string {
	var fields []string
	if m.addentity_id != nil {
		fields = append(fields, notificationobject.FieldEntityID)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *NotificationObjectMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case notificationobject.FieldEntityID:
		return m.AddedEntityID()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *NotificationObjectMutation) AddField(name string, value ent.Value) error {
	switch name {
	case notificationobject.FieldEntityID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddEntityID(v)
		return nil
	}
	return fmt.Errorf("unknown NotificationObject numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *NotificationObjectMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(notificationobject.FieldDeletedAt) {
		fields = append(fields, notificationobject.FieldDeletedAt)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *NotificationObjectMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *NotificationObjectMutation) ClearField(name string) error {
	switch name {
	case notificationobject.FieldDeletedAt:
		m.ClearDeletedAt()
		return nil
	}
	return fmt.Errorf("unknown NotificationObject nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *NotificationObjectMutation) ResetField(name string) error {
	switch name {
	case notificationobject.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case notificationobject.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case notificationobject.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case notificationobject.FieldEntityID:
		m.ResetEntityID()
		return nil
	}
	return fmt.Errorf("unknown NotificationObject field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *NotificationObjectMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m.notifications != nil {
		edges = append(edges, notificationobject.EdgeNotifications)
	}
	if m.notificationChanges != nil {
		edges = append(edges, notificationobject.EdgeNotificationChanges)
	}
	if m.entityType != nil {
		edges = append(edges, notificationobject.EdgeEntityType)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *NotificationObjectMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case notificationobject.EdgeNotifications:
		ids := make([]ent.Value, 0, len(m.notifications))
		for id := range m.notifications {
			ids = append(ids, id)
		}
		return ids
	case notificationobject.EdgeNotificationChanges:
		ids := make([]ent.Value, 0, len(m.notificationChanges))
		for id := range m.notificationChanges {
			ids = append(ids, id)
		}
		return ids
	case notificationobject.EdgeEntityType:
		if id := m.entityType; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *NotificationObjectMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	if m.removednotifications != nil {
		edges = append(edges, notificationobject.EdgeNotifications)
	}
	if m.removednotificationChanges != nil {
		edges = append(edges, notificationobject.EdgeNotificationChanges)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *NotificationObjectMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case notificationobject.EdgeNotifications:
		ids := make([]ent.Value, 0, len(m.removednotifications))
		for id := range m.removednotifications {
			ids = append(ids, id)
		}
		return ids
	case notificationobject.EdgeNotificationChanges:
		ids := make([]ent.Value, 0, len(m.removednotificationChanges))
		for id := range m.removednotificationChanges {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *NotificationObjectMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	if m.clearednotifications {
		edges = append(edges, notificationobject.EdgeNotifications)
	}
	if m.clearednotificationChanges {
		edges = append(edges, notificationobject.EdgeNotificationChanges)
	}
	if m.clearedentityType {
		edges = append(edges, notificationobject.EdgeEntityType)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *NotificationObjectMutation) EdgeCleared(name string) bool {
	switch name {
	case notificationobject.EdgeNotifications:
		return m.clearednotifications
	case notificationobject.EdgeNotificationChanges:
		return m.clearednotificationChanges
	case notificationobject.EdgeEntityType:
		return m.clearedentityType
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *NotificationObjectMutation) ClearEdge(name string) error {
	switch name {
	case notificationobject.EdgeEntityType:
		m.ClearEntityType()
		return nil
	}
	return fmt.Errorf("unknown NotificationObject unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *NotificationObjectMutation) ResetEdge(name string) error {
	switch name {
	case notificationobject.EdgeNotifications:
		m.ResetNotifications()
		return nil
	case notificationobject.EdgeNotificationChanges:
		m.ResetNotificationChanges()
		return nil
	case notificationobject.EdgeEntityType:
		m.ResetEntityType()
		return nil
	}
	return fmt.Errorf("unknown NotificationObject edge %s", name)
}

// UserMutation represents an operation that mutates the User nodes in the graph.
type UserMutation struct {
	config
	op                         Op
	typ                        string
	id                         *int
	created_at                 *time.Time
	updated_at                 *time.Time
	deleted_at                 *time.Time
	username                   *string
	clearedFields              map[string]struct{}
	friendshipsReceiver        map[int]struct{}
	removedfriendshipsReceiver map[int]struct{}
	clearedfriendshipsReceiver bool
	friendshipsSender          map[int]struct{}
	removedfriendshipsSender   map[int]struct{}
	clearedfriendshipsSender   bool
	notifications              map[int]struct{}
	removednotifications       map[int]struct{}
	clearednotifications       bool
	notificationChanges        map[int]struct{}
	removednotificationChanges map[int]struct{}
	clearednotificationChanges bool
	done                       bool
	oldValue                   func(context.Context) (*User, error)
	predicates                 []predicate.User
}

var _ ent.Mutation = (*UserMutation)(nil)

// userOption allows management of the mutation configuration using functional options.
type userOption func(*UserMutation)

// newUserMutation creates new mutation for the User entity.
func newUserMutation(c config, op Op, opts ...userOption) *UserMutation {
	m := &UserMutation{
		config:        c,
		op:            op,
		typ:           TypeUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserID sets the ID field of the mutation.
func withUserID(id int) userOption {
	return func(m *UserMutation) {
		var (
			err   error
			once  sync.Once
			value *User
		)
		m.oldValue = func(ctx context.Context) (*User, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().User.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUser sets the old User of the mutation.
func withUser(node *User) userOption {
	return func(m *UserMutation) {
		m.oldValue = func(context.Context) (*User, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *UserMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().User.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *UserMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *UserMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *UserMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *UserMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *UserMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *UserMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetDeletedAt sets the "deleted_at" field.
func (m *UserMutation) SetDeletedAt(t time.Time) {
	m.deleted_at = &t
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *UserMutation) DeletedAt() (r time.Time, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldDeletedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (m *UserMutation) ClearDeletedAt() {
	m.deleted_at = nil
	m.clearedFields[user.FieldDeletedAt] = struct{}{}
}

// DeletedAtCleared returns if the "deleted_at" field was cleared in this mutation.
func (m *UserMutation) DeletedAtCleared() bool {
	_, ok := m.clearedFields[user.FieldDeletedAt]
	return ok
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *UserMutation) ResetDeletedAt() {
	m.deleted_at = nil
	delete(m.clearedFields, user.FieldDeletedAt)
}

// SetUsername sets the "username" field.
func (m *UserMutation) SetUsername(s string) {
	m.username = &s
}

// Username returns the value of the "username" field in the mutation.
func (m *UserMutation) Username() (r string, exists bool) {
	v := m.username
	if v == nil {
		return
	}
	return *v, true
}

// OldUsername returns the old "username" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldUsername(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUsername is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUsername requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUsername: %w", err)
	}
	return oldValue.Username, nil
}

// ResetUsername resets all changes to the "username" field.
func (m *UserMutation) ResetUsername() {
	m.username = nil
}

// AddFriendshipsReceiverIDs adds the "friendshipsReceiver" edge to the Friendship entity by ids.
func (m *UserMutation) AddFriendshipsReceiverIDs(ids ...int) {
	if m.friendshipsReceiver == nil {
		m.friendshipsReceiver = make(map[int]struct{})
	}
	for i := range ids {
		m.friendshipsReceiver[ids[i]] = struct{}{}
	}
}

// ClearFriendshipsReceiver clears the "friendshipsReceiver" edge to the Friendship entity.
func (m *UserMutation) ClearFriendshipsReceiver() {
	m.clearedfriendshipsReceiver = true
}

// FriendshipsReceiverCleared reports if the "friendshipsReceiver" edge to the Friendship entity was cleared.
func (m *UserMutation) FriendshipsReceiverCleared() bool {
	return m.clearedfriendshipsReceiver
}

// RemoveFriendshipsReceiverIDs removes the "friendshipsReceiver" edge to the Friendship entity by IDs.
func (m *UserMutation) RemoveFriendshipsReceiverIDs(ids ...int) {
	if m.removedfriendshipsReceiver == nil {
		m.removedfriendshipsReceiver = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.friendshipsReceiver, ids[i])
		m.removedfriendshipsReceiver[ids[i]] = struct{}{}
	}
}

// RemovedFriendshipsReceiver returns the removed IDs of the "friendshipsReceiver" edge to the Friendship entity.
func (m *UserMutation) RemovedFriendshipsReceiverIDs() (ids []int) {
	for id := range m.removedfriendshipsReceiver {
		ids = append(ids, id)
	}
	return
}

// FriendshipsReceiverIDs returns the "friendshipsReceiver" edge IDs in the mutation.
func (m *UserMutation) FriendshipsReceiverIDs() (ids []int) {
	for id := range m.friendshipsReceiver {
		ids = append(ids, id)
	}
	return
}

// ResetFriendshipsReceiver resets all changes to the "friendshipsReceiver" edge.
func (m *UserMutation) ResetFriendshipsReceiver() {
	m.friendshipsReceiver = nil
	m.clearedfriendshipsReceiver = false
	m.removedfriendshipsReceiver = nil
}

// AddFriendshipsSenderIDs adds the "friendshipsSender" edge to the Friendship entity by ids.
func (m *UserMutation) AddFriendshipsSenderIDs(ids ...int) {
	if m.friendshipsSender == nil {
		m.friendshipsSender = make(map[int]struct{})
	}
	for i := range ids {
		m.friendshipsSender[ids[i]] = struct{}{}
	}
}

// ClearFriendshipsSender clears the "friendshipsSender" edge to the Friendship entity.
func (m *UserMutation) ClearFriendshipsSender() {
	m.clearedfriendshipsSender = true
}

// FriendshipsSenderCleared reports if the "friendshipsSender" edge to the Friendship entity was cleared.
func (m *UserMutation) FriendshipsSenderCleared() bool {
	return m.clearedfriendshipsSender
}

// RemoveFriendshipsSenderIDs removes the "friendshipsSender" edge to the Friendship entity by IDs.
func (m *UserMutation) RemoveFriendshipsSenderIDs(ids ...int) {
	if m.removedfriendshipsSender == nil {
		m.removedfriendshipsSender = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.friendshipsSender, ids[i])
		m.removedfriendshipsSender[ids[i]] = struct{}{}
	}
}

// RemovedFriendshipsSender returns the removed IDs of the "friendshipsSender" edge to the Friendship entity.
func (m *UserMutation) RemovedFriendshipsSenderIDs() (ids []int) {
	for id := range m.removedfriendshipsSender {
		ids = append(ids, id)
	}
	return
}

// FriendshipsSenderIDs returns the "friendshipsSender" edge IDs in the mutation.
func (m *UserMutation) FriendshipsSenderIDs() (ids []int) {
	for id := range m.friendshipsSender {
		ids = append(ids, id)
	}
	return
}

// ResetFriendshipsSender resets all changes to the "friendshipsSender" edge.
func (m *UserMutation) ResetFriendshipsSender() {
	m.friendshipsSender = nil
	m.clearedfriendshipsSender = false
	m.removedfriendshipsSender = nil
}

// AddNotificationIDs adds the "notifications" edge to the Notification entity by ids.
func (m *UserMutation) AddNotificationIDs(ids ...int) {
	if m.notifications == nil {
		m.notifications = make(map[int]struct{})
	}
	for i := range ids {
		m.notifications[ids[i]] = struct{}{}
	}
}

// ClearNotifications clears the "notifications" edge to the Notification entity.
func (m *UserMutation) ClearNotifications() {
	m.clearednotifications = true
}

// NotificationsCleared reports if the "notifications" edge to the Notification entity was cleared.
func (m *UserMutation) NotificationsCleared() bool {
	return m.clearednotifications
}

// RemoveNotificationIDs removes the "notifications" edge to the Notification entity by IDs.
func (m *UserMutation) RemoveNotificationIDs(ids ...int) {
	if m.removednotifications == nil {
		m.removednotifications = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.notifications, ids[i])
		m.removednotifications[ids[i]] = struct{}{}
	}
}

// RemovedNotifications returns the removed IDs of the "notifications" edge to the Notification entity.
func (m *UserMutation) RemovedNotificationsIDs() (ids []int) {
	for id := range m.removednotifications {
		ids = append(ids, id)
	}
	return
}

// NotificationsIDs returns the "notifications" edge IDs in the mutation.
func (m *UserMutation) NotificationsIDs() (ids []int) {
	for id := range m.notifications {
		ids = append(ids, id)
	}
	return
}

// ResetNotifications resets all changes to the "notifications" edge.
func (m *UserMutation) ResetNotifications() {
	m.notifications = nil
	m.clearednotifications = false
	m.removednotifications = nil
}

// AddNotificationChangeIDs adds the "notificationChanges" edge to the NotificationChange entity by ids.
func (m *UserMutation) AddNotificationChangeIDs(ids ...int) {
	if m.notificationChanges == nil {
		m.notificationChanges = make(map[int]struct{})
	}
	for i := range ids {
		m.notificationChanges[ids[i]] = struct{}{}
	}
}

// ClearNotificationChanges clears the "notificationChanges" edge to the NotificationChange entity.
func (m *UserMutation) ClearNotificationChanges() {
	m.clearednotificationChanges = true
}

// NotificationChangesCleared reports if the "notificationChanges" edge to the NotificationChange entity was cleared.
func (m *UserMutation) NotificationChangesCleared() bool {
	return m.clearednotificationChanges
}

// RemoveNotificationChangeIDs removes the "notificationChanges" edge to the NotificationChange entity by IDs.
func (m *UserMutation) RemoveNotificationChangeIDs(ids ...int) {
	if m.removednotificationChanges == nil {
		m.removednotificationChanges = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.notificationChanges, ids[i])
		m.removednotificationChanges[ids[i]] = struct{}{}
	}
}

// RemovedNotificationChanges returns the removed IDs of the "notificationChanges" edge to the NotificationChange entity.
func (m *UserMutation) RemovedNotificationChangesIDs() (ids []int) {
	for id := range m.removednotificationChanges {
		ids = append(ids, id)
	}
	return
}

// NotificationChangesIDs returns the "notificationChanges" edge IDs in the mutation.
func (m *UserMutation) NotificationChangesIDs() (ids []int) {
	for id := range m.notificationChanges {
		ids = append(ids, id)
	}
	return
}

// ResetNotificationChanges resets all changes to the "notificationChanges" edge.
func (m *UserMutation) ResetNotificationChanges() {
	m.notificationChanges = nil
	m.clearednotificationChanges = false
	m.removednotificationChanges = nil
}

// Where appends a list predicates to the UserMutation builder.
func (m *UserMutation) Where(ps ...predicate.User) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the UserMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *UserMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.User, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *UserMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *UserMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (User).
func (m *UserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.created_at != nil {
		fields = append(fields, user.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, user.FieldUpdatedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, user.FieldDeletedAt)
	}
	if m.username != nil {
		fields = append(fields, user.FieldUsername)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case user.FieldCreatedAt:
		return m.CreatedAt()
	case user.FieldUpdatedAt:
		return m.UpdatedAt()
	case user.FieldDeletedAt:
		return m.DeletedAt()
	case user.FieldUsername:
		return m.Username()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case user.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case user.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case user.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case user.FieldUsername:
		return m.OldUsername(ctx)
	}
	return nil, fmt.Errorf("unknown User field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case user.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case user.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case user.FieldDeletedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case user.FieldUsername:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUsername(v)
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown User numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(user.FieldDeletedAt) {
		fields = append(fields, user.FieldDeletedAt)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserMutation) ClearField(name string) error {
	switch name {
	case user.FieldDeletedAt:
		m.ClearDeletedAt()
		return nil
	}
	return fmt.Errorf("unknown User nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserMutation) ResetField(name string) error {
	switch name {
	case user.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case user.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case user.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case user.FieldUsername:
		m.ResetUsername()
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserMutation) AddedEdges() []string {
	edges := make([]string, 0, 4)
	if m.friendshipsReceiver != nil {
		edges = append(edges, user.EdgeFriendshipsReceiver)
	}
	if m.friendshipsSender != nil {
		edges = append(edges, user.EdgeFriendshipsSender)
	}
	if m.notifications != nil {
		edges = append(edges, user.EdgeNotifications)
	}
	if m.notificationChanges != nil {
		edges = append(edges, user.EdgeNotificationChanges)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeFriendshipsReceiver:
		ids := make([]ent.Value, 0, len(m.friendshipsReceiver))
		for id := range m.friendshipsReceiver {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeFriendshipsSender:
		ids := make([]ent.Value, 0, len(m.friendshipsSender))
		for id := range m.friendshipsSender {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeNotifications:
		ids := make([]ent.Value, 0, len(m.notifications))
		for id := range m.notifications {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeNotificationChanges:
		ids := make([]ent.Value, 0, len(m.notificationChanges))
		for id := range m.notificationChanges {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 4)
	if m.removedfriendshipsReceiver != nil {
		edges = append(edges, user.EdgeFriendshipsReceiver)
	}
	if m.removedfriendshipsSender != nil {
		edges = append(edges, user.EdgeFriendshipsSender)
	}
	if m.removednotifications != nil {
		edges = append(edges, user.EdgeNotifications)
	}
	if m.removednotificationChanges != nil {
		edges = append(edges, user.EdgeNotificationChanges)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeFriendshipsReceiver:
		ids := make([]ent.Value, 0, len(m.removedfriendshipsReceiver))
		for id := range m.removedfriendshipsReceiver {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeFriendshipsSender:
		ids := make([]ent.Value, 0, len(m.removedfriendshipsSender))
		for id := range m.removedfriendshipsSender {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeNotifications:
		ids := make([]ent.Value, 0, len(m.removednotifications))
		for id := range m.removednotifications {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeNotificationChanges:
		ids := make([]ent.Value, 0, len(m.removednotificationChanges))
		for id := range m.removednotificationChanges {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 4)
	if m.clearedfriendshipsReceiver {
		edges = append(edges, user.EdgeFriendshipsReceiver)
	}
	if m.clearedfriendshipsSender {
		edges = append(edges, user.EdgeFriendshipsSender)
	}
	if m.clearednotifications {
		edges = append(edges, user.EdgeNotifications)
	}
	if m.clearednotificationChanges {
		edges = append(edges, user.EdgeNotificationChanges)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserMutation) EdgeCleared(name string) bool {
	switch name {
	case user.EdgeFriendshipsReceiver:
		return m.clearedfriendshipsReceiver
	case user.EdgeFriendshipsSender:
		return m.clearedfriendshipsSender
	case user.EdgeNotifications:
		return m.clearednotifications
	case user.EdgeNotificationChanges:
		return m.clearednotificationChanges
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown User unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserMutation) ResetEdge(name string) error {
	switch name {
	case user.EdgeFriendshipsReceiver:
		m.ResetFriendshipsReceiver()
		return nil
	case user.EdgeFriendshipsSender:
		m.ResetFriendshipsSender()
		return nil
	case user.EdgeNotifications:
		m.ResetNotifications()
		return nil
	case user.EdgeNotificationChanges:
		m.ResetNotificationChanges()
		return nil
	}
	return fmt.Errorf("unknown User edge %s", name)
}
