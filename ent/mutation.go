// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"notification-service/ent/entitytype"
	"notification-service/ent/notification"
	"notification-service/ent/notificationchange"
	"notification-service/ent/notificationobjectid"
	"notification-service/ent/predicate"
	"notification-service/ent/toktok"
	"notification-service/ent/user"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeEntityType           = "EntityType"
	TypeNotification         = "Notification"
	TypeNotificationChange   = "NotificationChange"
	TypeNotificationObjectID = "NotificationObjectID"
	TypeTokTok               = "TokTok"
	TypeUser                 = "User"
)

// EntityTypeMutation represents an operation that mutates the EntityType nodes in the graph.
type EntityTypeMutation struct {
	config
	op                           Op
	typ                          string
	id                           *int
	delete_time                  *time.Time
	entityName                   *string
	notificationDescription      *string
	clearedFields                map[string]struct{}
	notificationObjectIDs        map[int]struct{}
	removednotificationObjectIDs map[int]struct{}
	clearednotificationObjectIDs bool
	done                         bool
	oldValue                     func(context.Context) (*EntityType, error)
	predicates                   []predicate.EntityType
}

var _ ent.Mutation = (*EntityTypeMutation)(nil)

// entitytypeOption allows management of the mutation configuration using functional options.
type entitytypeOption func(*EntityTypeMutation)

// newEntityTypeMutation creates new mutation for the EntityType entity.
func newEntityTypeMutation(c config, op Op, opts ...entitytypeOption) *EntityTypeMutation {
	m := &EntityTypeMutation{
		config:        c,
		op:            op,
		typ:           TypeEntityType,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withEntityTypeID sets the ID field of the mutation.
func withEntityTypeID(id int) entitytypeOption {
	return func(m *EntityTypeMutation) {
		var (
			err   error
			once  sync.Once
			value *EntityType
		)
		m.oldValue = func(ctx context.Context) (*EntityType, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().EntityType.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withEntityType sets the old EntityType of the mutation.
func withEntityType(node *EntityType) entitytypeOption {
	return func(m *EntityTypeMutation) {
		m.oldValue = func(context.Context) (*EntityType, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m EntityTypeMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m EntityTypeMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *EntityTypeMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *EntityTypeMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().EntityType.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetDeleteTime sets the "delete_time" field.
func (m *EntityTypeMutation) SetDeleteTime(t time.Time) {
	m.delete_time = &t
}

// DeleteTime returns the value of the "delete_time" field in the mutation.
func (m *EntityTypeMutation) DeleteTime() (r time.Time, exists bool) {
	v := m.delete_time
	if v == nil {
		return
	}
	return *v, true
}

// OldDeleteTime returns the old "delete_time" field's value of the EntityType entity.
// If the EntityType object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EntityTypeMutation) OldDeleteTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeleteTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeleteTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeleteTime: %w", err)
	}
	return oldValue.DeleteTime, nil
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (m *EntityTypeMutation) ClearDeleteTime() {
	m.delete_time = nil
	m.clearedFields[entitytype.FieldDeleteTime] = struct{}{}
}

// DeleteTimeCleared returns if the "delete_time" field was cleared in this mutation.
func (m *EntityTypeMutation) DeleteTimeCleared() bool {
	_, ok := m.clearedFields[entitytype.FieldDeleteTime]
	return ok
}

// ResetDeleteTime resets all changes to the "delete_time" field.
func (m *EntityTypeMutation) ResetDeleteTime() {
	m.delete_time = nil
	delete(m.clearedFields, entitytype.FieldDeleteTime)
}

// SetEntityName sets the "entityName" field.
func (m *EntityTypeMutation) SetEntityName(s string) {
	m.entityName = &s
}

// EntityName returns the value of the "entityName" field in the mutation.
func (m *EntityTypeMutation) EntityName() (r string, exists bool) {
	v := m.entityName
	if v == nil {
		return
	}
	return *v, true
}

// OldEntityName returns the old "entityName" field's value of the EntityType entity.
// If the EntityType object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EntityTypeMutation) OldEntityName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEntityName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEntityName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEntityName: %w", err)
	}
	return oldValue.EntityName, nil
}

// ResetEntityName resets all changes to the "entityName" field.
func (m *EntityTypeMutation) ResetEntityName() {
	m.entityName = nil
}

// SetNotificationDescription sets the "notificationDescription" field.
func (m *EntityTypeMutation) SetNotificationDescription(s string) {
	m.notificationDescription = &s
}

// NotificationDescription returns the value of the "notificationDescription" field in the mutation.
func (m *EntityTypeMutation) NotificationDescription() (r string, exists bool) {
	v := m.notificationDescription
	if v == nil {
		return
	}
	return *v, true
}

// OldNotificationDescription returns the old "notificationDescription" field's value of the EntityType entity.
// If the EntityType object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EntityTypeMutation) OldNotificationDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldNotificationDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldNotificationDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNotificationDescription: %w", err)
	}
	return oldValue.NotificationDescription, nil
}

// ResetNotificationDescription resets all changes to the "notificationDescription" field.
func (m *EntityTypeMutation) ResetNotificationDescription() {
	m.notificationDescription = nil
}

// AddNotificationObjectIDIDs adds the "notificationObjectIDs" edge to the NotificationObjectID entity by ids.
func (m *EntityTypeMutation) AddNotificationObjectIDIDs(ids ...int) {
	if m.notificationObjectIDs == nil {
		m.notificationObjectIDs = make(map[int]struct{})
	}
	for i := range ids {
		m.notificationObjectIDs[ids[i]] = struct{}{}
	}
}

// ClearNotificationObjectIDs clears the "notificationObjectIDs" edge to the NotificationObjectID entity.
func (m *EntityTypeMutation) ClearNotificationObjectIDs() {
	m.clearednotificationObjectIDs = true
}

// NotificationObjectIDsCleared reports if the "notificationObjectIDs" edge to the NotificationObjectID entity was cleared.
func (m *EntityTypeMutation) NotificationObjectIDsCleared() bool {
	return m.clearednotificationObjectIDs
}

// RemoveNotificationObjectIDIDs removes the "notificationObjectIDs" edge to the NotificationObjectID entity by IDs.
func (m *EntityTypeMutation) RemoveNotificationObjectIDIDs(ids ...int) {
	if m.removednotificationObjectIDs == nil {
		m.removednotificationObjectIDs = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.notificationObjectIDs, ids[i])
		m.removednotificationObjectIDs[ids[i]] = struct{}{}
	}
}

// RemovedNotificationObjectIDs returns the removed IDs of the "notificationObjectIDs" edge to the NotificationObjectID entity.
func (m *EntityTypeMutation) RemovedNotificationObjectIDsIDs() (ids []int) {
	for id := range m.removednotificationObjectIDs {
		ids = append(ids, id)
	}
	return
}

// NotificationObjectIDsIDs returns the "notificationObjectIDs" edge IDs in the mutation.
func (m *EntityTypeMutation) NotificationObjectIDsIDs() (ids []int) {
	for id := range m.notificationObjectIDs {
		ids = append(ids, id)
	}
	return
}

// ResetNotificationObjectIDs resets all changes to the "notificationObjectIDs" edge.
func (m *EntityTypeMutation) ResetNotificationObjectIDs() {
	m.notificationObjectIDs = nil
	m.clearednotificationObjectIDs = false
	m.removednotificationObjectIDs = nil
}

// Where appends a list predicates to the EntityTypeMutation builder.
func (m *EntityTypeMutation) Where(ps ...predicate.EntityType) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the EntityTypeMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *EntityTypeMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.EntityType, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *EntityTypeMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *EntityTypeMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (EntityType).
func (m *EntityTypeMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *EntityTypeMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.delete_time != nil {
		fields = append(fields, entitytype.FieldDeleteTime)
	}
	if m.entityName != nil {
		fields = append(fields, entitytype.FieldEntityName)
	}
	if m.notificationDescription != nil {
		fields = append(fields, entitytype.FieldNotificationDescription)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *EntityTypeMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case entitytype.FieldDeleteTime:
		return m.DeleteTime()
	case entitytype.FieldEntityName:
		return m.EntityName()
	case entitytype.FieldNotificationDescription:
		return m.NotificationDescription()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *EntityTypeMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case entitytype.FieldDeleteTime:
		return m.OldDeleteTime(ctx)
	case entitytype.FieldEntityName:
		return m.OldEntityName(ctx)
	case entitytype.FieldNotificationDescription:
		return m.OldNotificationDescription(ctx)
	}
	return nil, fmt.Errorf("unknown EntityType field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *EntityTypeMutation) SetField(name string, value ent.Value) error {
	switch name {
	case entitytype.FieldDeleteTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeleteTime(v)
		return nil
	case entitytype.FieldEntityName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEntityName(v)
		return nil
	case entitytype.FieldNotificationDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNotificationDescription(v)
		return nil
	}
	return fmt.Errorf("unknown EntityType field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *EntityTypeMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *EntityTypeMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *EntityTypeMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown EntityType numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *EntityTypeMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(entitytype.FieldDeleteTime) {
		fields = append(fields, entitytype.FieldDeleteTime)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *EntityTypeMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *EntityTypeMutation) ClearField(name string) error {
	switch name {
	case entitytype.FieldDeleteTime:
		m.ClearDeleteTime()
		return nil
	}
	return fmt.Errorf("unknown EntityType nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *EntityTypeMutation) ResetField(name string) error {
	switch name {
	case entitytype.FieldDeleteTime:
		m.ResetDeleteTime()
		return nil
	case entitytype.FieldEntityName:
		m.ResetEntityName()
		return nil
	case entitytype.FieldNotificationDescription:
		m.ResetNotificationDescription()
		return nil
	}
	return fmt.Errorf("unknown EntityType field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *EntityTypeMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.notificationObjectIDs != nil {
		edges = append(edges, entitytype.EdgeNotificationObjectIDs)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *EntityTypeMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case entitytype.EdgeNotificationObjectIDs:
		ids := make([]ent.Value, 0, len(m.notificationObjectIDs))
		for id := range m.notificationObjectIDs {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *EntityTypeMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removednotificationObjectIDs != nil {
		edges = append(edges, entitytype.EdgeNotificationObjectIDs)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *EntityTypeMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case entitytype.EdgeNotificationObjectIDs:
		ids := make([]ent.Value, 0, len(m.removednotificationObjectIDs))
		for id := range m.removednotificationObjectIDs {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *EntityTypeMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearednotificationObjectIDs {
		edges = append(edges, entitytype.EdgeNotificationObjectIDs)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *EntityTypeMutation) EdgeCleared(name string) bool {
	switch name {
	case entitytype.EdgeNotificationObjectIDs:
		return m.clearednotificationObjectIDs
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *EntityTypeMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown EntityType unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *EntityTypeMutation) ResetEdge(name string) error {
	switch name {
	case entitytype.EdgeNotificationObjectIDs:
		m.ResetNotificationObjectIDs()
		return nil
	}
	return fmt.Errorf("unknown EntityType edge %s", name)
}

// NotificationMutation represents an operation that mutates the Notification nodes in the graph.
type NotificationMutation struct {
	config
	op                          Op
	typ                         string
	id                          *int
	delete_time                 *time.Time
	isRead                      *bool
	clearedFields               map[string]struct{}
	notificationObjectID        *int
	clearednotificationObjectID bool
	userID                      *int
	cleareduserID               bool
	done                        bool
	oldValue                    func(context.Context) (*Notification, error)
	predicates                  []predicate.Notification
}

var _ ent.Mutation = (*NotificationMutation)(nil)

// notificationOption allows management of the mutation configuration using functional options.
type notificationOption func(*NotificationMutation)

// newNotificationMutation creates new mutation for the Notification entity.
func newNotificationMutation(c config, op Op, opts ...notificationOption) *NotificationMutation {
	m := &NotificationMutation{
		config:        c,
		op:            op,
		typ:           TypeNotification,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withNotificationID sets the ID field of the mutation.
func withNotificationID(id int) notificationOption {
	return func(m *NotificationMutation) {
		var (
			err   error
			once  sync.Once
			value *Notification
		)
		m.oldValue = func(ctx context.Context) (*Notification, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Notification.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withNotification sets the old Notification of the mutation.
func withNotification(node *Notification) notificationOption {
	return func(m *NotificationMutation) {
		m.oldValue = func(context.Context) (*Notification, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m NotificationMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m NotificationMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *NotificationMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *NotificationMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Notification.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetDeleteTime sets the "delete_time" field.
func (m *NotificationMutation) SetDeleteTime(t time.Time) {
	m.delete_time = &t
}

// DeleteTime returns the value of the "delete_time" field in the mutation.
func (m *NotificationMutation) DeleteTime() (r time.Time, exists bool) {
	v := m.delete_time
	if v == nil {
		return
	}
	return *v, true
}

// OldDeleteTime returns the old "delete_time" field's value of the Notification entity.
// If the Notification object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NotificationMutation) OldDeleteTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeleteTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeleteTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeleteTime: %w", err)
	}
	return oldValue.DeleteTime, nil
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (m *NotificationMutation) ClearDeleteTime() {
	m.delete_time = nil
	m.clearedFields[notification.FieldDeleteTime] = struct{}{}
}

// DeleteTimeCleared returns if the "delete_time" field was cleared in this mutation.
func (m *NotificationMutation) DeleteTimeCleared() bool {
	_, ok := m.clearedFields[notification.FieldDeleteTime]
	return ok
}

// ResetDeleteTime resets all changes to the "delete_time" field.
func (m *NotificationMutation) ResetDeleteTime() {
	m.delete_time = nil
	delete(m.clearedFields, notification.FieldDeleteTime)
}

// SetIsRead sets the "isRead" field.
func (m *NotificationMutation) SetIsRead(b bool) {
	m.isRead = &b
}

// IsRead returns the value of the "isRead" field in the mutation.
func (m *NotificationMutation) IsRead() (r bool, exists bool) {
	v := m.isRead
	if v == nil {
		return
	}
	return *v, true
}

// OldIsRead returns the old "isRead" field's value of the Notification entity.
// If the Notification object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NotificationMutation) OldIsRead(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsRead is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsRead requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsRead: %w", err)
	}
	return oldValue.IsRead, nil
}

// ResetIsRead resets all changes to the "isRead" field.
func (m *NotificationMutation) ResetIsRead() {
	m.isRead = nil
}

// SetNotificationObjectIDID sets the "notificationObjectID" edge to the NotificationObjectID entity by id.
func (m *NotificationMutation) SetNotificationObjectIDID(id int) {
	m.notificationObjectID = &id
}

// ClearNotificationObjectID clears the "notificationObjectID" edge to the NotificationObjectID entity.
func (m *NotificationMutation) ClearNotificationObjectID() {
	m.clearednotificationObjectID = true
}

// NotificationObjectIDCleared reports if the "notificationObjectID" edge to the NotificationObjectID entity was cleared.
func (m *NotificationMutation) NotificationObjectIDCleared() bool {
	return m.clearednotificationObjectID
}

// NotificationObjectIDID returns the "notificationObjectID" edge ID in the mutation.
func (m *NotificationMutation) NotificationObjectIDID() (id int, exists bool) {
	if m.notificationObjectID != nil {
		return *m.notificationObjectID, true
	}
	return
}

// NotificationObjectIDIDs returns the "notificationObjectID" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// NotificationObjectIDID instead. It exists only for internal usage by the builders.
func (m *NotificationMutation) NotificationObjectIDIDs() (ids []int) {
	if id := m.notificationObjectID; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetNotificationObjectID resets all changes to the "notificationObjectID" edge.
func (m *NotificationMutation) ResetNotificationObjectID() {
	m.notificationObjectID = nil
	m.clearednotificationObjectID = false
}

// SetUserIDID sets the "userID" edge to the User entity by id.
func (m *NotificationMutation) SetUserIDID(id int) {
	m.userID = &id
}

// ClearUserID clears the "userID" edge to the User entity.
func (m *NotificationMutation) ClearUserID() {
	m.cleareduserID = true
}

// UserIDCleared reports if the "userID" edge to the User entity was cleared.
func (m *NotificationMutation) UserIDCleared() bool {
	return m.cleareduserID
}

// UserIDID returns the "userID" edge ID in the mutation.
func (m *NotificationMutation) UserIDID() (id int, exists bool) {
	if m.userID != nil {
		return *m.userID, true
	}
	return
}

// UserIDIDs returns the "userID" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// UserIDID instead. It exists only for internal usage by the builders.
func (m *NotificationMutation) UserIDIDs() (ids []int) {
	if id := m.userID; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUserID resets all changes to the "userID" edge.
func (m *NotificationMutation) ResetUserID() {
	m.userID = nil
	m.cleareduserID = false
}

// Where appends a list predicates to the NotificationMutation builder.
func (m *NotificationMutation) Where(ps ...predicate.Notification) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the NotificationMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *NotificationMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Notification, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *NotificationMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *NotificationMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Notification).
func (m *NotificationMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *NotificationMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.delete_time != nil {
		fields = append(fields, notification.FieldDeleteTime)
	}
	if m.isRead != nil {
		fields = append(fields, notification.FieldIsRead)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *NotificationMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case notification.FieldDeleteTime:
		return m.DeleteTime()
	case notification.FieldIsRead:
		return m.IsRead()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *NotificationMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case notification.FieldDeleteTime:
		return m.OldDeleteTime(ctx)
	case notification.FieldIsRead:
		return m.OldIsRead(ctx)
	}
	return nil, fmt.Errorf("unknown Notification field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *NotificationMutation) SetField(name string, value ent.Value) error {
	switch name {
	case notification.FieldDeleteTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeleteTime(v)
		return nil
	case notification.FieldIsRead:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsRead(v)
		return nil
	}
	return fmt.Errorf("unknown Notification field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *NotificationMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *NotificationMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *NotificationMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Notification numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *NotificationMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(notification.FieldDeleteTime) {
		fields = append(fields, notification.FieldDeleteTime)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *NotificationMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *NotificationMutation) ClearField(name string) error {
	switch name {
	case notification.FieldDeleteTime:
		m.ClearDeleteTime()
		return nil
	}
	return fmt.Errorf("unknown Notification nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *NotificationMutation) ResetField(name string) error {
	switch name {
	case notification.FieldDeleteTime:
		m.ResetDeleteTime()
		return nil
	case notification.FieldIsRead:
		m.ResetIsRead()
		return nil
	}
	return fmt.Errorf("unknown Notification field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *NotificationMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.notificationObjectID != nil {
		edges = append(edges, notification.EdgeNotificationObjectID)
	}
	if m.userID != nil {
		edges = append(edges, notification.EdgeUserID)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *NotificationMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case notification.EdgeNotificationObjectID:
		if id := m.notificationObjectID; id != nil {
			return []ent.Value{*id}
		}
	case notification.EdgeUserID:
		if id := m.userID; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *NotificationMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *NotificationMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *NotificationMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearednotificationObjectID {
		edges = append(edges, notification.EdgeNotificationObjectID)
	}
	if m.cleareduserID {
		edges = append(edges, notification.EdgeUserID)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *NotificationMutation) EdgeCleared(name string) bool {
	switch name {
	case notification.EdgeNotificationObjectID:
		return m.clearednotificationObjectID
	case notification.EdgeUserID:
		return m.cleareduserID
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *NotificationMutation) ClearEdge(name string) error {
	switch name {
	case notification.EdgeNotificationObjectID:
		m.ClearNotificationObjectID()
		return nil
	case notification.EdgeUserID:
		m.ClearUserID()
		return nil
	}
	return fmt.Errorf("unknown Notification unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *NotificationMutation) ResetEdge(name string) error {
	switch name {
	case notification.EdgeNotificationObjectID:
		m.ResetNotificationObjectID()
		return nil
	case notification.EdgeUserID:
		m.ResetUserID()
		return nil
	}
	return fmt.Errorf("unknown Notification edge %s", name)
}

// NotificationChangeMutation represents an operation that mutates the NotificationChange nodes in the graph.
type NotificationChangeMutation struct {
	config
	op                          Op
	typ                         string
	id                          *int
	delete_time                 *time.Time
	clearedFields               map[string]struct{}
	userID                      *int
	cleareduserID               bool
	notificationObjectID        *int
	clearednotificationObjectID bool
	done                        bool
	oldValue                    func(context.Context) (*NotificationChange, error)
	predicates                  []predicate.NotificationChange
}

var _ ent.Mutation = (*NotificationChangeMutation)(nil)

// notificationchangeOption allows management of the mutation configuration using functional options.
type notificationchangeOption func(*NotificationChangeMutation)

// newNotificationChangeMutation creates new mutation for the NotificationChange entity.
func newNotificationChangeMutation(c config, op Op, opts ...notificationchangeOption) *NotificationChangeMutation {
	m := &NotificationChangeMutation{
		config:        c,
		op:            op,
		typ:           TypeNotificationChange,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withNotificationChangeID sets the ID field of the mutation.
func withNotificationChangeID(id int) notificationchangeOption {
	return func(m *NotificationChangeMutation) {
		var (
			err   error
			once  sync.Once
			value *NotificationChange
		)
		m.oldValue = func(ctx context.Context) (*NotificationChange, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().NotificationChange.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withNotificationChange sets the old NotificationChange of the mutation.
func withNotificationChange(node *NotificationChange) notificationchangeOption {
	return func(m *NotificationChangeMutation) {
		m.oldValue = func(context.Context) (*NotificationChange, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m NotificationChangeMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m NotificationChangeMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *NotificationChangeMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *NotificationChangeMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().NotificationChange.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetDeleteTime sets the "delete_time" field.
func (m *NotificationChangeMutation) SetDeleteTime(t time.Time) {
	m.delete_time = &t
}

// DeleteTime returns the value of the "delete_time" field in the mutation.
func (m *NotificationChangeMutation) DeleteTime() (r time.Time, exists bool) {
	v := m.delete_time
	if v == nil {
		return
	}
	return *v, true
}

// OldDeleteTime returns the old "delete_time" field's value of the NotificationChange entity.
// If the NotificationChange object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NotificationChangeMutation) OldDeleteTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeleteTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeleteTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeleteTime: %w", err)
	}
	return oldValue.DeleteTime, nil
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (m *NotificationChangeMutation) ClearDeleteTime() {
	m.delete_time = nil
	m.clearedFields[notificationchange.FieldDeleteTime] = struct{}{}
}

// DeleteTimeCleared returns if the "delete_time" field was cleared in this mutation.
func (m *NotificationChangeMutation) DeleteTimeCleared() bool {
	_, ok := m.clearedFields[notificationchange.FieldDeleteTime]
	return ok
}

// ResetDeleteTime resets all changes to the "delete_time" field.
func (m *NotificationChangeMutation) ResetDeleteTime() {
	m.delete_time = nil
	delete(m.clearedFields, notificationchange.FieldDeleteTime)
}

// SetUserIDID sets the "userID" edge to the User entity by id.
func (m *NotificationChangeMutation) SetUserIDID(id int) {
	m.userID = &id
}

// ClearUserID clears the "userID" edge to the User entity.
func (m *NotificationChangeMutation) ClearUserID() {
	m.cleareduserID = true
}

// UserIDCleared reports if the "userID" edge to the User entity was cleared.
func (m *NotificationChangeMutation) UserIDCleared() bool {
	return m.cleareduserID
}

// UserIDID returns the "userID" edge ID in the mutation.
func (m *NotificationChangeMutation) UserIDID() (id int, exists bool) {
	if m.userID != nil {
		return *m.userID, true
	}
	return
}

// UserIDIDs returns the "userID" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// UserIDID instead. It exists only for internal usage by the builders.
func (m *NotificationChangeMutation) UserIDIDs() (ids []int) {
	if id := m.userID; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUserID resets all changes to the "userID" edge.
func (m *NotificationChangeMutation) ResetUserID() {
	m.userID = nil
	m.cleareduserID = false
}

// SetNotificationObjectIDID sets the "notificationObjectID" edge to the NotificationObjectID entity by id.
func (m *NotificationChangeMutation) SetNotificationObjectIDID(id int) {
	m.notificationObjectID = &id
}

// ClearNotificationObjectID clears the "notificationObjectID" edge to the NotificationObjectID entity.
func (m *NotificationChangeMutation) ClearNotificationObjectID() {
	m.clearednotificationObjectID = true
}

// NotificationObjectIDCleared reports if the "notificationObjectID" edge to the NotificationObjectID entity was cleared.
func (m *NotificationChangeMutation) NotificationObjectIDCleared() bool {
	return m.clearednotificationObjectID
}

// NotificationObjectIDID returns the "notificationObjectID" edge ID in the mutation.
func (m *NotificationChangeMutation) NotificationObjectIDID() (id int, exists bool) {
	if m.notificationObjectID != nil {
		return *m.notificationObjectID, true
	}
	return
}

// NotificationObjectIDIDs returns the "notificationObjectID" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// NotificationObjectIDID instead. It exists only for internal usage by the builders.
func (m *NotificationChangeMutation) NotificationObjectIDIDs() (ids []int) {
	if id := m.notificationObjectID; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetNotificationObjectID resets all changes to the "notificationObjectID" edge.
func (m *NotificationChangeMutation) ResetNotificationObjectID() {
	m.notificationObjectID = nil
	m.clearednotificationObjectID = false
}

// Where appends a list predicates to the NotificationChangeMutation builder.
func (m *NotificationChangeMutation) Where(ps ...predicate.NotificationChange) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the NotificationChangeMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *NotificationChangeMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.NotificationChange, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *NotificationChangeMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *NotificationChangeMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (NotificationChange).
func (m *NotificationChangeMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *NotificationChangeMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.delete_time != nil {
		fields = append(fields, notificationchange.FieldDeleteTime)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *NotificationChangeMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case notificationchange.FieldDeleteTime:
		return m.DeleteTime()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *NotificationChangeMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case notificationchange.FieldDeleteTime:
		return m.OldDeleteTime(ctx)
	}
	return nil, fmt.Errorf("unknown NotificationChange field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *NotificationChangeMutation) SetField(name string, value ent.Value) error {
	switch name {
	case notificationchange.FieldDeleteTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeleteTime(v)
		return nil
	}
	return fmt.Errorf("unknown NotificationChange field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *NotificationChangeMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *NotificationChangeMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *NotificationChangeMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown NotificationChange numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *NotificationChangeMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(notificationchange.FieldDeleteTime) {
		fields = append(fields, notificationchange.FieldDeleteTime)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *NotificationChangeMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *NotificationChangeMutation) ClearField(name string) error {
	switch name {
	case notificationchange.FieldDeleteTime:
		m.ClearDeleteTime()
		return nil
	}
	return fmt.Errorf("unknown NotificationChange nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *NotificationChangeMutation) ResetField(name string) error {
	switch name {
	case notificationchange.FieldDeleteTime:
		m.ResetDeleteTime()
		return nil
	}
	return fmt.Errorf("unknown NotificationChange field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *NotificationChangeMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.userID != nil {
		edges = append(edges, notificationchange.EdgeUserID)
	}
	if m.notificationObjectID != nil {
		edges = append(edges, notificationchange.EdgeNotificationObjectID)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *NotificationChangeMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case notificationchange.EdgeUserID:
		if id := m.userID; id != nil {
			return []ent.Value{*id}
		}
	case notificationchange.EdgeNotificationObjectID:
		if id := m.notificationObjectID; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *NotificationChangeMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *NotificationChangeMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *NotificationChangeMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.cleareduserID {
		edges = append(edges, notificationchange.EdgeUserID)
	}
	if m.clearednotificationObjectID {
		edges = append(edges, notificationchange.EdgeNotificationObjectID)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *NotificationChangeMutation) EdgeCleared(name string) bool {
	switch name {
	case notificationchange.EdgeUserID:
		return m.cleareduserID
	case notificationchange.EdgeNotificationObjectID:
		return m.clearednotificationObjectID
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *NotificationChangeMutation) ClearEdge(name string) error {
	switch name {
	case notificationchange.EdgeUserID:
		m.ClearUserID()
		return nil
	case notificationchange.EdgeNotificationObjectID:
		m.ClearNotificationObjectID()
		return nil
	}
	return fmt.Errorf("unknown NotificationChange unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *NotificationChangeMutation) ResetEdge(name string) error {
	switch name {
	case notificationchange.EdgeUserID:
		m.ResetUserID()
		return nil
	case notificationchange.EdgeNotificationObjectID:
		m.ResetNotificationObjectID()
		return nil
	}
	return fmt.Errorf("unknown NotificationChange edge %s", name)
}

// NotificationObjectIDMutation represents an operation that mutates the NotificationObjectID nodes in the graph.
type NotificationObjectIDMutation struct {
	config
	op                         Op
	typ                        string
	id                         *int
	delete_time                *time.Time
	entity_id                  *int
	addentity_id               *int
	clearedFields              map[string]struct{}
	notifications              map[int]struct{}
	removednotifications       map[int]struct{}
	clearednotifications       bool
	notificationChanges        map[int]struct{}
	removednotificationChanges map[int]struct{}
	clearednotificationChanges bool
	entityTypeID               *int
	clearedentityTypeID        bool
	done                       bool
	oldValue                   func(context.Context) (*NotificationObjectID, error)
	predicates                 []predicate.NotificationObjectID
}

var _ ent.Mutation = (*NotificationObjectIDMutation)(nil)

// notificationobjectidOption allows management of the mutation configuration using functional options.
type notificationobjectidOption func(*NotificationObjectIDMutation)

// newNotificationObjectIDMutation creates new mutation for the NotificationObjectID entity.
func newNotificationObjectIDMutation(c config, op Op, opts ...notificationobjectidOption) *NotificationObjectIDMutation {
	m := &NotificationObjectIDMutation{
		config:        c,
		op:            op,
		typ:           TypeNotificationObjectID,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withNotificationObjectIDID sets the ID field of the mutation.
func withNotificationObjectIDID(id int) notificationobjectidOption {
	return func(m *NotificationObjectIDMutation) {
		var (
			err   error
			once  sync.Once
			value *NotificationObjectID
		)
		m.oldValue = func(ctx context.Context) (*NotificationObjectID, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().NotificationObjectID.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withNotificationObjectID sets the old NotificationObjectID of the mutation.
func withNotificationObjectID(node *NotificationObjectID) notificationobjectidOption {
	return func(m *NotificationObjectIDMutation) {
		m.oldValue = func(context.Context) (*NotificationObjectID, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m NotificationObjectIDMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m NotificationObjectIDMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *NotificationObjectIDMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *NotificationObjectIDMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().NotificationObjectID.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetDeleteTime sets the "delete_time" field.
func (m *NotificationObjectIDMutation) SetDeleteTime(t time.Time) {
	m.delete_time = &t
}

// DeleteTime returns the value of the "delete_time" field in the mutation.
func (m *NotificationObjectIDMutation) DeleteTime() (r time.Time, exists bool) {
	v := m.delete_time
	if v == nil {
		return
	}
	return *v, true
}

// OldDeleteTime returns the old "delete_time" field's value of the NotificationObjectID entity.
// If the NotificationObjectID object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NotificationObjectIDMutation) OldDeleteTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeleteTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeleteTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeleteTime: %w", err)
	}
	return oldValue.DeleteTime, nil
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (m *NotificationObjectIDMutation) ClearDeleteTime() {
	m.delete_time = nil
	m.clearedFields[notificationobjectid.FieldDeleteTime] = struct{}{}
}

// DeleteTimeCleared returns if the "delete_time" field was cleared in this mutation.
func (m *NotificationObjectIDMutation) DeleteTimeCleared() bool {
	_, ok := m.clearedFields[notificationobjectid.FieldDeleteTime]
	return ok
}

// ResetDeleteTime resets all changes to the "delete_time" field.
func (m *NotificationObjectIDMutation) ResetDeleteTime() {
	m.delete_time = nil
	delete(m.clearedFields, notificationobjectid.FieldDeleteTime)
}

// SetEntityID sets the "entity_id" field.
func (m *NotificationObjectIDMutation) SetEntityID(i int) {
	m.entity_id = &i
	m.addentity_id = nil
}

// EntityID returns the value of the "entity_id" field in the mutation.
func (m *NotificationObjectIDMutation) EntityID() (r int, exists bool) {
	v := m.entity_id
	if v == nil {
		return
	}
	return *v, true
}

// OldEntityID returns the old "entity_id" field's value of the NotificationObjectID entity.
// If the NotificationObjectID object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NotificationObjectIDMutation) OldEntityID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEntityID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEntityID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEntityID: %w", err)
	}
	return oldValue.EntityID, nil
}

// AddEntityID adds i to the "entity_id" field.
func (m *NotificationObjectIDMutation) AddEntityID(i int) {
	if m.addentity_id != nil {
		*m.addentity_id += i
	} else {
		m.addentity_id = &i
	}
}

// AddedEntityID returns the value that was added to the "entity_id" field in this mutation.
func (m *NotificationObjectIDMutation) AddedEntityID() (r int, exists bool) {
	v := m.addentity_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetEntityID resets all changes to the "entity_id" field.
func (m *NotificationObjectIDMutation) ResetEntityID() {
	m.entity_id = nil
	m.addentity_id = nil
}

// AddNotificationIDs adds the "notifications" edge to the Notification entity by ids.
func (m *NotificationObjectIDMutation) AddNotificationIDs(ids ...int) {
	if m.notifications == nil {
		m.notifications = make(map[int]struct{})
	}
	for i := range ids {
		m.notifications[ids[i]] = struct{}{}
	}
}

// ClearNotifications clears the "notifications" edge to the Notification entity.
func (m *NotificationObjectIDMutation) ClearNotifications() {
	m.clearednotifications = true
}

// NotificationsCleared reports if the "notifications" edge to the Notification entity was cleared.
func (m *NotificationObjectIDMutation) NotificationsCleared() bool {
	return m.clearednotifications
}

// RemoveNotificationIDs removes the "notifications" edge to the Notification entity by IDs.
func (m *NotificationObjectIDMutation) RemoveNotificationIDs(ids ...int) {
	if m.removednotifications == nil {
		m.removednotifications = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.notifications, ids[i])
		m.removednotifications[ids[i]] = struct{}{}
	}
}

// RemovedNotifications returns the removed IDs of the "notifications" edge to the Notification entity.
func (m *NotificationObjectIDMutation) RemovedNotificationsIDs() (ids []int) {
	for id := range m.removednotifications {
		ids = append(ids, id)
	}
	return
}

// NotificationsIDs returns the "notifications" edge IDs in the mutation.
func (m *NotificationObjectIDMutation) NotificationsIDs() (ids []int) {
	for id := range m.notifications {
		ids = append(ids, id)
	}
	return
}

// ResetNotifications resets all changes to the "notifications" edge.
func (m *NotificationObjectIDMutation) ResetNotifications() {
	m.notifications = nil
	m.clearednotifications = false
	m.removednotifications = nil
}

// AddNotificationChangeIDs adds the "notificationChanges" edge to the NotificationChange entity by ids.
func (m *NotificationObjectIDMutation) AddNotificationChangeIDs(ids ...int) {
	if m.notificationChanges == nil {
		m.notificationChanges = make(map[int]struct{})
	}
	for i := range ids {
		m.notificationChanges[ids[i]] = struct{}{}
	}
}

// ClearNotificationChanges clears the "notificationChanges" edge to the NotificationChange entity.
func (m *NotificationObjectIDMutation) ClearNotificationChanges() {
	m.clearednotificationChanges = true
}

// NotificationChangesCleared reports if the "notificationChanges" edge to the NotificationChange entity was cleared.
func (m *NotificationObjectIDMutation) NotificationChangesCleared() bool {
	return m.clearednotificationChanges
}

// RemoveNotificationChangeIDs removes the "notificationChanges" edge to the NotificationChange entity by IDs.
func (m *NotificationObjectIDMutation) RemoveNotificationChangeIDs(ids ...int) {
	if m.removednotificationChanges == nil {
		m.removednotificationChanges = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.notificationChanges, ids[i])
		m.removednotificationChanges[ids[i]] = struct{}{}
	}
}

// RemovedNotificationChanges returns the removed IDs of the "notificationChanges" edge to the NotificationChange entity.
func (m *NotificationObjectIDMutation) RemovedNotificationChangesIDs() (ids []int) {
	for id := range m.removednotificationChanges {
		ids = append(ids, id)
	}
	return
}

// NotificationChangesIDs returns the "notificationChanges" edge IDs in the mutation.
func (m *NotificationObjectIDMutation) NotificationChangesIDs() (ids []int) {
	for id := range m.notificationChanges {
		ids = append(ids, id)
	}
	return
}

// ResetNotificationChanges resets all changes to the "notificationChanges" edge.
func (m *NotificationObjectIDMutation) ResetNotificationChanges() {
	m.notificationChanges = nil
	m.clearednotificationChanges = false
	m.removednotificationChanges = nil
}

// SetEntityTypeIDID sets the "entityTypeID" edge to the EntityType entity by id.
func (m *NotificationObjectIDMutation) SetEntityTypeIDID(id int) {
	m.entityTypeID = &id
}

// ClearEntityTypeID clears the "entityTypeID" edge to the EntityType entity.
func (m *NotificationObjectIDMutation) ClearEntityTypeID() {
	m.clearedentityTypeID = true
}

// EntityTypeIDCleared reports if the "entityTypeID" edge to the EntityType entity was cleared.
func (m *NotificationObjectIDMutation) EntityTypeIDCleared() bool {
	return m.clearedentityTypeID
}

// EntityTypeIDID returns the "entityTypeID" edge ID in the mutation.
func (m *NotificationObjectIDMutation) EntityTypeIDID() (id int, exists bool) {
	if m.entityTypeID != nil {
		return *m.entityTypeID, true
	}
	return
}

// EntityTypeIDIDs returns the "entityTypeID" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// EntityTypeIDID instead. It exists only for internal usage by the builders.
func (m *NotificationObjectIDMutation) EntityTypeIDIDs() (ids []int) {
	if id := m.entityTypeID; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetEntityTypeID resets all changes to the "entityTypeID" edge.
func (m *NotificationObjectIDMutation) ResetEntityTypeID() {
	m.entityTypeID = nil
	m.clearedentityTypeID = false
}

// Where appends a list predicates to the NotificationObjectIDMutation builder.
func (m *NotificationObjectIDMutation) Where(ps ...predicate.NotificationObjectID) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the NotificationObjectIDMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *NotificationObjectIDMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.NotificationObjectID, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *NotificationObjectIDMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *NotificationObjectIDMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (NotificationObjectID).
func (m *NotificationObjectIDMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *NotificationObjectIDMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.delete_time != nil {
		fields = append(fields, notificationobjectid.FieldDeleteTime)
	}
	if m.entity_id != nil {
		fields = append(fields, notificationobjectid.FieldEntityID)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *NotificationObjectIDMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case notificationobjectid.FieldDeleteTime:
		return m.DeleteTime()
	case notificationobjectid.FieldEntityID:
		return m.EntityID()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *NotificationObjectIDMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case notificationobjectid.FieldDeleteTime:
		return m.OldDeleteTime(ctx)
	case notificationobjectid.FieldEntityID:
		return m.OldEntityID(ctx)
	}
	return nil, fmt.Errorf("unknown NotificationObjectID field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *NotificationObjectIDMutation) SetField(name string, value ent.Value) error {
	switch name {
	case notificationobjectid.FieldDeleteTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeleteTime(v)
		return nil
	case notificationobjectid.FieldEntityID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEntityID(v)
		return nil
	}
	return fmt.Errorf("unknown NotificationObjectID field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *NotificationObjectIDMutation) AddedFields() []string {
	var fields []string
	if m.addentity_id != nil {
		fields = append(fields, notificationobjectid.FieldEntityID)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *NotificationObjectIDMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case notificationobjectid.FieldEntityID:
		return m.AddedEntityID()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *NotificationObjectIDMutation) AddField(name string, value ent.Value) error {
	switch name {
	case notificationobjectid.FieldEntityID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddEntityID(v)
		return nil
	}
	return fmt.Errorf("unknown NotificationObjectID numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *NotificationObjectIDMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(notificationobjectid.FieldDeleteTime) {
		fields = append(fields, notificationobjectid.FieldDeleteTime)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *NotificationObjectIDMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *NotificationObjectIDMutation) ClearField(name string) error {
	switch name {
	case notificationobjectid.FieldDeleteTime:
		m.ClearDeleteTime()
		return nil
	}
	return fmt.Errorf("unknown NotificationObjectID nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *NotificationObjectIDMutation) ResetField(name string) error {
	switch name {
	case notificationobjectid.FieldDeleteTime:
		m.ResetDeleteTime()
		return nil
	case notificationobjectid.FieldEntityID:
		m.ResetEntityID()
		return nil
	}
	return fmt.Errorf("unknown NotificationObjectID field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *NotificationObjectIDMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m.notifications != nil {
		edges = append(edges, notificationobjectid.EdgeNotifications)
	}
	if m.notificationChanges != nil {
		edges = append(edges, notificationobjectid.EdgeNotificationChanges)
	}
	if m.entityTypeID != nil {
		edges = append(edges, notificationobjectid.EdgeEntityTypeID)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *NotificationObjectIDMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case notificationobjectid.EdgeNotifications:
		ids := make([]ent.Value, 0, len(m.notifications))
		for id := range m.notifications {
			ids = append(ids, id)
		}
		return ids
	case notificationobjectid.EdgeNotificationChanges:
		ids := make([]ent.Value, 0, len(m.notificationChanges))
		for id := range m.notificationChanges {
			ids = append(ids, id)
		}
		return ids
	case notificationobjectid.EdgeEntityTypeID:
		if id := m.entityTypeID; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *NotificationObjectIDMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	if m.removednotifications != nil {
		edges = append(edges, notificationobjectid.EdgeNotifications)
	}
	if m.removednotificationChanges != nil {
		edges = append(edges, notificationobjectid.EdgeNotificationChanges)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *NotificationObjectIDMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case notificationobjectid.EdgeNotifications:
		ids := make([]ent.Value, 0, len(m.removednotifications))
		for id := range m.removednotifications {
			ids = append(ids, id)
		}
		return ids
	case notificationobjectid.EdgeNotificationChanges:
		ids := make([]ent.Value, 0, len(m.removednotificationChanges))
		for id := range m.removednotificationChanges {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *NotificationObjectIDMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	if m.clearednotifications {
		edges = append(edges, notificationobjectid.EdgeNotifications)
	}
	if m.clearednotificationChanges {
		edges = append(edges, notificationobjectid.EdgeNotificationChanges)
	}
	if m.clearedentityTypeID {
		edges = append(edges, notificationobjectid.EdgeEntityTypeID)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *NotificationObjectIDMutation) EdgeCleared(name string) bool {
	switch name {
	case notificationobjectid.EdgeNotifications:
		return m.clearednotifications
	case notificationobjectid.EdgeNotificationChanges:
		return m.clearednotificationChanges
	case notificationobjectid.EdgeEntityTypeID:
		return m.clearedentityTypeID
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *NotificationObjectIDMutation) ClearEdge(name string) error {
	switch name {
	case notificationobjectid.EdgeEntityTypeID:
		m.ClearEntityTypeID()
		return nil
	}
	return fmt.Errorf("unknown NotificationObjectID unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *NotificationObjectIDMutation) ResetEdge(name string) error {
	switch name {
	case notificationobjectid.EdgeNotifications:
		m.ResetNotifications()
		return nil
	case notificationobjectid.EdgeNotificationChanges:
		m.ResetNotificationChanges()
		return nil
	case notificationobjectid.EdgeEntityTypeID:
		m.ResetEntityTypeID()
		return nil
	}
	return fmt.Errorf("unknown NotificationObjectID edge %s", name)
}

// TokTokMutation represents an operation that mutates the TokTok nodes in the graph.
type TokTokMutation struct {
	config
	op                Op
	typ               string
	id                *int
	delete_time       *time.Time
	clearedFields     map[string]struct{}
	receiverID        *int
	clearedreceiverID bool
	senderID          *int
	clearedsenderID   bool
	done              bool
	oldValue          func(context.Context) (*TokTok, error)
	predicates        []predicate.TokTok
}

var _ ent.Mutation = (*TokTokMutation)(nil)

// toktokOption allows management of the mutation configuration using functional options.
type toktokOption func(*TokTokMutation)

// newTokTokMutation creates new mutation for the TokTok entity.
func newTokTokMutation(c config, op Op, opts ...toktokOption) *TokTokMutation {
	m := &TokTokMutation{
		config:        c,
		op:            op,
		typ:           TypeTokTok,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withTokTokID sets the ID field of the mutation.
func withTokTokID(id int) toktokOption {
	return func(m *TokTokMutation) {
		var (
			err   error
			once  sync.Once
			value *TokTok
		)
		m.oldValue = func(ctx context.Context) (*TokTok, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().TokTok.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withTokTok sets the old TokTok of the mutation.
func withTokTok(node *TokTok) toktokOption {
	return func(m *TokTokMutation) {
		m.oldValue = func(context.Context) (*TokTok, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m TokTokMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m TokTokMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *TokTokMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *TokTokMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().TokTok.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetDeleteTime sets the "delete_time" field.
func (m *TokTokMutation) SetDeleteTime(t time.Time) {
	m.delete_time = &t
}

// DeleteTime returns the value of the "delete_time" field in the mutation.
func (m *TokTokMutation) DeleteTime() (r time.Time, exists bool) {
	v := m.delete_time
	if v == nil {
		return
	}
	return *v, true
}

// OldDeleteTime returns the old "delete_time" field's value of the TokTok entity.
// If the TokTok object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TokTokMutation) OldDeleteTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeleteTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeleteTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeleteTime: %w", err)
	}
	return oldValue.DeleteTime, nil
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (m *TokTokMutation) ClearDeleteTime() {
	m.delete_time = nil
	m.clearedFields[toktok.FieldDeleteTime] = struct{}{}
}

// DeleteTimeCleared returns if the "delete_time" field was cleared in this mutation.
func (m *TokTokMutation) DeleteTimeCleared() bool {
	_, ok := m.clearedFields[toktok.FieldDeleteTime]
	return ok
}

// ResetDeleteTime resets all changes to the "delete_time" field.
func (m *TokTokMutation) ResetDeleteTime() {
	m.delete_time = nil
	delete(m.clearedFields, toktok.FieldDeleteTime)
}

// SetReceiverIDID sets the "receiverID" edge to the User entity by id.
func (m *TokTokMutation) SetReceiverIDID(id int) {
	m.receiverID = &id
}

// ClearReceiverID clears the "receiverID" edge to the User entity.
func (m *TokTokMutation) ClearReceiverID() {
	m.clearedreceiverID = true
}

// ReceiverIDCleared reports if the "receiverID" edge to the User entity was cleared.
func (m *TokTokMutation) ReceiverIDCleared() bool {
	return m.clearedreceiverID
}

// ReceiverIDID returns the "receiverID" edge ID in the mutation.
func (m *TokTokMutation) ReceiverIDID() (id int, exists bool) {
	if m.receiverID != nil {
		return *m.receiverID, true
	}
	return
}

// ReceiverIDIDs returns the "receiverID" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ReceiverIDID instead. It exists only for internal usage by the builders.
func (m *TokTokMutation) ReceiverIDIDs() (ids []int) {
	if id := m.receiverID; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetReceiverID resets all changes to the "receiverID" edge.
func (m *TokTokMutation) ResetReceiverID() {
	m.receiverID = nil
	m.clearedreceiverID = false
}

// SetSenderIDID sets the "senderID" edge to the User entity by id.
func (m *TokTokMutation) SetSenderIDID(id int) {
	m.senderID = &id
}

// ClearSenderID clears the "senderID" edge to the User entity.
func (m *TokTokMutation) ClearSenderID() {
	m.clearedsenderID = true
}

// SenderIDCleared reports if the "senderID" edge to the User entity was cleared.
func (m *TokTokMutation) SenderIDCleared() bool {
	return m.clearedsenderID
}

// SenderIDID returns the "senderID" edge ID in the mutation.
func (m *TokTokMutation) SenderIDID() (id int, exists bool) {
	if m.senderID != nil {
		return *m.senderID, true
	}
	return
}

// SenderIDIDs returns the "senderID" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// SenderIDID instead. It exists only for internal usage by the builders.
func (m *TokTokMutation) SenderIDIDs() (ids []int) {
	if id := m.senderID; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetSenderID resets all changes to the "senderID" edge.
func (m *TokTokMutation) ResetSenderID() {
	m.senderID = nil
	m.clearedsenderID = false
}

// Where appends a list predicates to the TokTokMutation builder.
func (m *TokTokMutation) Where(ps ...predicate.TokTok) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the TokTokMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *TokTokMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.TokTok, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *TokTokMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *TokTokMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (TokTok).
func (m *TokTokMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *TokTokMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.delete_time != nil {
		fields = append(fields, toktok.FieldDeleteTime)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *TokTokMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case toktok.FieldDeleteTime:
		return m.DeleteTime()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *TokTokMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case toktok.FieldDeleteTime:
		return m.OldDeleteTime(ctx)
	}
	return nil, fmt.Errorf("unknown TokTok field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TokTokMutation) SetField(name string, value ent.Value) error {
	switch name {
	case toktok.FieldDeleteTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeleteTime(v)
		return nil
	}
	return fmt.Errorf("unknown TokTok field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *TokTokMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *TokTokMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TokTokMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown TokTok numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *TokTokMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(toktok.FieldDeleteTime) {
		fields = append(fields, toktok.FieldDeleteTime)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *TokTokMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *TokTokMutation) ClearField(name string) error {
	switch name {
	case toktok.FieldDeleteTime:
		m.ClearDeleteTime()
		return nil
	}
	return fmt.Errorf("unknown TokTok nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *TokTokMutation) ResetField(name string) error {
	switch name {
	case toktok.FieldDeleteTime:
		m.ResetDeleteTime()
		return nil
	}
	return fmt.Errorf("unknown TokTok field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *TokTokMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.receiverID != nil {
		edges = append(edges, toktok.EdgeReceiverID)
	}
	if m.senderID != nil {
		edges = append(edges, toktok.EdgeSenderID)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *TokTokMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case toktok.EdgeReceiverID:
		if id := m.receiverID; id != nil {
			return []ent.Value{*id}
		}
	case toktok.EdgeSenderID:
		if id := m.senderID; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *TokTokMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *TokTokMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *TokTokMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedreceiverID {
		edges = append(edges, toktok.EdgeReceiverID)
	}
	if m.clearedsenderID {
		edges = append(edges, toktok.EdgeSenderID)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *TokTokMutation) EdgeCleared(name string) bool {
	switch name {
	case toktok.EdgeReceiverID:
		return m.clearedreceiverID
	case toktok.EdgeSenderID:
		return m.clearedsenderID
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *TokTokMutation) ClearEdge(name string) error {
	switch name {
	case toktok.EdgeReceiverID:
		m.ClearReceiverID()
		return nil
	case toktok.EdgeSenderID:
		m.ClearSenderID()
		return nil
	}
	return fmt.Errorf("unknown TokTok unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *TokTokMutation) ResetEdge(name string) error {
	switch name {
	case toktok.EdgeReceiverID:
		m.ResetReceiverID()
		return nil
	case toktok.EdgeSenderID:
		m.ResetSenderID()
		return nil
	}
	return fmt.Errorf("unknown TokTok edge %s", name)
}

// UserMutation represents an operation that mutates the User nodes in the graph.
type UserMutation struct {
	config
	op                         Op
	typ                        string
	id                         *int
	delete_time                *time.Time
	username                   *string
	clearedFields              map[string]struct{}
	toktoks_receiver           map[int]struct{}
	removedtoktoks_receiver    map[int]struct{}
	clearedtoktoks_receiver    bool
	toktoks_sender             map[int]struct{}
	removedtoktoks_sender      map[int]struct{}
	clearedtoktoks_sender      bool
	notifications              map[int]struct{}
	removednotifications       map[int]struct{}
	clearednotifications       bool
	notificationChanges        map[int]struct{}
	removednotificationChanges map[int]struct{}
	clearednotificationChanges bool
	done                       bool
	oldValue                   func(context.Context) (*User, error)
	predicates                 []predicate.User
}

var _ ent.Mutation = (*UserMutation)(nil)

// userOption allows management of the mutation configuration using functional options.
type userOption func(*UserMutation)

// newUserMutation creates new mutation for the User entity.
func newUserMutation(c config, op Op, opts ...userOption) *UserMutation {
	m := &UserMutation{
		config:        c,
		op:            op,
		typ:           TypeUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserID sets the ID field of the mutation.
func withUserID(id int) userOption {
	return func(m *UserMutation) {
		var (
			err   error
			once  sync.Once
			value *User
		)
		m.oldValue = func(ctx context.Context) (*User, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().User.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUser sets the old User of the mutation.
func withUser(node *User) userOption {
	return func(m *UserMutation) {
		m.oldValue = func(context.Context) (*User, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *UserMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().User.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetDeleteTime sets the "delete_time" field.
func (m *UserMutation) SetDeleteTime(t time.Time) {
	m.delete_time = &t
}

// DeleteTime returns the value of the "delete_time" field in the mutation.
func (m *UserMutation) DeleteTime() (r time.Time, exists bool) {
	v := m.delete_time
	if v == nil {
		return
	}
	return *v, true
}

// OldDeleteTime returns the old "delete_time" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldDeleteTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeleteTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeleteTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeleteTime: %w", err)
	}
	return oldValue.DeleteTime, nil
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (m *UserMutation) ClearDeleteTime() {
	m.delete_time = nil
	m.clearedFields[user.FieldDeleteTime] = struct{}{}
}

// DeleteTimeCleared returns if the "delete_time" field was cleared in this mutation.
func (m *UserMutation) DeleteTimeCleared() bool {
	_, ok := m.clearedFields[user.FieldDeleteTime]
	return ok
}

// ResetDeleteTime resets all changes to the "delete_time" field.
func (m *UserMutation) ResetDeleteTime() {
	m.delete_time = nil
	delete(m.clearedFields, user.FieldDeleteTime)
}

// SetUsername sets the "username" field.
func (m *UserMutation) SetUsername(s string) {
	m.username = &s
}

// Username returns the value of the "username" field in the mutation.
func (m *UserMutation) Username() (r string, exists bool) {
	v := m.username
	if v == nil {
		return
	}
	return *v, true
}

// OldUsername returns the old "username" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldUsername(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUsername is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUsername requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUsername: %w", err)
	}
	return oldValue.Username, nil
}

// ResetUsername resets all changes to the "username" field.
func (m *UserMutation) ResetUsername() {
	m.username = nil
}

// AddToktoksReceiverIDs adds the "toktoks_receiver" edge to the TokTok entity by ids.
func (m *UserMutation) AddToktoksReceiverIDs(ids ...int) {
	if m.toktoks_receiver == nil {
		m.toktoks_receiver = make(map[int]struct{})
	}
	for i := range ids {
		m.toktoks_receiver[ids[i]] = struct{}{}
	}
}

// ClearToktoksReceiver clears the "toktoks_receiver" edge to the TokTok entity.
func (m *UserMutation) ClearToktoksReceiver() {
	m.clearedtoktoks_receiver = true
}

// ToktoksReceiverCleared reports if the "toktoks_receiver" edge to the TokTok entity was cleared.
func (m *UserMutation) ToktoksReceiverCleared() bool {
	return m.clearedtoktoks_receiver
}

// RemoveToktoksReceiverIDs removes the "toktoks_receiver" edge to the TokTok entity by IDs.
func (m *UserMutation) RemoveToktoksReceiverIDs(ids ...int) {
	if m.removedtoktoks_receiver == nil {
		m.removedtoktoks_receiver = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.toktoks_receiver, ids[i])
		m.removedtoktoks_receiver[ids[i]] = struct{}{}
	}
}

// RemovedToktoksReceiver returns the removed IDs of the "toktoks_receiver" edge to the TokTok entity.
func (m *UserMutation) RemovedToktoksReceiverIDs() (ids []int) {
	for id := range m.removedtoktoks_receiver {
		ids = append(ids, id)
	}
	return
}

// ToktoksReceiverIDs returns the "toktoks_receiver" edge IDs in the mutation.
func (m *UserMutation) ToktoksReceiverIDs() (ids []int) {
	for id := range m.toktoks_receiver {
		ids = append(ids, id)
	}
	return
}

// ResetToktoksReceiver resets all changes to the "toktoks_receiver" edge.
func (m *UserMutation) ResetToktoksReceiver() {
	m.toktoks_receiver = nil
	m.clearedtoktoks_receiver = false
	m.removedtoktoks_receiver = nil
}

// AddToktoksSenderIDs adds the "toktoks_sender" edge to the TokTok entity by ids.
func (m *UserMutation) AddToktoksSenderIDs(ids ...int) {
	if m.toktoks_sender == nil {
		m.toktoks_sender = make(map[int]struct{})
	}
	for i := range ids {
		m.toktoks_sender[ids[i]] = struct{}{}
	}
}

// ClearToktoksSender clears the "toktoks_sender" edge to the TokTok entity.
func (m *UserMutation) ClearToktoksSender() {
	m.clearedtoktoks_sender = true
}

// ToktoksSenderCleared reports if the "toktoks_sender" edge to the TokTok entity was cleared.
func (m *UserMutation) ToktoksSenderCleared() bool {
	return m.clearedtoktoks_sender
}

// RemoveToktoksSenderIDs removes the "toktoks_sender" edge to the TokTok entity by IDs.
func (m *UserMutation) RemoveToktoksSenderIDs(ids ...int) {
	if m.removedtoktoks_sender == nil {
		m.removedtoktoks_sender = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.toktoks_sender, ids[i])
		m.removedtoktoks_sender[ids[i]] = struct{}{}
	}
}

// RemovedToktoksSender returns the removed IDs of the "toktoks_sender" edge to the TokTok entity.
func (m *UserMutation) RemovedToktoksSenderIDs() (ids []int) {
	for id := range m.removedtoktoks_sender {
		ids = append(ids, id)
	}
	return
}

// ToktoksSenderIDs returns the "toktoks_sender" edge IDs in the mutation.
func (m *UserMutation) ToktoksSenderIDs() (ids []int) {
	for id := range m.toktoks_sender {
		ids = append(ids, id)
	}
	return
}

// ResetToktoksSender resets all changes to the "toktoks_sender" edge.
func (m *UserMutation) ResetToktoksSender() {
	m.toktoks_sender = nil
	m.clearedtoktoks_sender = false
	m.removedtoktoks_sender = nil
}

// AddNotificationIDs adds the "notifications" edge to the Notification entity by ids.
func (m *UserMutation) AddNotificationIDs(ids ...int) {
	if m.notifications == nil {
		m.notifications = make(map[int]struct{})
	}
	for i := range ids {
		m.notifications[ids[i]] = struct{}{}
	}
}

// ClearNotifications clears the "notifications" edge to the Notification entity.
func (m *UserMutation) ClearNotifications() {
	m.clearednotifications = true
}

// NotificationsCleared reports if the "notifications" edge to the Notification entity was cleared.
func (m *UserMutation) NotificationsCleared() bool {
	return m.clearednotifications
}

// RemoveNotificationIDs removes the "notifications" edge to the Notification entity by IDs.
func (m *UserMutation) RemoveNotificationIDs(ids ...int) {
	if m.removednotifications == nil {
		m.removednotifications = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.notifications, ids[i])
		m.removednotifications[ids[i]] = struct{}{}
	}
}

// RemovedNotifications returns the removed IDs of the "notifications" edge to the Notification entity.
func (m *UserMutation) RemovedNotificationsIDs() (ids []int) {
	for id := range m.removednotifications {
		ids = append(ids, id)
	}
	return
}

// NotificationsIDs returns the "notifications" edge IDs in the mutation.
func (m *UserMutation) NotificationsIDs() (ids []int) {
	for id := range m.notifications {
		ids = append(ids, id)
	}
	return
}

// ResetNotifications resets all changes to the "notifications" edge.
func (m *UserMutation) ResetNotifications() {
	m.notifications = nil
	m.clearednotifications = false
	m.removednotifications = nil
}

// AddNotificationChangeIDs adds the "notificationChanges" edge to the NotificationChange entity by ids.
func (m *UserMutation) AddNotificationChangeIDs(ids ...int) {
	if m.notificationChanges == nil {
		m.notificationChanges = make(map[int]struct{})
	}
	for i := range ids {
		m.notificationChanges[ids[i]] = struct{}{}
	}
}

// ClearNotificationChanges clears the "notificationChanges" edge to the NotificationChange entity.
func (m *UserMutation) ClearNotificationChanges() {
	m.clearednotificationChanges = true
}

// NotificationChangesCleared reports if the "notificationChanges" edge to the NotificationChange entity was cleared.
func (m *UserMutation) NotificationChangesCleared() bool {
	return m.clearednotificationChanges
}

// RemoveNotificationChangeIDs removes the "notificationChanges" edge to the NotificationChange entity by IDs.
func (m *UserMutation) RemoveNotificationChangeIDs(ids ...int) {
	if m.removednotificationChanges == nil {
		m.removednotificationChanges = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.notificationChanges, ids[i])
		m.removednotificationChanges[ids[i]] = struct{}{}
	}
}

// RemovedNotificationChanges returns the removed IDs of the "notificationChanges" edge to the NotificationChange entity.
func (m *UserMutation) RemovedNotificationChangesIDs() (ids []int) {
	for id := range m.removednotificationChanges {
		ids = append(ids, id)
	}
	return
}

// NotificationChangesIDs returns the "notificationChanges" edge IDs in the mutation.
func (m *UserMutation) NotificationChangesIDs() (ids []int) {
	for id := range m.notificationChanges {
		ids = append(ids, id)
	}
	return
}

// ResetNotificationChanges resets all changes to the "notificationChanges" edge.
func (m *UserMutation) ResetNotificationChanges() {
	m.notificationChanges = nil
	m.clearednotificationChanges = false
	m.removednotificationChanges = nil
}

// Where appends a list predicates to the UserMutation builder.
func (m *UserMutation) Where(ps ...predicate.User) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the UserMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *UserMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.User, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *UserMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *UserMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (User).
func (m *UserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.delete_time != nil {
		fields = append(fields, user.FieldDeleteTime)
	}
	if m.username != nil {
		fields = append(fields, user.FieldUsername)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case user.FieldDeleteTime:
		return m.DeleteTime()
	case user.FieldUsername:
		return m.Username()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case user.FieldDeleteTime:
		return m.OldDeleteTime(ctx)
	case user.FieldUsername:
		return m.OldUsername(ctx)
	}
	return nil, fmt.Errorf("unknown User field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case user.FieldDeleteTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeleteTime(v)
		return nil
	case user.FieldUsername:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUsername(v)
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown User numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(user.FieldDeleteTime) {
		fields = append(fields, user.FieldDeleteTime)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserMutation) ClearField(name string) error {
	switch name {
	case user.FieldDeleteTime:
		m.ClearDeleteTime()
		return nil
	}
	return fmt.Errorf("unknown User nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserMutation) ResetField(name string) error {
	switch name {
	case user.FieldDeleteTime:
		m.ResetDeleteTime()
		return nil
	case user.FieldUsername:
		m.ResetUsername()
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserMutation) AddedEdges() []string {
	edges := make([]string, 0, 4)
	if m.toktoks_receiver != nil {
		edges = append(edges, user.EdgeToktoksReceiver)
	}
	if m.toktoks_sender != nil {
		edges = append(edges, user.EdgeToktoksSender)
	}
	if m.notifications != nil {
		edges = append(edges, user.EdgeNotifications)
	}
	if m.notificationChanges != nil {
		edges = append(edges, user.EdgeNotificationChanges)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeToktoksReceiver:
		ids := make([]ent.Value, 0, len(m.toktoks_receiver))
		for id := range m.toktoks_receiver {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeToktoksSender:
		ids := make([]ent.Value, 0, len(m.toktoks_sender))
		for id := range m.toktoks_sender {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeNotifications:
		ids := make([]ent.Value, 0, len(m.notifications))
		for id := range m.notifications {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeNotificationChanges:
		ids := make([]ent.Value, 0, len(m.notificationChanges))
		for id := range m.notificationChanges {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 4)
	if m.removedtoktoks_receiver != nil {
		edges = append(edges, user.EdgeToktoksReceiver)
	}
	if m.removedtoktoks_sender != nil {
		edges = append(edges, user.EdgeToktoksSender)
	}
	if m.removednotifications != nil {
		edges = append(edges, user.EdgeNotifications)
	}
	if m.removednotificationChanges != nil {
		edges = append(edges, user.EdgeNotificationChanges)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeToktoksReceiver:
		ids := make([]ent.Value, 0, len(m.removedtoktoks_receiver))
		for id := range m.removedtoktoks_receiver {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeToktoksSender:
		ids := make([]ent.Value, 0, len(m.removedtoktoks_sender))
		for id := range m.removedtoktoks_sender {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeNotifications:
		ids := make([]ent.Value, 0, len(m.removednotifications))
		for id := range m.removednotifications {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeNotificationChanges:
		ids := make([]ent.Value, 0, len(m.removednotificationChanges))
		for id := range m.removednotificationChanges {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 4)
	if m.clearedtoktoks_receiver {
		edges = append(edges, user.EdgeToktoksReceiver)
	}
	if m.clearedtoktoks_sender {
		edges = append(edges, user.EdgeToktoksSender)
	}
	if m.clearednotifications {
		edges = append(edges, user.EdgeNotifications)
	}
	if m.clearednotificationChanges {
		edges = append(edges, user.EdgeNotificationChanges)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserMutation) EdgeCleared(name string) bool {
	switch name {
	case user.EdgeToktoksReceiver:
		return m.clearedtoktoks_receiver
	case user.EdgeToktoksSender:
		return m.clearedtoktoks_sender
	case user.EdgeNotifications:
		return m.clearednotifications
	case user.EdgeNotificationChanges:
		return m.clearednotificationChanges
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown User unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserMutation) ResetEdge(name string) error {
	switch name {
	case user.EdgeToktoksReceiver:
		m.ResetToktoksReceiver()
		return nil
	case user.EdgeToktoksSender:
		m.ResetToktoksSender()
		return nil
	case user.EdgeNotifications:
		m.ResetNotifications()
		return nil
	case user.EdgeNotificationChanges:
		m.ResetNotificationChanges()
		return nil
	}
	return fmt.Errorf("unknown User edge %s", name)
}
