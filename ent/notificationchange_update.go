// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"notification-service/ent/notificationchange"
	"notification-service/ent/notificationobject"
	"notification-service/ent/predicate"
	"notification-service/ent/user"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// NotificationChangeUpdate is the builder for updating NotificationChange entities.
type NotificationChangeUpdate struct {
	config
	hooks    []Hook
	mutation *NotificationChangeMutation
}

// Where appends a list predicates to the NotificationChangeUpdate builder.
func (ncu *NotificationChangeUpdate) Where(ps ...predicate.NotificationChange) *NotificationChangeUpdate {
	ncu.mutation.Where(ps...)
	return ncu
}

// SetUpdatedAt sets the "updated_at" field.
func (ncu *NotificationChangeUpdate) SetUpdatedAt(t time.Time) *NotificationChangeUpdate {
	ncu.mutation.SetUpdatedAt(t)
	return ncu
}

// SetDeletedAt sets the "deleted_at" field.
func (ncu *NotificationChangeUpdate) SetDeletedAt(t time.Time) *NotificationChangeUpdate {
	ncu.mutation.SetDeletedAt(t)
	return ncu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ncu *NotificationChangeUpdate) SetNillableDeletedAt(t *time.Time) *NotificationChangeUpdate {
	if t != nil {
		ncu.SetDeletedAt(*t)
	}
	return ncu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (ncu *NotificationChangeUpdate) ClearDeletedAt() *NotificationChangeUpdate {
	ncu.mutation.ClearDeletedAt()
	return ncu
}

// SetActorID sets the "actor" edge to the User entity by ID.
func (ncu *NotificationChangeUpdate) SetActorID(id int) *NotificationChangeUpdate {
	ncu.mutation.SetActorID(id)
	return ncu
}

// SetNillableActorID sets the "actor" edge to the User entity by ID if the given value is not nil.
func (ncu *NotificationChangeUpdate) SetNillableActorID(id *int) *NotificationChangeUpdate {
	if id != nil {
		ncu = ncu.SetActorID(*id)
	}
	return ncu
}

// SetActor sets the "actor" edge to the User entity.
func (ncu *NotificationChangeUpdate) SetActor(u *User) *NotificationChangeUpdate {
	return ncu.SetActorID(u.ID)
}

// SetNotificationObjectID sets the "notificationObject" edge to the NotificationObject entity by ID.
func (ncu *NotificationChangeUpdate) SetNotificationObjectID(id int) *NotificationChangeUpdate {
	ncu.mutation.SetNotificationObjectID(id)
	return ncu
}

// SetNillableNotificationObjectID sets the "notificationObject" edge to the NotificationObject entity by ID if the given value is not nil.
func (ncu *NotificationChangeUpdate) SetNillableNotificationObjectID(id *int) *NotificationChangeUpdate {
	if id != nil {
		ncu = ncu.SetNotificationObjectID(*id)
	}
	return ncu
}

// SetNotificationObject sets the "notificationObject" edge to the NotificationObject entity.
func (ncu *NotificationChangeUpdate) SetNotificationObject(n *NotificationObject) *NotificationChangeUpdate {
	return ncu.SetNotificationObjectID(n.ID)
}

// Mutation returns the NotificationChangeMutation object of the builder.
func (ncu *NotificationChangeUpdate) Mutation() *NotificationChangeMutation {
	return ncu.mutation
}

// ClearActor clears the "actor" edge to the User entity.
func (ncu *NotificationChangeUpdate) ClearActor() *NotificationChangeUpdate {
	ncu.mutation.ClearActor()
	return ncu
}

// ClearNotificationObject clears the "notificationObject" edge to the NotificationObject entity.
func (ncu *NotificationChangeUpdate) ClearNotificationObject() *NotificationChangeUpdate {
	ncu.mutation.ClearNotificationObject()
	return ncu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ncu *NotificationChangeUpdate) Save(ctx context.Context) (int, error) {
	if err := ncu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, ncu.sqlSave, ncu.mutation, ncu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ncu *NotificationChangeUpdate) SaveX(ctx context.Context) int {
	affected, err := ncu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ncu *NotificationChangeUpdate) Exec(ctx context.Context) error {
	_, err := ncu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ncu *NotificationChangeUpdate) ExecX(ctx context.Context) {
	if err := ncu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ncu *NotificationChangeUpdate) defaults() error {
	if _, ok := ncu.mutation.UpdatedAt(); !ok {
		if notificationchange.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized notificationchange.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := notificationchange.UpdateDefaultUpdatedAt()
		ncu.mutation.SetUpdatedAt(v)
	}
	return nil
}

func (ncu *NotificationChangeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(notificationchange.Table, notificationchange.Columns, sqlgraph.NewFieldSpec(notificationchange.FieldID, field.TypeInt))
	if ps := ncu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ncu.mutation.UpdatedAt(); ok {
		_spec.SetField(notificationchange.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := ncu.mutation.DeletedAt(); ok {
		_spec.SetField(notificationchange.FieldDeletedAt, field.TypeTime, value)
	}
	if ncu.mutation.DeletedAtCleared() {
		_spec.ClearField(notificationchange.FieldDeletedAt, field.TypeTime)
	}
	if ncu.mutation.ActorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   notificationchange.ActorTable,
			Columns: []string{notificationchange.ActorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ncu.mutation.ActorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   notificationchange.ActorTable,
			Columns: []string{notificationchange.ActorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ncu.mutation.NotificationObjectCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   notificationchange.NotificationObjectTable,
			Columns: []string{notificationchange.NotificationObjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notificationobject.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ncu.mutation.NotificationObjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   notificationchange.NotificationObjectTable,
			Columns: []string{notificationchange.NotificationObjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notificationobject.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ncu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{notificationchange.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ncu.mutation.done = true
	return n, nil
}

// NotificationChangeUpdateOne is the builder for updating a single NotificationChange entity.
type NotificationChangeUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *NotificationChangeMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (ncuo *NotificationChangeUpdateOne) SetUpdatedAt(t time.Time) *NotificationChangeUpdateOne {
	ncuo.mutation.SetUpdatedAt(t)
	return ncuo
}

// SetDeletedAt sets the "deleted_at" field.
func (ncuo *NotificationChangeUpdateOne) SetDeletedAt(t time.Time) *NotificationChangeUpdateOne {
	ncuo.mutation.SetDeletedAt(t)
	return ncuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ncuo *NotificationChangeUpdateOne) SetNillableDeletedAt(t *time.Time) *NotificationChangeUpdateOne {
	if t != nil {
		ncuo.SetDeletedAt(*t)
	}
	return ncuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (ncuo *NotificationChangeUpdateOne) ClearDeletedAt() *NotificationChangeUpdateOne {
	ncuo.mutation.ClearDeletedAt()
	return ncuo
}

// SetActorID sets the "actor" edge to the User entity by ID.
func (ncuo *NotificationChangeUpdateOne) SetActorID(id int) *NotificationChangeUpdateOne {
	ncuo.mutation.SetActorID(id)
	return ncuo
}

// SetNillableActorID sets the "actor" edge to the User entity by ID if the given value is not nil.
func (ncuo *NotificationChangeUpdateOne) SetNillableActorID(id *int) *NotificationChangeUpdateOne {
	if id != nil {
		ncuo = ncuo.SetActorID(*id)
	}
	return ncuo
}

// SetActor sets the "actor" edge to the User entity.
func (ncuo *NotificationChangeUpdateOne) SetActor(u *User) *NotificationChangeUpdateOne {
	return ncuo.SetActorID(u.ID)
}

// SetNotificationObjectID sets the "notificationObject" edge to the NotificationObject entity by ID.
func (ncuo *NotificationChangeUpdateOne) SetNotificationObjectID(id int) *NotificationChangeUpdateOne {
	ncuo.mutation.SetNotificationObjectID(id)
	return ncuo
}

// SetNillableNotificationObjectID sets the "notificationObject" edge to the NotificationObject entity by ID if the given value is not nil.
func (ncuo *NotificationChangeUpdateOne) SetNillableNotificationObjectID(id *int) *NotificationChangeUpdateOne {
	if id != nil {
		ncuo = ncuo.SetNotificationObjectID(*id)
	}
	return ncuo
}

// SetNotificationObject sets the "notificationObject" edge to the NotificationObject entity.
func (ncuo *NotificationChangeUpdateOne) SetNotificationObject(n *NotificationObject) *NotificationChangeUpdateOne {
	return ncuo.SetNotificationObjectID(n.ID)
}

// Mutation returns the NotificationChangeMutation object of the builder.
func (ncuo *NotificationChangeUpdateOne) Mutation() *NotificationChangeMutation {
	return ncuo.mutation
}

// ClearActor clears the "actor" edge to the User entity.
func (ncuo *NotificationChangeUpdateOne) ClearActor() *NotificationChangeUpdateOne {
	ncuo.mutation.ClearActor()
	return ncuo
}

// ClearNotificationObject clears the "notificationObject" edge to the NotificationObject entity.
func (ncuo *NotificationChangeUpdateOne) ClearNotificationObject() *NotificationChangeUpdateOne {
	ncuo.mutation.ClearNotificationObject()
	return ncuo
}

// Where appends a list predicates to the NotificationChangeUpdate builder.
func (ncuo *NotificationChangeUpdateOne) Where(ps ...predicate.NotificationChange) *NotificationChangeUpdateOne {
	ncuo.mutation.Where(ps...)
	return ncuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ncuo *NotificationChangeUpdateOne) Select(field string, fields ...string) *NotificationChangeUpdateOne {
	ncuo.fields = append([]string{field}, fields...)
	return ncuo
}

// Save executes the query and returns the updated NotificationChange entity.
func (ncuo *NotificationChangeUpdateOne) Save(ctx context.Context) (*NotificationChange, error) {
	if err := ncuo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, ncuo.sqlSave, ncuo.mutation, ncuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ncuo *NotificationChangeUpdateOne) SaveX(ctx context.Context) *NotificationChange {
	node, err := ncuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ncuo *NotificationChangeUpdateOne) Exec(ctx context.Context) error {
	_, err := ncuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ncuo *NotificationChangeUpdateOne) ExecX(ctx context.Context) {
	if err := ncuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ncuo *NotificationChangeUpdateOne) defaults() error {
	if _, ok := ncuo.mutation.UpdatedAt(); !ok {
		if notificationchange.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized notificationchange.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := notificationchange.UpdateDefaultUpdatedAt()
		ncuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

func (ncuo *NotificationChangeUpdateOne) sqlSave(ctx context.Context) (_node *NotificationChange, err error) {
	_spec := sqlgraph.NewUpdateSpec(notificationchange.Table, notificationchange.Columns, sqlgraph.NewFieldSpec(notificationchange.FieldID, field.TypeInt))
	id, ok := ncuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "NotificationChange.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ncuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, notificationchange.FieldID)
		for _, f := range fields {
			if !notificationchange.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != notificationchange.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ncuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ncuo.mutation.UpdatedAt(); ok {
		_spec.SetField(notificationchange.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := ncuo.mutation.DeletedAt(); ok {
		_spec.SetField(notificationchange.FieldDeletedAt, field.TypeTime, value)
	}
	if ncuo.mutation.DeletedAtCleared() {
		_spec.ClearField(notificationchange.FieldDeletedAt, field.TypeTime)
	}
	if ncuo.mutation.ActorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   notificationchange.ActorTable,
			Columns: []string{notificationchange.ActorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ncuo.mutation.ActorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   notificationchange.ActorTable,
			Columns: []string{notificationchange.ActorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ncuo.mutation.NotificationObjectCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   notificationchange.NotificationObjectTable,
			Columns: []string{notificationchange.NotificationObjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notificationobject.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ncuo.mutation.NotificationObjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   notificationchange.NotificationObjectTable,
			Columns: []string{notificationchange.NotificationObjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notificationobject.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &NotificationChange{config: ncuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ncuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{notificationchange.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ncuo.mutation.done = true
	return _node, nil
}
