// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"notification-service/ent/notificationchange"
	"notification-service/ent/notificationobjectid"
	"notification-service/ent/predicate"
	"notification-service/ent/user"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// NotificationChangeUpdate is the builder for updating NotificationChange entities.
type NotificationChangeUpdate struct {
	config
	hooks    []Hook
	mutation *NotificationChangeMutation
}

// Where appends a list predicates to the NotificationChangeUpdate builder.
func (ncu *NotificationChangeUpdate) Where(ps ...predicate.NotificationChange) *NotificationChangeUpdate {
	ncu.mutation.Where(ps...)
	return ncu
}

// SetDeleteTime sets the "delete_time" field.
func (ncu *NotificationChangeUpdate) SetDeleteTime(t time.Time) *NotificationChangeUpdate {
	ncu.mutation.SetDeleteTime(t)
	return ncu
}

// SetNillableDeleteTime sets the "delete_time" field if the given value is not nil.
func (ncu *NotificationChangeUpdate) SetNillableDeleteTime(t *time.Time) *NotificationChangeUpdate {
	if t != nil {
		ncu.SetDeleteTime(*t)
	}
	return ncu
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (ncu *NotificationChangeUpdate) ClearDeleteTime() *NotificationChangeUpdate {
	ncu.mutation.ClearDeleteTime()
	return ncu
}

// SetUserIDID sets the "userID" edge to the User entity by ID.
func (ncu *NotificationChangeUpdate) SetUserIDID(id int) *NotificationChangeUpdate {
	ncu.mutation.SetUserIDID(id)
	return ncu
}

// SetNillableUserIDID sets the "userID" edge to the User entity by ID if the given value is not nil.
func (ncu *NotificationChangeUpdate) SetNillableUserIDID(id *int) *NotificationChangeUpdate {
	if id != nil {
		ncu = ncu.SetUserIDID(*id)
	}
	return ncu
}

// SetUserID sets the "userID" edge to the User entity.
func (ncu *NotificationChangeUpdate) SetUserID(u *User) *NotificationChangeUpdate {
	return ncu.SetUserIDID(u.ID)
}

// SetNotificationObjectIDID sets the "notificationObjectID" edge to the NotificationObjectID entity by ID.
func (ncu *NotificationChangeUpdate) SetNotificationObjectIDID(id int) *NotificationChangeUpdate {
	ncu.mutation.SetNotificationObjectIDID(id)
	return ncu
}

// SetNillableNotificationObjectIDID sets the "notificationObjectID" edge to the NotificationObjectID entity by ID if the given value is not nil.
func (ncu *NotificationChangeUpdate) SetNillableNotificationObjectIDID(id *int) *NotificationChangeUpdate {
	if id != nil {
		ncu = ncu.SetNotificationObjectIDID(*id)
	}
	return ncu
}

// SetNotificationObjectID sets the "notificationObjectID" edge to the NotificationObjectID entity.
func (ncu *NotificationChangeUpdate) SetNotificationObjectID(n *NotificationObjectID) *NotificationChangeUpdate {
	return ncu.SetNotificationObjectIDID(n.ID)
}

// Mutation returns the NotificationChangeMutation object of the builder.
func (ncu *NotificationChangeUpdate) Mutation() *NotificationChangeMutation {
	return ncu.mutation
}

// ClearUserID clears the "userID" edge to the User entity.
func (ncu *NotificationChangeUpdate) ClearUserID() *NotificationChangeUpdate {
	ncu.mutation.ClearUserID()
	return ncu
}

// ClearNotificationObjectID clears the "notificationObjectID" edge to the NotificationObjectID entity.
func (ncu *NotificationChangeUpdate) ClearNotificationObjectID() *NotificationChangeUpdate {
	ncu.mutation.ClearNotificationObjectID()
	return ncu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ncu *NotificationChangeUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, ncu.sqlSave, ncu.mutation, ncu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ncu *NotificationChangeUpdate) SaveX(ctx context.Context) int {
	affected, err := ncu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ncu *NotificationChangeUpdate) Exec(ctx context.Context) error {
	_, err := ncu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ncu *NotificationChangeUpdate) ExecX(ctx context.Context) {
	if err := ncu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ncu *NotificationChangeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(notificationchange.Table, notificationchange.Columns, sqlgraph.NewFieldSpec(notificationchange.FieldID, field.TypeInt))
	if ps := ncu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ncu.mutation.DeleteTime(); ok {
		_spec.SetField(notificationchange.FieldDeleteTime, field.TypeTime, value)
	}
	if ncu.mutation.DeleteTimeCleared() {
		_spec.ClearField(notificationchange.FieldDeleteTime, field.TypeTime)
	}
	if ncu.mutation.UserIDCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   notificationchange.UserIDTable,
			Columns: []string{notificationchange.UserIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ncu.mutation.UserIDIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   notificationchange.UserIDTable,
			Columns: []string{notificationchange.UserIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ncu.mutation.NotificationObjectIDCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   notificationchange.NotificationObjectIDTable,
			Columns: []string{notificationchange.NotificationObjectIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notificationobjectid.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ncu.mutation.NotificationObjectIDIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   notificationchange.NotificationObjectIDTable,
			Columns: []string{notificationchange.NotificationObjectIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notificationobjectid.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ncu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{notificationchange.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ncu.mutation.done = true
	return n, nil
}

// NotificationChangeUpdateOne is the builder for updating a single NotificationChange entity.
type NotificationChangeUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *NotificationChangeMutation
}

// SetDeleteTime sets the "delete_time" field.
func (ncuo *NotificationChangeUpdateOne) SetDeleteTime(t time.Time) *NotificationChangeUpdateOne {
	ncuo.mutation.SetDeleteTime(t)
	return ncuo
}

// SetNillableDeleteTime sets the "delete_time" field if the given value is not nil.
func (ncuo *NotificationChangeUpdateOne) SetNillableDeleteTime(t *time.Time) *NotificationChangeUpdateOne {
	if t != nil {
		ncuo.SetDeleteTime(*t)
	}
	return ncuo
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (ncuo *NotificationChangeUpdateOne) ClearDeleteTime() *NotificationChangeUpdateOne {
	ncuo.mutation.ClearDeleteTime()
	return ncuo
}

// SetUserIDID sets the "userID" edge to the User entity by ID.
func (ncuo *NotificationChangeUpdateOne) SetUserIDID(id int) *NotificationChangeUpdateOne {
	ncuo.mutation.SetUserIDID(id)
	return ncuo
}

// SetNillableUserIDID sets the "userID" edge to the User entity by ID if the given value is not nil.
func (ncuo *NotificationChangeUpdateOne) SetNillableUserIDID(id *int) *NotificationChangeUpdateOne {
	if id != nil {
		ncuo = ncuo.SetUserIDID(*id)
	}
	return ncuo
}

// SetUserID sets the "userID" edge to the User entity.
func (ncuo *NotificationChangeUpdateOne) SetUserID(u *User) *NotificationChangeUpdateOne {
	return ncuo.SetUserIDID(u.ID)
}

// SetNotificationObjectIDID sets the "notificationObjectID" edge to the NotificationObjectID entity by ID.
func (ncuo *NotificationChangeUpdateOne) SetNotificationObjectIDID(id int) *NotificationChangeUpdateOne {
	ncuo.mutation.SetNotificationObjectIDID(id)
	return ncuo
}

// SetNillableNotificationObjectIDID sets the "notificationObjectID" edge to the NotificationObjectID entity by ID if the given value is not nil.
func (ncuo *NotificationChangeUpdateOne) SetNillableNotificationObjectIDID(id *int) *NotificationChangeUpdateOne {
	if id != nil {
		ncuo = ncuo.SetNotificationObjectIDID(*id)
	}
	return ncuo
}

// SetNotificationObjectID sets the "notificationObjectID" edge to the NotificationObjectID entity.
func (ncuo *NotificationChangeUpdateOne) SetNotificationObjectID(n *NotificationObjectID) *NotificationChangeUpdateOne {
	return ncuo.SetNotificationObjectIDID(n.ID)
}

// Mutation returns the NotificationChangeMutation object of the builder.
func (ncuo *NotificationChangeUpdateOne) Mutation() *NotificationChangeMutation {
	return ncuo.mutation
}

// ClearUserID clears the "userID" edge to the User entity.
func (ncuo *NotificationChangeUpdateOne) ClearUserID() *NotificationChangeUpdateOne {
	ncuo.mutation.ClearUserID()
	return ncuo
}

// ClearNotificationObjectID clears the "notificationObjectID" edge to the NotificationObjectID entity.
func (ncuo *NotificationChangeUpdateOne) ClearNotificationObjectID() *NotificationChangeUpdateOne {
	ncuo.mutation.ClearNotificationObjectID()
	return ncuo
}

// Where appends a list predicates to the NotificationChangeUpdate builder.
func (ncuo *NotificationChangeUpdateOne) Where(ps ...predicate.NotificationChange) *NotificationChangeUpdateOne {
	ncuo.mutation.Where(ps...)
	return ncuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ncuo *NotificationChangeUpdateOne) Select(field string, fields ...string) *NotificationChangeUpdateOne {
	ncuo.fields = append([]string{field}, fields...)
	return ncuo
}

// Save executes the query and returns the updated NotificationChange entity.
func (ncuo *NotificationChangeUpdateOne) Save(ctx context.Context) (*NotificationChange, error) {
	return withHooks(ctx, ncuo.sqlSave, ncuo.mutation, ncuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ncuo *NotificationChangeUpdateOne) SaveX(ctx context.Context) *NotificationChange {
	node, err := ncuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ncuo *NotificationChangeUpdateOne) Exec(ctx context.Context) error {
	_, err := ncuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ncuo *NotificationChangeUpdateOne) ExecX(ctx context.Context) {
	if err := ncuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ncuo *NotificationChangeUpdateOne) sqlSave(ctx context.Context) (_node *NotificationChange, err error) {
	_spec := sqlgraph.NewUpdateSpec(notificationchange.Table, notificationchange.Columns, sqlgraph.NewFieldSpec(notificationchange.FieldID, field.TypeInt))
	id, ok := ncuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "NotificationChange.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ncuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, notificationchange.FieldID)
		for _, f := range fields {
			if !notificationchange.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != notificationchange.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ncuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ncuo.mutation.DeleteTime(); ok {
		_spec.SetField(notificationchange.FieldDeleteTime, field.TypeTime, value)
	}
	if ncuo.mutation.DeleteTimeCleared() {
		_spec.ClearField(notificationchange.FieldDeleteTime, field.TypeTime)
	}
	if ncuo.mutation.UserIDCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   notificationchange.UserIDTable,
			Columns: []string{notificationchange.UserIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ncuo.mutation.UserIDIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   notificationchange.UserIDTable,
			Columns: []string{notificationchange.UserIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ncuo.mutation.NotificationObjectIDCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   notificationchange.NotificationObjectIDTable,
			Columns: []string{notificationchange.NotificationObjectIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notificationobjectid.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ncuo.mutation.NotificationObjectIDIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   notificationchange.NotificationObjectIDTable,
			Columns: []string{notificationchange.NotificationObjectIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notificationobjectid.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &NotificationChange{config: ncuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ncuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{notificationchange.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ncuo.mutation.done = true
	return _node, nil
}
