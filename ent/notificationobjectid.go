// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"notification-service/ent/entitytype"
	"notification-service/ent/notificationobjectid"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// NotificationObjectID is the model entity for the NotificationObjectID schema.
type NotificationObjectID struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// DeleteTime holds the value of the "delete_time" field.
	DeleteTime time.Time `json:"delete_time,omitempty"`
	// EntityID holds the value of the "entity_id" field.
	EntityID int `json:"entity_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the NotificationObjectIDQuery when eager-loading is set.
	Edges                               NotificationObjectIDEdges `json:"edges"`
	entity_type_notification_object_ids *int
	selectValues                        sql.SelectValues
}

// NotificationObjectIDEdges holds the relations/edges for other nodes in the graph.
type NotificationObjectIDEdges struct {
	// Notifications holds the value of the notifications edge.
	Notifications []*Notification `json:"notifications,omitempty"`
	// NotificationChanges holds the value of the notificationChanges edge.
	NotificationChanges []*NotificationChange `json:"notificationChanges,omitempty"`
	// EntityTypeID holds the value of the entityTypeID edge.
	EntityTypeID *EntityType `json:"entityTypeID,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// NotificationsOrErr returns the Notifications value or an error if the edge
// was not loaded in eager-loading.
func (e NotificationObjectIDEdges) NotificationsOrErr() ([]*Notification, error) {
	if e.loadedTypes[0] {
		return e.Notifications, nil
	}
	return nil, &NotLoadedError{edge: "notifications"}
}

// NotificationChangesOrErr returns the NotificationChanges value or an error if the edge
// was not loaded in eager-loading.
func (e NotificationObjectIDEdges) NotificationChangesOrErr() ([]*NotificationChange, error) {
	if e.loadedTypes[1] {
		return e.NotificationChanges, nil
	}
	return nil, &NotLoadedError{edge: "notificationChanges"}
}

// EntityTypeIDOrErr returns the EntityTypeID value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e NotificationObjectIDEdges) EntityTypeIDOrErr() (*EntityType, error) {
	if e.EntityTypeID != nil {
		return e.EntityTypeID, nil
	} else if e.loadedTypes[2] {
		return nil, &NotFoundError{label: entitytype.Label}
	}
	return nil, &NotLoadedError{edge: "entityTypeID"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*NotificationObjectID) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case notificationobjectid.FieldID, notificationobjectid.FieldEntityID:
			values[i] = new(sql.NullInt64)
		case notificationobjectid.FieldDeleteTime:
			values[i] = new(sql.NullTime)
		case notificationobjectid.ForeignKeys[0]: // entity_type_notification_object_ids
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the NotificationObjectID fields.
func (noi *NotificationObjectID) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case notificationobjectid.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			noi.ID = int(value.Int64)
		case notificationobjectid.FieldDeleteTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field delete_time", values[i])
			} else if value.Valid {
				noi.DeleteTime = value.Time
			}
		case notificationobjectid.FieldEntityID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field entity_id", values[i])
			} else if value.Valid {
				noi.EntityID = int(value.Int64)
			}
		case notificationobjectid.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field entity_type_notification_object_ids", value)
			} else if value.Valid {
				noi.entity_type_notification_object_ids = new(int)
				*noi.entity_type_notification_object_ids = int(value.Int64)
			}
		default:
			noi.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the NotificationObjectID.
// This includes values selected through modifiers, order, etc.
func (noi *NotificationObjectID) Value(name string) (ent.Value, error) {
	return noi.selectValues.Get(name)
}

// QueryNotifications queries the "notifications" edge of the NotificationObjectID entity.
func (noi *NotificationObjectID) QueryNotifications() *NotificationQuery {
	return NewNotificationObjectIDClient(noi.config).QueryNotifications(noi)
}

// QueryNotificationChanges queries the "notificationChanges" edge of the NotificationObjectID entity.
func (noi *NotificationObjectID) QueryNotificationChanges() *NotificationChangeQuery {
	return NewNotificationObjectIDClient(noi.config).QueryNotificationChanges(noi)
}

// QueryEntityTypeID queries the "entityTypeID" edge of the NotificationObjectID entity.
func (noi *NotificationObjectID) QueryEntityTypeID() *EntityTypeQuery {
	return NewNotificationObjectIDClient(noi.config).QueryEntityTypeID(noi)
}

// Update returns a builder for updating this NotificationObjectID.
// Note that you need to call NotificationObjectID.Unwrap() before calling this method if this NotificationObjectID
// was returned from a transaction, and the transaction was committed or rolled back.
func (noi *NotificationObjectID) Update() *NotificationObjectIDUpdateOne {
	return NewNotificationObjectIDClient(noi.config).UpdateOne(noi)
}

// Unwrap unwraps the NotificationObjectID entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (noi *NotificationObjectID) Unwrap() *NotificationObjectID {
	_tx, ok := noi.config.driver.(*txDriver)
	if !ok {
		panic("ent: NotificationObjectID is not a transactional entity")
	}
	noi.config.driver = _tx.drv
	return noi
}

// String implements the fmt.Stringer.
func (noi *NotificationObjectID) String() string {
	var builder strings.Builder
	builder.WriteString("NotificationObjectID(")
	builder.WriteString(fmt.Sprintf("id=%v, ", noi.ID))
	builder.WriteString("delete_time=")
	builder.WriteString(noi.DeleteTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("entity_id=")
	builder.WriteString(fmt.Sprintf("%v", noi.EntityID))
	builder.WriteByte(')')
	return builder.String()
}

// NotificationObjectIDs is a parsable slice of NotificationObjectID.
type NotificationObjectIDs []*NotificationObjectID
