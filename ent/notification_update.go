// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"notification-service/ent/notification"
	"notification-service/ent/notificationobject"
	"notification-service/ent/predicate"
	"notification-service/ent/user"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// NotificationUpdate is the builder for updating Notification entities.
type NotificationUpdate struct {
	config
	hooks    []Hook
	mutation *NotificationMutation
}

// Where appends a list predicates to the NotificationUpdate builder.
func (nu *NotificationUpdate) Where(ps ...predicate.Notification) *NotificationUpdate {
	nu.mutation.Where(ps...)
	return nu
}

// SetUpdatedAt sets the "updated_at" field.
func (nu *NotificationUpdate) SetUpdatedAt(t time.Time) *NotificationUpdate {
	nu.mutation.SetUpdatedAt(t)
	return nu
}

// SetDeletedAt sets the "deleted_at" field.
func (nu *NotificationUpdate) SetDeletedAt(t time.Time) *NotificationUpdate {
	nu.mutation.SetDeletedAt(t)
	return nu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (nu *NotificationUpdate) SetNillableDeletedAt(t *time.Time) *NotificationUpdate {
	if t != nil {
		nu.SetDeletedAt(*t)
	}
	return nu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (nu *NotificationUpdate) ClearDeletedAt() *NotificationUpdate {
	nu.mutation.ClearDeletedAt()
	return nu
}

// SetIsRead sets the "isRead" field.
func (nu *NotificationUpdate) SetIsRead(b bool) *NotificationUpdate {
	nu.mutation.SetIsRead(b)
	return nu
}

// SetNillableIsRead sets the "isRead" field if the given value is not nil.
func (nu *NotificationUpdate) SetNillableIsRead(b *bool) *NotificationUpdate {
	if b != nil {
		nu.SetIsRead(*b)
	}
	return nu
}

// SetNotificationObjectID sets the "notificationObject" edge to the NotificationObject entity by ID.
func (nu *NotificationUpdate) SetNotificationObjectID(id int) *NotificationUpdate {
	nu.mutation.SetNotificationObjectID(id)
	return nu
}

// SetNillableNotificationObjectID sets the "notificationObject" edge to the NotificationObject entity by ID if the given value is not nil.
func (nu *NotificationUpdate) SetNillableNotificationObjectID(id *int) *NotificationUpdate {
	if id != nil {
		nu = nu.SetNotificationObjectID(*id)
	}
	return nu
}

// SetNotificationObject sets the "notificationObject" edge to the NotificationObject entity.
func (nu *NotificationUpdate) SetNotificationObject(n *NotificationObject) *NotificationUpdate {
	return nu.SetNotificationObjectID(n.ID)
}

// SetNotifierID sets the "notifier" edge to the User entity by ID.
func (nu *NotificationUpdate) SetNotifierID(id int) *NotificationUpdate {
	nu.mutation.SetNotifierID(id)
	return nu
}

// SetNillableNotifierID sets the "notifier" edge to the User entity by ID if the given value is not nil.
func (nu *NotificationUpdate) SetNillableNotifierID(id *int) *NotificationUpdate {
	if id != nil {
		nu = nu.SetNotifierID(*id)
	}
	return nu
}

// SetNotifier sets the "notifier" edge to the User entity.
func (nu *NotificationUpdate) SetNotifier(u *User) *NotificationUpdate {
	return nu.SetNotifierID(u.ID)
}

// Mutation returns the NotificationMutation object of the builder.
func (nu *NotificationUpdate) Mutation() *NotificationMutation {
	return nu.mutation
}

// ClearNotificationObject clears the "notificationObject" edge to the NotificationObject entity.
func (nu *NotificationUpdate) ClearNotificationObject() *NotificationUpdate {
	nu.mutation.ClearNotificationObject()
	return nu
}

// ClearNotifier clears the "notifier" edge to the User entity.
func (nu *NotificationUpdate) ClearNotifier() *NotificationUpdate {
	nu.mutation.ClearNotifier()
	return nu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (nu *NotificationUpdate) Save(ctx context.Context) (int, error) {
	if err := nu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, nu.sqlSave, nu.mutation, nu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (nu *NotificationUpdate) SaveX(ctx context.Context) int {
	affected, err := nu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (nu *NotificationUpdate) Exec(ctx context.Context) error {
	_, err := nu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nu *NotificationUpdate) ExecX(ctx context.Context) {
	if err := nu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (nu *NotificationUpdate) defaults() error {
	if _, ok := nu.mutation.UpdatedAt(); !ok {
		if notification.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized notification.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := notification.UpdateDefaultUpdatedAt()
		nu.mutation.SetUpdatedAt(v)
	}
	return nil
}

func (nu *NotificationUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(notification.Table, notification.Columns, sqlgraph.NewFieldSpec(notification.FieldID, field.TypeInt))
	if ps := nu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := nu.mutation.UpdatedAt(); ok {
		_spec.SetField(notification.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := nu.mutation.DeletedAt(); ok {
		_spec.SetField(notification.FieldDeletedAt, field.TypeTime, value)
	}
	if nu.mutation.DeletedAtCleared() {
		_spec.ClearField(notification.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := nu.mutation.IsRead(); ok {
		_spec.SetField(notification.FieldIsRead, field.TypeBool, value)
	}
	if nu.mutation.NotificationObjectCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   notification.NotificationObjectTable,
			Columns: []string{notification.NotificationObjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notificationobject.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nu.mutation.NotificationObjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   notification.NotificationObjectTable,
			Columns: []string{notification.NotificationObjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notificationobject.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nu.mutation.NotifierCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   notification.NotifierTable,
			Columns: []string{notification.NotifierColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nu.mutation.NotifierIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   notification.NotifierTable,
			Columns: []string{notification.NotifierColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, nu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{notification.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	nu.mutation.done = true
	return n, nil
}

// NotificationUpdateOne is the builder for updating a single Notification entity.
type NotificationUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *NotificationMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (nuo *NotificationUpdateOne) SetUpdatedAt(t time.Time) *NotificationUpdateOne {
	nuo.mutation.SetUpdatedAt(t)
	return nuo
}

// SetDeletedAt sets the "deleted_at" field.
func (nuo *NotificationUpdateOne) SetDeletedAt(t time.Time) *NotificationUpdateOne {
	nuo.mutation.SetDeletedAt(t)
	return nuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (nuo *NotificationUpdateOne) SetNillableDeletedAt(t *time.Time) *NotificationUpdateOne {
	if t != nil {
		nuo.SetDeletedAt(*t)
	}
	return nuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (nuo *NotificationUpdateOne) ClearDeletedAt() *NotificationUpdateOne {
	nuo.mutation.ClearDeletedAt()
	return nuo
}

// SetIsRead sets the "isRead" field.
func (nuo *NotificationUpdateOne) SetIsRead(b bool) *NotificationUpdateOne {
	nuo.mutation.SetIsRead(b)
	return nuo
}

// SetNillableIsRead sets the "isRead" field if the given value is not nil.
func (nuo *NotificationUpdateOne) SetNillableIsRead(b *bool) *NotificationUpdateOne {
	if b != nil {
		nuo.SetIsRead(*b)
	}
	return nuo
}

// SetNotificationObjectID sets the "notificationObject" edge to the NotificationObject entity by ID.
func (nuo *NotificationUpdateOne) SetNotificationObjectID(id int) *NotificationUpdateOne {
	nuo.mutation.SetNotificationObjectID(id)
	return nuo
}

// SetNillableNotificationObjectID sets the "notificationObject" edge to the NotificationObject entity by ID if the given value is not nil.
func (nuo *NotificationUpdateOne) SetNillableNotificationObjectID(id *int) *NotificationUpdateOne {
	if id != nil {
		nuo = nuo.SetNotificationObjectID(*id)
	}
	return nuo
}

// SetNotificationObject sets the "notificationObject" edge to the NotificationObject entity.
func (nuo *NotificationUpdateOne) SetNotificationObject(n *NotificationObject) *NotificationUpdateOne {
	return nuo.SetNotificationObjectID(n.ID)
}

// SetNotifierID sets the "notifier" edge to the User entity by ID.
func (nuo *NotificationUpdateOne) SetNotifierID(id int) *NotificationUpdateOne {
	nuo.mutation.SetNotifierID(id)
	return nuo
}

// SetNillableNotifierID sets the "notifier" edge to the User entity by ID if the given value is not nil.
func (nuo *NotificationUpdateOne) SetNillableNotifierID(id *int) *NotificationUpdateOne {
	if id != nil {
		nuo = nuo.SetNotifierID(*id)
	}
	return nuo
}

// SetNotifier sets the "notifier" edge to the User entity.
func (nuo *NotificationUpdateOne) SetNotifier(u *User) *NotificationUpdateOne {
	return nuo.SetNotifierID(u.ID)
}

// Mutation returns the NotificationMutation object of the builder.
func (nuo *NotificationUpdateOne) Mutation() *NotificationMutation {
	return nuo.mutation
}

// ClearNotificationObject clears the "notificationObject" edge to the NotificationObject entity.
func (nuo *NotificationUpdateOne) ClearNotificationObject() *NotificationUpdateOne {
	nuo.mutation.ClearNotificationObject()
	return nuo
}

// ClearNotifier clears the "notifier" edge to the User entity.
func (nuo *NotificationUpdateOne) ClearNotifier() *NotificationUpdateOne {
	nuo.mutation.ClearNotifier()
	return nuo
}

// Where appends a list predicates to the NotificationUpdate builder.
func (nuo *NotificationUpdateOne) Where(ps ...predicate.Notification) *NotificationUpdateOne {
	nuo.mutation.Where(ps...)
	return nuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (nuo *NotificationUpdateOne) Select(field string, fields ...string) *NotificationUpdateOne {
	nuo.fields = append([]string{field}, fields...)
	return nuo
}

// Save executes the query and returns the updated Notification entity.
func (nuo *NotificationUpdateOne) Save(ctx context.Context) (*Notification, error) {
	if err := nuo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, nuo.sqlSave, nuo.mutation, nuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (nuo *NotificationUpdateOne) SaveX(ctx context.Context) *Notification {
	node, err := nuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (nuo *NotificationUpdateOne) Exec(ctx context.Context) error {
	_, err := nuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nuo *NotificationUpdateOne) ExecX(ctx context.Context) {
	if err := nuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (nuo *NotificationUpdateOne) defaults() error {
	if _, ok := nuo.mutation.UpdatedAt(); !ok {
		if notification.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized notification.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := notification.UpdateDefaultUpdatedAt()
		nuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

func (nuo *NotificationUpdateOne) sqlSave(ctx context.Context) (_node *Notification, err error) {
	_spec := sqlgraph.NewUpdateSpec(notification.Table, notification.Columns, sqlgraph.NewFieldSpec(notification.FieldID, field.TypeInt))
	id, ok := nuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Notification.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := nuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, notification.FieldID)
		for _, f := range fields {
			if !notification.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != notification.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := nuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := nuo.mutation.UpdatedAt(); ok {
		_spec.SetField(notification.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := nuo.mutation.DeletedAt(); ok {
		_spec.SetField(notification.FieldDeletedAt, field.TypeTime, value)
	}
	if nuo.mutation.DeletedAtCleared() {
		_spec.ClearField(notification.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := nuo.mutation.IsRead(); ok {
		_spec.SetField(notification.FieldIsRead, field.TypeBool, value)
	}
	if nuo.mutation.NotificationObjectCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   notification.NotificationObjectTable,
			Columns: []string{notification.NotificationObjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notificationobject.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nuo.mutation.NotificationObjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   notification.NotificationObjectTable,
			Columns: []string{notification.NotificationObjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notificationobject.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nuo.mutation.NotifierCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   notification.NotifierTable,
			Columns: []string{notification.NotifierColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nuo.mutation.NotifierIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   notification.NotifierTable,
			Columns: []string{notification.NotifierColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Notification{config: nuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, nuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{notification.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	nuo.mutation.done = true
	return _node, nil
}
