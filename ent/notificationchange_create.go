// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"notification-service/ent/notificationchange"
	"notification-service/ent/notificationobject"
	"notification-service/ent/user"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// NotificationChangeCreate is the builder for creating a NotificationChange entity.
type NotificationChangeCreate struct {
	config
	mutation *NotificationChangeMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (ncc *NotificationChangeCreate) SetCreatedAt(t time.Time) *NotificationChangeCreate {
	ncc.mutation.SetCreatedAt(t)
	return ncc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ncc *NotificationChangeCreate) SetNillableCreatedAt(t *time.Time) *NotificationChangeCreate {
	if t != nil {
		ncc.SetCreatedAt(*t)
	}
	return ncc
}

// SetUpdatedAt sets the "updated_at" field.
func (ncc *NotificationChangeCreate) SetUpdatedAt(t time.Time) *NotificationChangeCreate {
	ncc.mutation.SetUpdatedAt(t)
	return ncc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ncc *NotificationChangeCreate) SetNillableUpdatedAt(t *time.Time) *NotificationChangeCreate {
	if t != nil {
		ncc.SetUpdatedAt(*t)
	}
	return ncc
}

// SetDeletedAt sets the "deleted_at" field.
func (ncc *NotificationChangeCreate) SetDeletedAt(t time.Time) *NotificationChangeCreate {
	ncc.mutation.SetDeletedAt(t)
	return ncc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ncc *NotificationChangeCreate) SetNillableDeletedAt(t *time.Time) *NotificationChangeCreate {
	if t != nil {
		ncc.SetDeletedAt(*t)
	}
	return ncc
}

// SetActorID sets the "actor" edge to the User entity by ID.
func (ncc *NotificationChangeCreate) SetActorID(id int) *NotificationChangeCreate {
	ncc.mutation.SetActorID(id)
	return ncc
}

// SetNillableActorID sets the "actor" edge to the User entity by ID if the given value is not nil.
func (ncc *NotificationChangeCreate) SetNillableActorID(id *int) *NotificationChangeCreate {
	if id != nil {
		ncc = ncc.SetActorID(*id)
	}
	return ncc
}

// SetActor sets the "actor" edge to the User entity.
func (ncc *NotificationChangeCreate) SetActor(u *User) *NotificationChangeCreate {
	return ncc.SetActorID(u.ID)
}

// SetNotificationObjectID sets the "notificationObject" edge to the NotificationObject entity by ID.
func (ncc *NotificationChangeCreate) SetNotificationObjectID(id int) *NotificationChangeCreate {
	ncc.mutation.SetNotificationObjectID(id)
	return ncc
}

// SetNillableNotificationObjectID sets the "notificationObject" edge to the NotificationObject entity by ID if the given value is not nil.
func (ncc *NotificationChangeCreate) SetNillableNotificationObjectID(id *int) *NotificationChangeCreate {
	if id != nil {
		ncc = ncc.SetNotificationObjectID(*id)
	}
	return ncc
}

// SetNotificationObject sets the "notificationObject" edge to the NotificationObject entity.
func (ncc *NotificationChangeCreate) SetNotificationObject(n *NotificationObject) *NotificationChangeCreate {
	return ncc.SetNotificationObjectID(n.ID)
}

// Mutation returns the NotificationChangeMutation object of the builder.
func (ncc *NotificationChangeCreate) Mutation() *NotificationChangeMutation {
	return ncc.mutation
}

// Save creates the NotificationChange in the database.
func (ncc *NotificationChangeCreate) Save(ctx context.Context) (*NotificationChange, error) {
	if err := ncc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, ncc.sqlSave, ncc.mutation, ncc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ncc *NotificationChangeCreate) SaveX(ctx context.Context) *NotificationChange {
	v, err := ncc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ncc *NotificationChangeCreate) Exec(ctx context.Context) error {
	_, err := ncc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ncc *NotificationChangeCreate) ExecX(ctx context.Context) {
	if err := ncc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ncc *NotificationChangeCreate) defaults() error {
	if _, ok := ncc.mutation.CreatedAt(); !ok {
		if notificationchange.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized notificationchange.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := notificationchange.DefaultCreatedAt()
		ncc.mutation.SetCreatedAt(v)
	}
	if _, ok := ncc.mutation.UpdatedAt(); !ok {
		if notificationchange.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized notificationchange.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := notificationchange.DefaultUpdatedAt()
		ncc.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (ncc *NotificationChangeCreate) check() error {
	if _, ok := ncc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "NotificationChange.created_at"`)}
	}
	if _, ok := ncc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "NotificationChange.updated_at"`)}
	}
	return nil
}

func (ncc *NotificationChangeCreate) sqlSave(ctx context.Context) (*NotificationChange, error) {
	if err := ncc.check(); err != nil {
		return nil, err
	}
	_node, _spec := ncc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ncc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	ncc.mutation.id = &_node.ID
	ncc.mutation.done = true
	return _node, nil
}

func (ncc *NotificationChangeCreate) createSpec() (*NotificationChange, *sqlgraph.CreateSpec) {
	var (
		_node = &NotificationChange{config: ncc.config}
		_spec = sqlgraph.NewCreateSpec(notificationchange.Table, sqlgraph.NewFieldSpec(notificationchange.FieldID, field.TypeInt))
	)
	if value, ok := ncc.mutation.CreatedAt(); ok {
		_spec.SetField(notificationchange.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := ncc.mutation.UpdatedAt(); ok {
		_spec.SetField(notificationchange.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := ncc.mutation.DeletedAt(); ok {
		_spec.SetField(notificationchange.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if nodes := ncc.mutation.ActorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   notificationchange.ActorTable,
			Columns: []string{notificationchange.ActorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_notification_changes = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ncc.mutation.NotificationObjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   notificationchange.NotificationObjectTable,
			Columns: []string{notificationchange.NotificationObjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notificationobject.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.notification_object_notification_changes = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// NotificationChangeCreateBulk is the builder for creating many NotificationChange entities in bulk.
type NotificationChangeCreateBulk struct {
	config
	err      error
	builders []*NotificationChangeCreate
}

// Save creates the NotificationChange entities in the database.
func (nccb *NotificationChangeCreateBulk) Save(ctx context.Context) ([]*NotificationChange, error) {
	if nccb.err != nil {
		return nil, nccb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(nccb.builders))
	nodes := make([]*NotificationChange, len(nccb.builders))
	mutators := make([]Mutator, len(nccb.builders))
	for i := range nccb.builders {
		func(i int, root context.Context) {
			builder := nccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*NotificationChangeMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, nccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, nccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, nccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (nccb *NotificationChangeCreateBulk) SaveX(ctx context.Context) []*NotificationChange {
	v, err := nccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (nccb *NotificationChangeCreateBulk) Exec(ctx context.Context) error {
	_, err := nccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nccb *NotificationChangeCreateBulk) ExecX(ctx context.Context) {
	if err := nccb.Exec(ctx); err != nil {
		panic(err)
	}
}
