// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"notification-service/ent/notificationchange"
	"notification-service/ent/notificationobjectid"
	"notification-service/ent/user"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// NotificationChange is the model entity for the NotificationChange schema.
type NotificationChange struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// DeleteTime holds the value of the "delete_time" field.
	DeleteTime time.Time `json:"delete_time,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the NotificationChangeQuery when eager-loading is set.
	Edges                                       NotificationChangeEdges `json:"edges"`
	notification_object_id_notification_changes *int
	user_notification_changes                   *int
	selectValues                                sql.SelectValues
}

// NotificationChangeEdges holds the relations/edges for other nodes in the graph.
type NotificationChangeEdges struct {
	// UserID holds the value of the userID edge.
	UserID *User `json:"userID,omitempty"`
	// NotificationObjectID holds the value of the notificationObjectID edge.
	NotificationObjectID *NotificationObjectID `json:"notificationObjectID,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// UserIDOrErr returns the UserID value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e NotificationChangeEdges) UserIDOrErr() (*User, error) {
	if e.UserID != nil {
		return e.UserID, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "userID"}
}

// NotificationObjectIDOrErr returns the NotificationObjectID value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e NotificationChangeEdges) NotificationObjectIDOrErr() (*NotificationObjectID, error) {
	if e.NotificationObjectID != nil {
		return e.NotificationObjectID, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: notificationobjectid.Label}
	}
	return nil, &NotLoadedError{edge: "notificationObjectID"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*NotificationChange) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case notificationchange.FieldID:
			values[i] = new(sql.NullInt64)
		case notificationchange.FieldDeleteTime:
			values[i] = new(sql.NullTime)
		case notificationchange.ForeignKeys[0]: // notification_object_id_notification_changes
			values[i] = new(sql.NullInt64)
		case notificationchange.ForeignKeys[1]: // user_notification_changes
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the NotificationChange fields.
func (nc *NotificationChange) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case notificationchange.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			nc.ID = int(value.Int64)
		case notificationchange.FieldDeleteTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field delete_time", values[i])
			} else if value.Valid {
				nc.DeleteTime = value.Time
			}
		case notificationchange.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field notification_object_id_notification_changes", value)
			} else if value.Valid {
				nc.notification_object_id_notification_changes = new(int)
				*nc.notification_object_id_notification_changes = int(value.Int64)
			}
		case notificationchange.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_notification_changes", value)
			} else if value.Valid {
				nc.user_notification_changes = new(int)
				*nc.user_notification_changes = int(value.Int64)
			}
		default:
			nc.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the NotificationChange.
// This includes values selected through modifiers, order, etc.
func (nc *NotificationChange) Value(name string) (ent.Value, error) {
	return nc.selectValues.Get(name)
}

// QueryUserID queries the "userID" edge of the NotificationChange entity.
func (nc *NotificationChange) QueryUserID() *UserQuery {
	return NewNotificationChangeClient(nc.config).QueryUserID(nc)
}

// QueryNotificationObjectID queries the "notificationObjectID" edge of the NotificationChange entity.
func (nc *NotificationChange) QueryNotificationObjectID() *NotificationObjectIDQuery {
	return NewNotificationChangeClient(nc.config).QueryNotificationObjectID(nc)
}

// Update returns a builder for updating this NotificationChange.
// Note that you need to call NotificationChange.Unwrap() before calling this method if this NotificationChange
// was returned from a transaction, and the transaction was committed or rolled back.
func (nc *NotificationChange) Update() *NotificationChangeUpdateOne {
	return NewNotificationChangeClient(nc.config).UpdateOne(nc)
}

// Unwrap unwraps the NotificationChange entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (nc *NotificationChange) Unwrap() *NotificationChange {
	_tx, ok := nc.config.driver.(*txDriver)
	if !ok {
		panic("ent: NotificationChange is not a transactional entity")
	}
	nc.config.driver = _tx.drv
	return nc
}

// String implements the fmt.Stringer.
func (nc *NotificationChange) String() string {
	var builder strings.Builder
	builder.WriteString("NotificationChange(")
	builder.WriteString(fmt.Sprintf("id=%v, ", nc.ID))
	builder.WriteString("delete_time=")
	builder.WriteString(nc.DeleteTime.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// NotificationChanges is a parsable slice of NotificationChange.
type NotificationChanges []*NotificationChange
