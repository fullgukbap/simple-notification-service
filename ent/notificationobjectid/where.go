// Code generated by ent, DO NOT EDIT.

package notificationobjectid

import (
	"notification-service/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.NotificationObjectID {
	return predicate.NotificationObjectID(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.NotificationObjectID {
	return predicate.NotificationObjectID(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.NotificationObjectID {
	return predicate.NotificationObjectID(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.NotificationObjectID {
	return predicate.NotificationObjectID(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.NotificationObjectID {
	return predicate.NotificationObjectID(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.NotificationObjectID {
	return predicate.NotificationObjectID(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.NotificationObjectID {
	return predicate.NotificationObjectID(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.NotificationObjectID {
	return predicate.NotificationObjectID(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.NotificationObjectID {
	return predicate.NotificationObjectID(sql.FieldLTE(FieldID, id))
}

// DeleteTime applies equality check predicate on the "delete_time" field. It's identical to DeleteTimeEQ.
func DeleteTime(v time.Time) predicate.NotificationObjectID {
	return predicate.NotificationObjectID(sql.FieldEQ(FieldDeleteTime, v))
}

// EntityID applies equality check predicate on the "entity_id" field. It's identical to EntityIDEQ.
func EntityID(v int) predicate.NotificationObjectID {
	return predicate.NotificationObjectID(sql.FieldEQ(FieldEntityID, v))
}

// DeleteTimeEQ applies the EQ predicate on the "delete_time" field.
func DeleteTimeEQ(v time.Time) predicate.NotificationObjectID {
	return predicate.NotificationObjectID(sql.FieldEQ(FieldDeleteTime, v))
}

// DeleteTimeNEQ applies the NEQ predicate on the "delete_time" field.
func DeleteTimeNEQ(v time.Time) predicate.NotificationObjectID {
	return predicate.NotificationObjectID(sql.FieldNEQ(FieldDeleteTime, v))
}

// DeleteTimeIn applies the In predicate on the "delete_time" field.
func DeleteTimeIn(vs ...time.Time) predicate.NotificationObjectID {
	return predicate.NotificationObjectID(sql.FieldIn(FieldDeleteTime, vs...))
}

// DeleteTimeNotIn applies the NotIn predicate on the "delete_time" field.
func DeleteTimeNotIn(vs ...time.Time) predicate.NotificationObjectID {
	return predicate.NotificationObjectID(sql.FieldNotIn(FieldDeleteTime, vs...))
}

// DeleteTimeGT applies the GT predicate on the "delete_time" field.
func DeleteTimeGT(v time.Time) predicate.NotificationObjectID {
	return predicate.NotificationObjectID(sql.FieldGT(FieldDeleteTime, v))
}

// DeleteTimeGTE applies the GTE predicate on the "delete_time" field.
func DeleteTimeGTE(v time.Time) predicate.NotificationObjectID {
	return predicate.NotificationObjectID(sql.FieldGTE(FieldDeleteTime, v))
}

// DeleteTimeLT applies the LT predicate on the "delete_time" field.
func DeleteTimeLT(v time.Time) predicate.NotificationObjectID {
	return predicate.NotificationObjectID(sql.FieldLT(FieldDeleteTime, v))
}

// DeleteTimeLTE applies the LTE predicate on the "delete_time" field.
func DeleteTimeLTE(v time.Time) predicate.NotificationObjectID {
	return predicate.NotificationObjectID(sql.FieldLTE(FieldDeleteTime, v))
}

// DeleteTimeIsNil applies the IsNil predicate on the "delete_time" field.
func DeleteTimeIsNil() predicate.NotificationObjectID {
	return predicate.NotificationObjectID(sql.FieldIsNull(FieldDeleteTime))
}

// DeleteTimeNotNil applies the NotNil predicate on the "delete_time" field.
func DeleteTimeNotNil() predicate.NotificationObjectID {
	return predicate.NotificationObjectID(sql.FieldNotNull(FieldDeleteTime))
}

// EntityIDEQ applies the EQ predicate on the "entity_id" field.
func EntityIDEQ(v int) predicate.NotificationObjectID {
	return predicate.NotificationObjectID(sql.FieldEQ(FieldEntityID, v))
}

// EntityIDNEQ applies the NEQ predicate on the "entity_id" field.
func EntityIDNEQ(v int) predicate.NotificationObjectID {
	return predicate.NotificationObjectID(sql.FieldNEQ(FieldEntityID, v))
}

// EntityIDIn applies the In predicate on the "entity_id" field.
func EntityIDIn(vs ...int) predicate.NotificationObjectID {
	return predicate.NotificationObjectID(sql.FieldIn(FieldEntityID, vs...))
}

// EntityIDNotIn applies the NotIn predicate on the "entity_id" field.
func EntityIDNotIn(vs ...int) predicate.NotificationObjectID {
	return predicate.NotificationObjectID(sql.FieldNotIn(FieldEntityID, vs...))
}

// EntityIDGT applies the GT predicate on the "entity_id" field.
func EntityIDGT(v int) predicate.NotificationObjectID {
	return predicate.NotificationObjectID(sql.FieldGT(FieldEntityID, v))
}

// EntityIDGTE applies the GTE predicate on the "entity_id" field.
func EntityIDGTE(v int) predicate.NotificationObjectID {
	return predicate.NotificationObjectID(sql.FieldGTE(FieldEntityID, v))
}

// EntityIDLT applies the LT predicate on the "entity_id" field.
func EntityIDLT(v int) predicate.NotificationObjectID {
	return predicate.NotificationObjectID(sql.FieldLT(FieldEntityID, v))
}

// EntityIDLTE applies the LTE predicate on the "entity_id" field.
func EntityIDLTE(v int) predicate.NotificationObjectID {
	return predicate.NotificationObjectID(sql.FieldLTE(FieldEntityID, v))
}

// HasNotifications applies the HasEdge predicate on the "notifications" edge.
func HasNotifications() predicate.NotificationObjectID {
	return predicate.NotificationObjectID(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, NotificationsTable, NotificationsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasNotificationsWith applies the HasEdge predicate on the "notifications" edge with a given conditions (other predicates).
func HasNotificationsWith(preds ...predicate.Notification) predicate.NotificationObjectID {
	return predicate.NotificationObjectID(func(s *sql.Selector) {
		step := newNotificationsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasNotificationChanges applies the HasEdge predicate on the "notificationChanges" edge.
func HasNotificationChanges() predicate.NotificationObjectID {
	return predicate.NotificationObjectID(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, NotificationChangesTable, NotificationChangesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasNotificationChangesWith applies the HasEdge predicate on the "notificationChanges" edge with a given conditions (other predicates).
func HasNotificationChangesWith(preds ...predicate.NotificationChange) predicate.NotificationObjectID {
	return predicate.NotificationObjectID(func(s *sql.Selector) {
		step := newNotificationChangesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasEntityTypeID applies the HasEdge predicate on the "entityTypeID" edge.
func HasEntityTypeID() predicate.NotificationObjectID {
	return predicate.NotificationObjectID(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, EntityTypeIDTable, EntityTypeIDColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEntityTypeIDWith applies the HasEdge predicate on the "entityTypeID" edge with a given conditions (other predicates).
func HasEntityTypeIDWith(preds ...predicate.EntityType) predicate.NotificationObjectID {
	return predicate.NotificationObjectID(func(s *sql.Selector) {
		step := newEntityTypeIDStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.NotificationObjectID) predicate.NotificationObjectID {
	return predicate.NotificationObjectID(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.NotificationObjectID) predicate.NotificationObjectID {
	return predicate.NotificationObjectID(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.NotificationObjectID) predicate.NotificationObjectID {
	return predicate.NotificationObjectID(sql.NotPredicates(p))
}
