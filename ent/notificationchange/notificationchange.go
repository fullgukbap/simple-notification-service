// Code generated by ent, DO NOT EDIT.

package notificationchange

import (
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the notificationchange type in the database.
	Label = "notification_change"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldDeleteTime holds the string denoting the delete_time field in the database.
	FieldDeleteTime = "delete_time"
	// EdgeUserID holds the string denoting the userid edge name in mutations.
	EdgeUserID = "userID"
	// EdgeNotificationObjectID holds the string denoting the notificationobjectid edge name in mutations.
	EdgeNotificationObjectID = "notificationObjectID"
	// Table holds the table name of the notificationchange in the database.
	Table = "notification_changes"
	// UserIDTable is the table that holds the userID relation/edge.
	UserIDTable = "notification_changes"
	// UserIDInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserIDInverseTable = "users"
	// UserIDColumn is the table column denoting the userID relation/edge.
	UserIDColumn = "user_notification_changes"
	// NotificationObjectIDTable is the table that holds the notificationObjectID relation/edge.
	NotificationObjectIDTable = "notification_changes"
	// NotificationObjectIDInverseTable is the table name for the NotificationObjectID entity.
	// It exists in this package in order to avoid circular dependency with the "notificationobjectid" package.
	NotificationObjectIDInverseTable = "notification_object_ids"
	// NotificationObjectIDColumn is the table column denoting the notificationObjectID relation/edge.
	NotificationObjectIDColumn = "notification_object_id_notification_changes"
)

// Columns holds all SQL columns for notificationchange fields.
var Columns = []string{
	FieldID,
	FieldDeleteTime,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "notification_changes"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"notification_object_id_notification_changes",
	"user_notification_changes",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "notification-service/ent/runtime"
var (
	Hooks        [1]ent.Hook
	Interceptors [1]ent.Interceptor
)

// OrderOption defines the ordering options for the NotificationChange queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByDeleteTime orders the results by the delete_time field.
func ByDeleteTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeleteTime, opts...).ToFunc()
}

// ByUserIDField orders the results by userID field.
func ByUserIDField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserIDStep(), sql.OrderByField(field, opts...))
	}
}

// ByNotificationObjectIDField orders the results by notificationObjectID field.
func ByNotificationObjectIDField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newNotificationObjectIDStep(), sql.OrderByField(field, opts...))
	}
}
func newUserIDStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UserIDInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, UserIDTable, UserIDColumn),
	)
}
func newNotificationObjectIDStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(NotificationObjectIDInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, NotificationObjectIDTable, NotificationObjectIDColumn),
	)
}
